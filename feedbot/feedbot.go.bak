package feedbot

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
)

func messageRequest(ctx context.Context, body []byte) (*http.Request, error) {
	url := fmt.Sprintf("%s/channels/%s/messages", viper.GetString("DISCORD_API"), viper.GetString("CHANNEL_ID"))
	req, err := http.NewRequestWithContext(
		ctx,
		"POST",
		url,
		bytes.NewReader(body),
	)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Authorization", "Bot "+viper.GetString("BOT_TOKEN"))
	req.Header.Set("User-Agent", viper.GetString("AGENT_NAME"))
	req.Header.Set("Content-Type", "application/json")
	return req, nil
}

func HelloMessage() ([]byte, error) {
	data := map[string]interface{}{
		"content": "Hello, World!",
		"tts":     false,
		"embeds": []map[string]interface{}{
			{"title": "Hello, Embed!", "description": "This is an embedded message."},
		},
	}
	body, err := json.Marshal(data)
	if err != nil {
		return nil, err
	}

	return body, nil
}

func postMessage() {
	client := http.Client{}

	message, err := HelloMessage()
	if err != nil {
		logrus.Fatalf("failed to create message: %s", err)
	}

	req, err := messageRequest(context.Background(), message)
	if err != nil {
		logrus.Fatalf("failed to create request: %s", err)
	}

	resp, err := client.Do(req)
	if err != nil {
		logrus.Fatalf("failed to send message: %s", err)
	}

	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		logrus.Warnf("failed to wrangle response: %s", err)
	}

	// TODO: handle rate limiting
	if resp.StatusCode != http.StatusOK {
		logrus.Warnf("failed to send message: %s", string(body))
	} else {
		logrus.Info("posted message: %s", string(body))
	}
}
