package extern_services

import (
	"context"
	"time"
	gfcore "github.com/gloflow/gloflow/go/gf_core"
	"github.com/mikeydub/go-gallery/db"
)

//-------------------------------------------------------------
// ADD!! - persist OpenSea fetched assets as well.

//-------------------------------------------------------------
func OpenSeaPipelineAssetsForAcc(pOwnerWalletAddressStr string,
	pCtx context.Context,
	pRuntimeSys *gfcore.Runtime_sys) *gfcore.Gf_error {




	openSeaAssetsForAccLst, gErr := OpenSeaFetchAssetsForAcc(pOwnerWalletAddressStr,
		pCtx,
		pRuntimeSys)
	if gErr != nil {
		return gErr
	}



	// DB_PERSIST
	for _, openSeaAsset := range openSeaAssetsForAccLst {



		creationTimeUNIXf := float64(time.Now().UnixNano())/1000000000.0
		nft := &db.GLRYnft{
			VersionInt:         0,
			// IDstr:              "", // for now generated by the DB
			CreationTimeF:      creationTimeUNIXf,
			NameStr:            openSeaAsset.NameStr,
			DescriptionStr:     openSeaAsset.DescriptionStr,
			CollectionNamesLst: []string{openSeaAsset.Collection.NameStr, },

			ExternalURLstr:     openSeaAsset.ExternLinkStr,
			CreatorAddressStr:  openSeaAsset.Creator.AddressStr,
			ContractAddressStr: openSeaAsset.AssetContract.AddressStr,

			OpenSeaTokenIDstr: openSeaAsset.TokenIDstr,       

			ImageURLstr:          openSeaAsset.ImageURLstr,
			ImageThumbnailURLstr: openSeaAsset.ImageThumbURLstr,
			ImagePreviewURLstr:   openSeaAsset.ImagePreviewURLstr,

			PositionInt: 0,
			HiddenBool:  false,
		}

		gErr := db.NFTcreate(nft, pCtx, pRuntimeSys)
		if gErr != nil {

			// try to persist the rest of OpenSea NFT's
			continue
		}

	}






	return nil







}