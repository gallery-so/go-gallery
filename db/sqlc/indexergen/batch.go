// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: batch.go
package indexergen

import (
	"context"

	"github.com/jackc/pgx/v4"
	"github.com/mikeydub/go-gallery/service/persist"
)

const getAddressFilterBatch = `-- name: GetAddressFilterBatch :batchone
SELECT id, from_block, to_block, bloom_filter, created_at, last_updated, deleted FROM address_filters WHERE from_block = $1 AND to_block = $2 AND deleted = false
`

type GetAddressFilterBatchBatchResults struct {
	br  pgx.BatchResults
	ind int
}

type GetAddressFilterBatchParams struct {
	FromBlock persist.BlockNumber
	ToBlock   persist.BlockNumber
}

func (q *Queries) GetAddressFilterBatch(ctx context.Context, arg []GetAddressFilterBatchParams) *GetAddressFilterBatchBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.FromBlock,
			a.ToBlock,
		}
		batch.Queue(getAddressFilterBatch, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &GetAddressFilterBatchBatchResults{br, 0}
}

func (b *GetAddressFilterBatchBatchResults) QueryRow(f func(int, AddressFilter, error)) {
	for {
		row := b.br.QueryRow()
		var i AddressFilter
		err := row.Scan(
			&i.ID,
			&i.FromBlock,
			&i.ToBlock,
			&i.BloomFilter,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Deleted,
		)
		if err != nil && (err.Error() == "no result" || err.Error() == "batch already closed") {
			break
		}
		if f != nil {
			f(b.ind, i, err)
		}
		b.ind++
	}
}

func (b *GetAddressFilterBatchBatchResults) Close() error {
	return b.br.Close()
}
