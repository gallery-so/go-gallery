// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: indexer.sql

package indexergen

import (
	"context"
<<<<<<< HEAD

	"github.com/mikeydub/go-gallery/service/persist"
)

const addAddressFilter = `-- name: AddAddressFilter :exec
INSERT INTO address_filters (id, from_block, to_block, bloom_filter, created_at, last_updated) VALUES ($1, $2, $3, $4, now(), now())
ON CONFLICT(from_block, to_block) DO UPDATE SET bloom_filter = EXCLUDED.bloom_filter, last_updated = now(), deleted = false
`

type AddAddressFilterParams struct {
	ID          persist.DBID
	FromBlock   persist.BlockNumber
	ToBlock     persist.BlockNumber
	BloomFilter []byte
}

func (q *Queries) AddAddressFilter(ctx context.Context, arg AddAddressFilterParams) error {
	_, err := q.db.Exec(ctx, addAddressFilter,
		arg.ID,
		arg.FromBlock,
		arg.ToBlock,
		arg.BloomFilter,
	)
	return err
}

const bulkUpsertAddressFilters = `-- name: BulkUpsertAddressFilters :exec
INSERT INTO address_filters (id, from_block, to_block, bloom_filter, created_at, last_updated) VALUES (unnest($1::varchar[]), unnest($2::bigint[]), unnest($3::bigint[]), unnest($4::bytea[]), now(), now())
ON CONFLICT(from_block, to_block) DO UPDATE SET bloom_filter = EXCLUDED.bloom_filter, last_updated = now(), deleted = false
`

type BulkUpsertAddressFiltersParams struct {
	ID          []string
	FromBlock   []int64
	ToBlock     []int64
	BloomFilter [][]byte
}

func (q *Queries) BulkUpsertAddressFilters(ctx context.Context, arg BulkUpsertAddressFiltersParams) error {
	_, err := q.db.Exec(ctx, bulkUpsertAddressFilters,
		arg.ID,
		arg.FromBlock,
		arg.ToBlock,
		arg.BloomFilter,
	)
	return err
=======
)

const firstContract = `-- name: FirstContract :one
SELECT id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, latest_block FROM contracts LIMIT 1
`

// sqlc needs at least one query in order to generate the models.
func (q *Queries) FirstContract(ctx context.Context) (Contract, error) {
	row := q.db.QueryRow(ctx, firstContract)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Name,
		&i.Symbol,
		&i.Address,
		&i.CreatorAddress,
		&i.Chain,
		&i.LatestBlock,
	)
	return i, err
>>>>>>> a4e9c3f (Add indexer models)
}
