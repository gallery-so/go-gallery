package db

import (
	"context"
	gfcore "github.com/gloflow/gloflow/go/gf_core"
)

//-------------------------------------------------------------
type GLRYnft struct {
	VersionInt         int64     `bson:"version"              json:"version"` // schema version for this model
	IDstr              string    `bson:"_id"                  json:"id"`
	CreationTimeF      float64   `bson:"creation_time"        json:"creation_time"`
	NameStr            string    `bson:"name"                 json:"name"`
	DescriptionStr     string    `bson:"description"          json:"description"`
	CollectionNamesLst []string  `bson:"collection_names"     json:"collection_names"`
	
	ExternalURLstr     string    `bson:"external_url"         json:"external_url"`
	CreatorAddressStr  string    `bson:"creator_address"      json:"creator_address"`
	ContractAddressStr string    `bson:"contract_address"     json:"contract_address"`

	// OPEN_SEA_TOKEN_ID
	OpenSeaTokenIDstr string `bson:"opensea_token_id" json:"opensea_token_id"`

	// IMAGES
	ImageURLstr          string `bson:"image_url"           json:"image_url"`
	ImageThumbnailURLstr string `bson:"image_thumbnail_url" json:"image_thumbnail_url"`
	ImagePreviewURLstr   string `bson:"image_preview_url"   json:"image_preview_url"`

	PositionInt int64 `bson:"position" json:"position"`
	HiddenBool  bool  `bson:"hidden"   json:"hidden"`
}

// DEPRECATED!! - will be removed once we fully migrate to v1 server/db schema.
//                legacy NFT type, this is the schema in the initial v0 prototype of the system.
type GLRYnftLegacy struct {

	// ID - for now generated by the DB
	IDstr string `bson:"_id" json:"id"`

	// removed from newer NFT model, NFT's might be associated with multiple Users,
	// so we dont want to limit to a single user.
	UserIDstr string `bson:"user_id" json:"user_id"`

	ImageURLstr       string `bson:"image_url"           json:"image_url"`
	DescriptionStr    string `bson:"description"         json:"description"`
	NameStr           string `bson:"name"                json:"name"`
	CollectionNameStr string `bson:"collection_name"     json:"collection_name"`
	
	ExternalURLstr       string    `bson:"external_url"        json:"external_url"`
	CreatedDateF         float64   `bson:"created_date"        json:"created_date"`
	CreatorAddressStr    string    `bson:"creator_address"     json:"creator_address"`
	ContractAddressStr   string    `bson:"contract_address"    json:"contract_address"`
	TokenIDstr           int64     `bson:"token_id"            json:"token_id"`
	ImageThumbnailURLstr string    `bson:"image_thumbnail_url" json:"image_thumbnail_url"`
	ImagePreviewURLstr   string    `bson:"image_preview_url"   json:"image_preview_url"`

	PositionInt int64 `bson:"position" json:"position"`
	HiddenBool  bool  `bson:"hidden"   json:"hidden"`
}

//-------------------------------------------------------------
func NFTcreate(pNFT *GLRYnft,
	pCtx        context.Context,
	pRuntimeSys *gfcore.Runtime_sys) *gfcore.Gf_error {



	collNameStr := "glry_nfts"
	
	gErr := gfcore.Mongo__insert(pNFT,
		collNameStr,
		map[string]interface{}{
			"nft_name":           pNFT.NameStr,
			"nft_image_url":      pNFT.ImageURLstr,
			"caller_err_msg_str": "failed to insert a new NFT into the DB",
		},
		pCtx,
		pRuntimeSys)
	if gErr != nil {
		return gErr
	}



	return nil
}

//-------------------------------------------------------------
func NFTgetByUserID(pUserIDstr string,
	pCtx context.Context,
	pRuntimeSys *gfcore.Runtime_sys) ([]*GLRYnft, *gfcore.Gf_error) {





	return nil, nil
}