// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: contract_gallery.sql

package coredb

import (
	"context"
)

const upsertChildContracts = `-- name: UpsertChildContracts :many
insert into contracts(id, deleted, version, created_at, name, address, creator_address, owner_address, chain, description, parent_id) (
  select unnest($1::varchar[]) as id
    , false
    , 0
    , now()
    , unnest($2::varchar[])
    , unnest($3::varchar[])
    , unnest($4::varchar[])
    , unnest($5::varchar[])
    , unnest($6::int[])
    , unnest($7::varchar[])
    , unnest($8::varchar[])
)
on conflict (chain, parent_id, address) where parent_id is not null
do update set deleted = excluded.deleted
  , name = excluded.name
  , creator_address = excluded.creator_address
  , owner_address = excluded.owner_address
  , description = excluded.description
  , last_updated = now()
returning id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description, owner_address, is_provider_marked_spam, parent_id, override_creator_user_id
`

type UpsertChildContractsParams struct {
	ID             []string
	Name           []string
	Address        []string
	CreatorAddress []string
	OwnerAddress   []string
	Chain          []int32
	Description    []string
	ParentIds      []string
}

func (q *Queries) UpsertChildContracts(ctx context.Context, arg UpsertChildContractsParams) ([]Contract, error) {
	rows, err := q.db.Query(ctx, upsertChildContracts,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.CreatorAddress,
		arg.OwnerAddress,
		arg.Chain,
		arg.Description,
		arg.ParentIds,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
			&i.OwnerAddress,
			&i.IsProviderMarkedSpam,
			&i.ParentID,
			&i.OverrideCreatorUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertParentContracts = `-- name: UpsertParentContracts :many
insert into contracts(id, deleted, version, created_at, address, symbol, name, owner_address, chain, description) (
  select unnest($1::varchar[])
    , false
    , unnest($2::int[])
    , now()
    , unnest($3::varchar[])
    , unnest($4::varchar[])
    , unnest($5::varchar[])
    , unnest($6::varchar[])
    , unnest($7::int[])
    , unnest($8::varchar[])
)
on conflict (chain, address) where parent_id is null
do update set symbol = excluded.symbol
  , version = excluded.version
  , name = excluded.name
  , owner_address = excluded.owner_address
  , description = excluded.description
  , deleted = excluded.deleted
  , last_updated = now()
returning id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description, owner_address, is_provider_marked_spam, parent_id, override_creator_user_id
`

type UpsertParentContractsParams struct {
	Ids          []string
	Version      []int32
	Address      []string
	Symbol       []string
	Name         []string
	OwnerAddress []string
	Chain        []int32
	Description  []string
}

func (q *Queries) UpsertParentContracts(ctx context.Context, arg UpsertParentContractsParams) ([]Contract, error) {
	rows, err := q.db.Query(ctx, upsertParentContracts,
		arg.Ids,
		arg.Version,
		arg.Address,
		arg.Symbol,
		arg.Name,
		arg.OwnerAddress,
		arg.Chain,
		arg.Description,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
			&i.OwnerAddress,
			&i.IsProviderMarkedSpam,
			&i.ParentID,
			&i.OverrideCreatorUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
