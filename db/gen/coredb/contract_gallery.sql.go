// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: contract_gallery.sql

package coredb

import (
	"context"
)

const upsertContracts = `-- name: UpsertContracts :many
insert into contracts (id, deleted, version, address, symbol, name, owner_address, chain, description) (
  select unnest($1::varchar[])
  , unnest($2::boolean[])
  , unnest($3::int[])
  , now()
  , unnest($4::varchar[])
  , unnest($5::varchar[])
  , unnest($6::varchar[])
  , unnest($7::varchar[])
  , unnest($8::int[])
  , unnest($9::varchar[])
)
on conflict (chain, address) where parent_id is null
do update set symbol = excluded.symbol
  , version = excluded.version
  , name = excluded.name
  , owner_address = excluded.owner_address
  , description = excluded.description
  , deleted = excluded.deleted
  , last_updated = now()
returning id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description, owner_address, is_provider_marked_spam, parent_id
`

type UpsertContractsParams struct {
	ID           []string
	Deleted      []bool
	Version      []int32
	Address      []string
	Symbol       []string
	Name         []string
	OwnerAddress []string
	Chain        []int32
	Description  []string
}

func (q *Queries) UpsertContracts(ctx context.Context, arg UpsertContractsParams) ([]Contract, error) {
	rows, err := q.db.Query(ctx, upsertContracts,
		arg.ID,
		arg.Deleted,
		arg.Version,
		arg.Address,
		arg.Symbol,
		arg.Name,
		arg.OwnerAddress,
		arg.Chain,
		arg.Description,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
			&i.OwnerAddress,
			&i.IsProviderMarkedSpam,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertCreatedTokens = `-- name: UpsertCreatedTokens :many
 -- parent_contracts_data is the parent contract data to be inserted
with parent_contracts_data(id, deleted, name, symbol, address, creator_address, chain, description) as (
  select unnest($1::varchar[]) as id
    , unnest($2::boolean[]) as deleted
    , unnest($3::varchar[]) as name
    , unnest($4::varchar[]) as symbol
    , unnest($5::varchar[]) as address
    , unnest($6::varchar[]) as creator_address
    , unnest($7::int[]) as chain
    , unnest($8::varchar[]) as description
),


child_contracts_data(id, deleted, name, address, creator_address, chain, description, parent_address) as (
  select unnest($9::varchar[]) as id
    , unnest($10::boolean[]) as deleted
    , unnest($11::varchar[]) as name
    , unnest($12::varchar[]) as address
    , unnest($13::varchar[]) as creator_address
    , unnest($14::int[]) as chain
    , unnest($15::varchar[]) as description
    , unnest($16::varchar[]) as parent_address
),

insert_parent_contracts as (
  insert into contracts(id, deleted, created_at, name, symbol, address, creator_address, chain, description)
  (
    select id, deleted, now(), name, symbol, address, creator_address, chain, description
    from parent_contracts_data
  )
  on conflict (chain, address) where parent_id is null
  do update set deleted = excluded.deleted
    , name = excluded.name
    , symbol = excluded.symbol
    , creator_address = excluded.creator_address
    , description = excluded.description
    , last_updated = now()
  returning id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description, owner_address, is_provider_marked_spam, parent_id
)

insert into contracts(id, deleted, created_at, name, address, creator_address, chain, description, parent_id)
(
  select child.id, child.deleted, now(), child.name, child.address, child.creator_address, child.chain, child.description, insert_parent_contracts.id
  from child_contracts_data child
  join insert_parent_contracts on child.chain = insert_parent_contracts.chain and child.parent_address = insert_parent_contracts.address
)
on conflict (chain, parent_id, address) where parent_id is not null
do update set deleted = excluded.deleted
  , name = excluded.name
  , creator_address = excluded.creator_address
  , description = excluded.description
  , last_updated = now()
returning id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description, owner_address, is_provider_marked_spam, parent_id
`

type UpsertCreatedTokensParams struct {
	ParentContractID             []string
	ParentContractDeleted        []bool
	ParentContractName           []string
	ParentContractSymbol         []string
	ParentContractAddress        []string
	ParentContractCreatorAddress []string
	ParentContractChain          []int32
	ParentContractDescription    []string
	ChildContractID              []string
	ChildContractDeleted         []bool
	ChildContractName            []string
	ChildContractAddress         []string
	ChildContractCreatorAddress  []string
	ChildContractChain           []int32
	ChildContractDescription     []string
	ChildContractParentAddress   []string
}

// child_contracts_data is the child contract data to be inserted
// insert the parent contracts
// insert the child contracts
func (q *Queries) UpsertCreatedTokens(ctx context.Context, arg UpsertCreatedTokensParams) ([]Contract, error) {
	rows, err := q.db.Query(ctx, upsertCreatedTokens,
		arg.ParentContractID,
		arg.ParentContractDeleted,
		arg.ParentContractName,
		arg.ParentContractSymbol,
		arg.ParentContractAddress,
		arg.ParentContractCreatorAddress,
		arg.ParentContractChain,
		arg.ParentContractDescription,
		arg.ChildContractID,
		arg.ChildContractDeleted,
		arg.ChildContractName,
		arg.ChildContractAddress,
		arg.ChildContractCreatorAddress,
		arg.ChildContractChain,
		arg.ChildContractDescription,
		arg.ChildContractParentAddress,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
			&i.OwnerAddress,
			&i.IsProviderMarkedSpam,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
