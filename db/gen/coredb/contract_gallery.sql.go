// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: contract_gallery.sql

package coredb

import (
	"context"
	"time"
)

const upsertContracts = `-- name: UpsertContracts :many
insert into contracts
(
  id
  , deleted
  , version
  , created_at
  , last_updated
  , address
  , symbol
  , name
  , creator_address
  , chain
) (
  select
  unnest($1::varchar[])
  , unnest($2::boolean[])
  , unnest($3::int[])
  , unnest($4::timestamptz[])
  , unnest($5::timestamptz[])
  , unnest($6::varchar[])
  , unnest($7::varchar[])
  , unnest($8::varchar[])
  , unnest($9::varchar[])
  , unnest($10::int[])
)
on conflict (address, chain) where deleted = false
do update set
  symbol = excluded.symbol
  , version = excluded.version
  , name = excluded.name
  , creator_address = excluded.creator_address
  , chain = excluded.chain
  , last_updated = excluded.last_updated
returning id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description
`

type UpsertContractsParams struct {
	ID             []string
	Deleted        []bool
	Version        []int32
	CreatedAt      []time.Time
	LastUpdated    []time.Time
	Address        []string
	Symbol         []string
	Name           []string
	CreatorAddress []string
	Chain          []int32
}

func (q *Queries) UpsertContracts(ctx context.Context, arg UpsertContractsParams) ([]Contract, error) {
	rows, err := q.db.Query(ctx, upsertContracts,
		arg.ID,
		arg.Deleted,
		arg.Version,
		arg.CreatedAt,
		arg.LastUpdated,
		arg.Address,
		arg.Symbol,
		arg.Name,
		arg.CreatorAddress,
		arg.Chain,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
