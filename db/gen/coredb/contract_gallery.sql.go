// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: contract_gallery.sql

package coredb

import (
	"context"

	"github.com/mikeydub/go-gallery/service/persist"
)

const upsertContracts = `-- name: UpsertContracts :many
insert into contracts (id, deleted, version, created_at, address, symbol, name, owner_address, chain, description, creator_address, parent_contract_id) (
  select unnest(id), false, unnest(version), now(), unnest(address), unnest(symbol), unnest(name), unnest(owner_address), unnest(chain), unnest(description), unnest(creator_address), unnest(parent_id)
  from (select $1 as id
    , $2::int[] as version
    , $3::varchar[] as address
    , $4::varchar[] as symbol
    , $5::varchar[] as name
    , $6::varchar[] as owner_address
    , $7::int[] as chain
    , $8::varchar[] as description
    , $9::varchar[] as creator_address
    , $10 as parent_id) params
)
on conflict (chain, address) where parent_id is null
do update set symbol = excluded.symbol
  , version = excluded.version
  , name = excluded.name
  , owner_address = excluded.owner_address
  , description = excluded.description
  , deleted = excluded.deleted
  , last_updated = now()
  , creator_address = case
    when contracts.creator_address is not null and excluded.creator_address is null then contracts.creator_address
    else excluded.creator_address
    end
  , parent_id = case
    when contracts.parent_id is not null and excluded.parent_id is null then contracts.parent_id
    else excluded.parent_id
    end
returning id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description, owner_address, is_provider_marked_spam, parent_id
`

type UpsertContractsParams struct {
	Ids            persist.DBIDList
	Version        []int32
	Address        []string
	Symbol         []string
	Name           []string
	OwnerAddress   []string
	Chain          []int32
	Description    []string
	CreatorAddress []string
	ParentIds      persist.DBIDList
}

func (q *Queries) UpsertContracts(ctx context.Context, arg UpsertContractsParams) ([]Contract, error) {
	rows, err := q.db.Query(ctx, upsertContracts,
		arg.Ids,
		arg.Version,
		arg.Address,
		arg.Symbol,
		arg.Name,
		arg.OwnerAddress,
		arg.Chain,
		arg.Description,
		arg.CreatorAddress,
		arg.ParentIds,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
			&i.OwnerAddress,
			&i.IsProviderMarkedSpam,
			&i.ParentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
