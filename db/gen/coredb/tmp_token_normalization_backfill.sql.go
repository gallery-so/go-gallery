// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: tmp_token_normalization_backfill.sql

package coredb

import (
	"context"

	"github.com/mikeydub/go-gallery/service/persist"
)

const getTokenBackfillBatch = `-- name: GetTokenBackfillBatch :many
select tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name__deprecated, tokens.description__deprecated, tokens.collectors_note, tokens.token_uri__deprecated, tokens.token_type__deprecated, tokens.token_id__deprecated, tokens.quantity, tokens.ownership_history__deprecated, tokens.external_url__deprecated, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain__deprecated, tokens.contract_id, tokens.is_user_marked_spam, tokens.is_provider_marked_spam__deprecated, tokens.last_synced, tokens.fallback_media__deprecated, tokens.token_media_id__deprecated, tokens.is_creator_token, tokens.is_holder_token, tokens.displayable, tokens.token_definition_id, token_medias.id, token_medias.created_at, token_medias.last_updated, token_medias.version, token_medias.contract_id__deprecated, token_medias.token_id__deprecated, token_medias.chain__deprecated, token_medias.active, token_medias.metadata__deprecated, token_medias.media, token_medias.name__deprecated, token_medias.description__deprecated, token_medias.processing_job_id, token_medias.deleted
from tokens
left join token_medias on tokens.token_media_id__deprecated = token_medias.id
where $1 < tokens.id and tokens.id <= $2
`

type GetTokenBackfillBatchParams struct {
	StartID persist.DBID `json:"start_id"`
	EndID   persist.DBID `json:"end_id"`
}

type GetTokenBackfillBatchRow struct {
	Token      Token      `json:"token"`
	TokenMedia TokenMedia `json:"tokenmedia"`
}

func (q *Queries) GetTokenBackfillBatch(ctx context.Context, arg GetTokenBackfillBatchParams) ([]GetTokenBackfillBatchRow, error) {
	rows, err := q.db.Query(ctx, getTokenBackfillBatch, arg.StartID, arg.EndID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTokenBackfillBatchRow
	for rows.Next() {
		var i GetTokenBackfillBatchRow
		if err := rows.Scan(
			&i.Token.ID,
			&i.Token.Deleted,
			&i.Token.Version,
			&i.Token.CreatedAt,
			&i.Token.LastUpdated,
			&i.Token.NameDeprecated,
			&i.Token.DescriptionDeprecated,
			&i.Token.CollectorsNote,
			&i.Token.TokenUriDeprecated,
			&i.Token.TokenTypeDeprecated,
			&i.Token.TokenIDDeprecated,
			&i.Token.Quantity,
			&i.Token.OwnershipHistoryDeprecated,
			&i.Token.ExternalUrlDeprecated,
			&i.Token.BlockNumber,
			&i.Token.OwnerUserID,
			&i.Token.OwnedByWallets,
			&i.Token.ChainDeprecated,
			&i.Token.ContractID,
			&i.Token.IsUserMarkedSpam,
			&i.Token.IsProviderMarkedSpamDeprecated,
			&i.Token.LastSynced,
			&i.Token.FallbackMediaDeprecated,
			&i.Token.TokenMediaIDDeprecated,
			&i.Token.IsCreatorToken,
			&i.Token.IsHolderToken,
			&i.Token.Displayable,
			&i.Token.TokenDefinitionID,
			&i.TokenMedia.ID,
			&i.TokenMedia.CreatedAt,
			&i.TokenMedia.LastUpdated,
			&i.TokenMedia.Version,
			&i.TokenMedia.ContractIDDeprecated,
			&i.TokenMedia.TokenIDDeprecated,
			&i.TokenMedia.ChainDeprecated,
			&i.TokenMedia.Active,
			&i.TokenMedia.MetadataDeprecated,
			&i.TokenMedia.Media,
			&i.TokenMedia.NameDeprecated,
			&i.TokenMedia.DescriptionDeprecated,
			&i.TokenMedia.ProcessingJobID,
			&i.TokenMedia.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokenBackfillExcess = `-- name: GetTokenBackfillExcess :many
select id
from tokens
where id >= $1
`

func (q *Queries) GetTokenBackfillExcess(ctx context.Context, excessID persist.DBID) ([]persist.DBID, error) {
	rows, err := q.db.Query(ctx, getTokenBackfillExcess, excessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []persist.DBID
	for rows.Next() {
		var id persist.DBID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
