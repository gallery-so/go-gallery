// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package coredb

import (
	"context"
	"database/sql"
	"time"

	"github.com/mikeydub/go-gallery/service/persist"
)

const clearNotificationsForUser = `-- name: ClearNotificationsForUser :many
UPDATE notifications SET seen = true WHERE owner_id = $1 AND seen = false RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount
`

func (q *Queries) ClearNotificationsForUser(ctx context.Context, ownerID persist.DBID) ([]Notification, error) {
	rows, err := q.db.Query(ctx, clearNotificationsForUser, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerID,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Action,
			&i.Data,
			&i.EventIds,
			&i.FeedEventID,
			&i.CommentID,
			&i.GalleryID,
			&i.Seen,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countOwnersByContractId = `-- name: CountOwnersByContractId :one
SELECT count(DISTINCT users.id) FROM users, tokens
    WHERE tokens.contract = $1 AND tokens.owner_user_id = users.id
    AND tokens.deleted = false AND users.deleted = false
`

func (q *Queries) CountOwnersByContractId(ctx context.Context, contract persist.DBID) (int64, error) {
	row := q.db.QueryRow(ctx, countOwnersByContractId, contract)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTokensByContractId = `-- name: CountTokensByContractId :one
SELECT count(*) FROM tokens WHERE contract = $1 AND deleted = false
`

func (q *Queries) CountTokensByContractId(ctx context.Context, contract persist.DBID) (int64, error) {
	row := q.db.QueryRow(ctx, countTokensByContractId, contract)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserNotifications = `-- name: CountUserNotifications :one
SELECT count(*) FROM notifications WHERE owner_id = $1 AND deleted = false
`

func (q *Queries) CountUserNotifications(ctx context.Context, ownerID persist.DBID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserNotifications, ownerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAdmireEvent = `-- name: CreateAdmireEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, admire_id, feed_event_id, subject_id, data) VALUES ($1, $2, $3, $4, $5, $6, $5, $7) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id
`

type CreateAdmireEventParams struct {
	ID             persist.DBID
	ActorID        persist.DBID
	Action         persist.Action
	ResourceTypeID persist.ResourceType
	AdmireID       persist.DBID
	FeedEventID    persist.DBID
	Data           persist.EventData
}

func (q *Queries) CreateAdmireEvent(ctx context.Context, arg CreateAdmireEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createAdmireEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.AdmireID,
		arg.FeedEventID,
		arg.Data,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
	)
	return i, err
}

const createAdmireNotification = `-- name: CreateAdmireNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids, feed_event_id) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount
`

type CreateAdmireNotificationParams struct {
	ID          persist.DBID
	OwnerID     persist.DBID
	Action      persist.Action
	Data        persist.NotificationData
	EventIds    persist.DBIDList
	FeedEventID persist.DBID
}

func (q *Queries) CreateAdmireNotification(ctx context.Context, arg CreateAdmireNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createAdmireNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
		arg.FeedEventID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
	)
	return i, err
}

const createCollectionEvent = `-- name: CreateCollectionEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, collection_id, subject_id, data) VALUES ($1, $2, $3, $4, $5, $5, $6) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id
`

type CreateCollectionEventParams struct {
	ID             persist.DBID
	ActorID        persist.DBID
	Action         persist.Action
	ResourceTypeID persist.ResourceType
	CollectionID   persist.DBID
	Data           persist.EventData
}

func (q *Queries) CreateCollectionEvent(ctx context.Context, arg CreateCollectionEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createCollectionEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.CollectionID,
		arg.Data,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
	)
	return i, err
}

const createCommentEvent = `-- name: CreateCommentEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, comment_id, feed_event_id, subject_id, data) VALUES ($1, $2, $3, $4, $5, $6, $5, $7) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id
`

type CreateCommentEventParams struct {
	ID             persist.DBID
	ActorID        persist.DBID
	Action         persist.Action
	ResourceTypeID persist.ResourceType
	CommentID      persist.DBID
	FeedEventID    persist.DBID
	Data           persist.EventData
}

func (q *Queries) CreateCommentEvent(ctx context.Context, arg CreateCommentEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createCommentEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.CommentID,
		arg.FeedEventID,
		arg.Data,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
	)
	return i, err
}

const createCommentNotification = `-- name: CreateCommentNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids, feed_event_id, comment_id) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount
`

type CreateCommentNotificationParams struct {
	ID          persist.DBID
	OwnerID     persist.DBID
	Action      persist.Action
	Data        persist.NotificationData
	EventIds    persist.DBIDList
	FeedEventID persist.DBID
	CommentID   persist.DBID
}

func (q *Queries) CreateCommentNotification(ctx context.Context, arg CreateCommentNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createCommentNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
		arg.FeedEventID,
		arg.CommentID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
	)
	return i, err
}

const createFeedEvent = `-- name: CreateFeedEvent :one
INSERT INTO feed_events (id, owner_id, action, data, event_time, event_ids) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at
`

type CreateFeedEventParams struct {
	ID        persist.DBID
	OwnerID   persist.DBID
	Action    persist.Action
	Data      persist.FeedEventData
	EventTime time.Time
	EventIds  persist.DBIDList
}

func (q *Queries) CreateFeedEvent(ctx context.Context, arg CreateFeedEventParams) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, createFeedEvent,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventTime,
		arg.EventIds,
	)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
	)
	return i, err
}

const createFeedEventEvent = `-- name: CreateFeedEventEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, feed_event_id, subject_id, data) VALUES ($1, $2, $3, $4, $5, $5, $6) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id
`

type CreateFeedEventEventParams struct {
	ID             persist.DBID
	ActorID        persist.DBID
	Action         persist.Action
	ResourceTypeID persist.ResourceType
	FeedEventID    persist.DBID
	Data           persist.EventData
}

func (q *Queries) CreateFeedEventEvent(ctx context.Context, arg CreateFeedEventEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createFeedEventEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.FeedEventID,
		arg.Data,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
	)
	return i, err
}

const createFollowNotification = `-- name: CreateFollowNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids) VALUES ($1, $2, $3, $4, $5) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount
`

type CreateFollowNotificationParams struct {
	ID       persist.DBID
	OwnerID  persist.DBID
	Action   persist.Action
	Data     persist.NotificationData
	EventIds persist.DBIDList
}

func (q *Queries) CreateFollowNotification(ctx context.Context, arg CreateFollowNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createFollowNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
	)
	return i, err
}

const createGalleryEvent = `-- name: CreateGalleryEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, gallery_id, subject_id, data) VALUES ($1, $2, $3, $4, $5, $5, $6) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id
`

type CreateGalleryEventParams struct {
	ID             persist.DBID
	ActorID        persist.DBID
	Action         persist.Action
	ResourceTypeID persist.ResourceType
	GalleryID      persist.DBID
	Data           persist.EventData
}

func (q *Queries) CreateGalleryEvent(ctx context.Context, arg CreateGalleryEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createGalleryEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.GalleryID,
		arg.Data,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
	)
	return i, err
}

const createTokenEvent = `-- name: CreateTokenEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, token_id, subject_id, data) VALUES ($1, $2, $3, $4, $5, $5, $6) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id
`

type CreateTokenEventParams struct {
	ID             persist.DBID
	ActorID        persist.DBID
	Action         persist.Action
	ResourceTypeID persist.ResourceType
	TokenID        persist.DBID
	Data           persist.EventData
}

func (q *Queries) CreateTokenEvent(ctx context.Context, arg CreateTokenEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createTokenEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.TokenID,
		arg.Data,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
	)
	return i, err
}

const createUserEvent = `-- name: CreateUserEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, user_id, subject_id, data) VALUES ($1, $2, $3, $4, $5, $5, $6) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id
`

type CreateUserEventParams struct {
	ID             persist.DBID
	ActorID        persist.DBID
	Action         persist.Action
	ResourceTypeID persist.ResourceType
	UserID         persist.DBID
	Data           persist.EventData
}

func (q *Queries) CreateUserEvent(ctx context.Context, arg CreateUserEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createUserEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.UserID,
		arg.Data,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
	)
	return i, err
}

const createViewGalleryNotification = `-- name: CreateViewGalleryNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids, gallery_id) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount
`

type CreateViewGalleryNotificationParams struct {
	ID        persist.DBID
	OwnerID   persist.DBID
	Action    persist.Action
	Data      persist.NotificationData
	EventIds  persist.DBIDList
	GalleryID persist.DBID
}

func (q *Queries) CreateViewGalleryNotification(ctx context.Context, arg CreateViewGalleryNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createViewGalleryNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
		arg.GalleryID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
	)
	return i, err
}

const geetFeedEventByID = `-- name: GeetFeedEventByID :one
SELECT id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at FROM feed_events WHERE id = $1 AND deleted = false
`

func (q *Queries) GeetFeedEventByID(ctx context.Context, id persist.DBID) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, geetFeedEventByID, id)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
	)
	return i, err
}

const getAdmireByAdmireID = `-- name: GetAdmireByAdmireID :one
SELECT id, version, feed_event_id, actor_id, deleted, created_at, last_updated FROM admires WHERE id = $1 AND deleted = false
`

func (q *Queries) GetAdmireByAdmireID(ctx context.Context, id persist.DBID) (Admire, error) {
	row := q.db.QueryRow(ctx, getAdmireByAdmireID, id)
	var i Admire
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.FeedEventID,
		&i.ActorID,
		&i.Deleted,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getAdmiresByActorID = `-- name: GetAdmiresByActorID :many
SELECT id, version, feed_event_id, actor_id, deleted, created_at, last_updated FROM admires WHERE actor_id = $1 AND deleted = false ORDER BY created_at DESC
`

func (q *Queries) GetAdmiresByActorID(ctx context.Context, actorID persist.DBID) ([]Admire, error) {
	rows, err := q.db.Query(ctx, getAdmiresByActorID, actorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admire
	for rows.Next() {
		var i Admire
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.FeedEventID,
			&i.ActorID,
			&i.Deleted,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAdmiresByAdmireIDs = `-- name: GetAdmiresByAdmireIDs :many
SELECT id, version, feed_event_id, actor_id, deleted, created_at, last_updated from admires WHERE id = ANY($1) AND deleted = false
`

func (q *Queries) GetAdmiresByAdmireIDs(ctx context.Context, admireIds persist.DBIDList) ([]Admire, error) {
	rows, err := q.db.Query(ctx, getAdmiresByAdmireIDs, admireIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admire
	for rows.Next() {
		var i Admire
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.FeedEventID,
			&i.ActorID,
			&i.Deleted,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionById = `-- name: GetCollectionById :one
SELECT id, deleted, owner_user_id, nfts, version, last_updated, created_at, hidden, collectors_note, name, layout, token_settings FROM collections WHERE id = $1 AND deleted = false
`

func (q *Queries) GetCollectionById(ctx context.Context, id persist.DBID) (Collection, error) {
	row := q.db.QueryRow(ctx, getCollectionById, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerUserID,
		&i.Nfts,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Hidden,
		&i.CollectorsNote,
		&i.Name,
		&i.Layout,
		&i.TokenSettings,
	)
	return i, err
}

const getCollectionsByGalleryId = `-- name: GetCollectionsByGalleryId :many
SELECT c.id, c.deleted, c.owner_user_id, c.nfts, c.version, c.last_updated, c.created_at, c.hidden, c.collectors_note, c.name, c.layout, c.token_settings FROM galleries g, unnest(g.collections)
    WITH ORDINALITY AS x(coll_id, coll_ord)
    INNER JOIN collections c ON c.id = x.coll_id
    WHERE g.id = $1 AND g.deleted = false AND c.deleted = false ORDER BY x.coll_ord
`

func (q *Queries) GetCollectionsByGalleryId(ctx context.Context, id persist.DBID) ([]Collection, error) {
	rows, err := q.db.Query(ctx, getCollectionsByGalleryId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerUserID,
			&i.Nfts,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Hidden,
			&i.CollectorsNote,
			&i.Name,
			&i.Layout,
			&i.TokenSettings,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentByCommentID = `-- name: GetCommentByCommentID :one
SELECT id, version, feed_event_id, actor_id, reply_to, comment, deleted, created_at, last_updated FROM comments WHERE id = $1 AND deleted = false
`

func (q *Queries) GetCommentByCommentID(ctx context.Context, id persist.DBID) (Comment, error) {
	row := q.db.QueryRow(ctx, getCommentByCommentID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.FeedEventID,
		&i.ActorID,
		&i.ReplyTo,
		&i.Comment,
		&i.Deleted,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getCommentsByActorID = `-- name: GetCommentsByActorID :many
SELECT id, version, feed_event_id, actor_id, reply_to, comment, deleted, created_at, last_updated FROM comments WHERE actor_id = $1 AND deleted = false ORDER BY created_at DESC
`

func (q *Queries) GetCommentsByActorID(ctx context.Context, actorID persist.DBID) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsByActorID, actorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.FeedEventID,
			&i.ActorID,
			&i.ReplyTo,
			&i.Comment,
			&i.Deleted,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByCommentIDs = `-- name: GetCommentsByCommentIDs :many
SELECT id, version, feed_event_id, actor_id, reply_to, comment, deleted, created_at, last_updated from comments WHERE id = ANY($1) AND deleted = false
`

func (q *Queries) GetCommentsByCommentIDs(ctx context.Context, commentIds persist.DBIDList) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsByCommentIDs, commentIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.FeedEventID,
			&i.ActorID,
			&i.ReplyTo,
			&i.Comment,
			&i.Deleted,
			&i.CreatedAt,
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByFeedEventID = `-- name: GetCommentsByFeedEventID :many
SELECT comments.id, comments.version, feed_event_id, actor_id, reply_to, comment, comments.deleted, comments.created_at, comments.last_updated, f.id, f.version, owner_id, action, data, event_time, event_ids, f.deleted, f.last_updated, f.created_at FROM comments JOIN feed_events f on f.deleted = false AND f.id = $1 WHERE feed_event_id = $1 AND deleted = false ORDER BY created_at DESC
`

type GetCommentsByFeedEventIDRow struct {
	ID            persist.DBID
	Version       int32
	FeedEventID   persist.DBID
	ActorID       persist.DBID
	ReplyTo       persist.DBID
	Comment       string
	Deleted       bool
	CreatedAt     time.Time
	LastUpdated   time.Time
	ID_2          persist.DBID
	Version_2     int32
	OwnerID       persist.DBID
	Action        persist.Action
	Data          persist.FeedEventData
	EventTime     time.Time
	EventIds      persist.DBIDList
	Deleted_2     bool
	LastUpdated_2 time.Time
	CreatedAt_2   time.Time
}

func (q *Queries) GetCommentsByFeedEventID(ctx context.Context, id persist.DBID) ([]GetCommentsByFeedEventIDRow, error) {
	rows, err := q.db.Query(ctx, getCommentsByFeedEventID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByFeedEventIDRow
	for rows.Next() {
		var i GetCommentsByFeedEventIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.FeedEventID,
			&i.ActorID,
			&i.ReplyTo,
			&i.Comment,
			&i.Deleted,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.ID_2,
			&i.Version_2,
			&i.OwnerID,
			&i.Action,
			&i.Data,
			&i.EventTime,
			&i.EventIds,
			&i.Deleted_2,
			&i.LastUpdated_2,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContractByChainAddress = `-- name: GetContractByChainAddress :one
select id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description FROM contracts WHERE address = $1 AND chain = $2 AND deleted = false
`

type GetContractByChainAddressParams struct {
	Address persist.Address
	Chain   sql.NullInt32
}

func (q *Queries) GetContractByChainAddress(ctx context.Context, arg GetContractByChainAddressParams) (Contract, error) {
	row := q.db.QueryRow(ctx, getContractByChainAddress, arg.Address, arg.Chain)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Name,
		&i.Symbol,
		&i.Address,
		&i.CreatorAddress,
		&i.Chain,
		&i.ProfileBannerUrl,
		&i.ProfileImageUrl,
		&i.BadgeUrl,
		&i.Description,
	)
	return i, err
}

const getContractByID = `-- name: GetContractByID :one
select id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description FROM contracts WHERE id = $1 AND deleted = false
`

func (q *Queries) GetContractByID(ctx context.Context, id persist.DBID) (Contract, error) {
	row := q.db.QueryRow(ctx, getContractByID, id)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Name,
		&i.Symbol,
		&i.Address,
		&i.CreatorAddress,
		&i.Chain,
		&i.ProfileBannerUrl,
		&i.ProfileImageUrl,
		&i.BadgeUrl,
		&i.Description,
	)
	return i, err
}

const getContractsByIDs = `-- name: GetContractsByIDs :many
SELECT id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description from contracts WHERE id = ANY($1) AND deleted = false
`

func (q *Queries) GetContractsByIDs(ctx context.Context, contractIds persist.DBIDList) ([]Contract, error) {
	rows, err := q.db.Query(ctx, getContractsByIDs, contractIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContractsByUserID = `-- name: GetContractsByUserID :many
SELECT DISTINCT ON (contracts.id) contracts.id, contracts.deleted, contracts.version, contracts.created_at, contracts.last_updated, contracts.name, contracts.symbol, contracts.address, contracts.creator_address, contracts.chain, contracts.profile_banner_url, contracts.profile_image_url, contracts.badge_url, contracts.description FROM contracts, tokens
    WHERE tokens.owner_user_id = $1 AND tokens.contract = contracts.id
    AND tokens.deleted = false AND contracts.deleted = false
`

func (q *Queries) GetContractsByUserID(ctx context.Context, ownerUserID persist.DBID) ([]Contract, error) {
	rows, err := q.db.Query(ctx, getContractsByUserID, ownerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvent = `-- name: GetEvent :one
SELECT id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id FROM events WHERE id = $1 AND deleted = false
`

func (q *Queries) GetEvent(ctx context.Context, id persist.DBID) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
	)
	return i, err
}

const getEventsInWindow = `-- name: GetEventsInWindow :many
WITH RECURSIVE activity AS (
    SELECT id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id FROM events WHERE events.id = $1 AND deleted = false
    UNION
    SELECT e.id, e.version, e.actor_id, e.resource_type_id, e.subject_id, e.user_id, e.token_id, e.collection_id, e.action, e.data, e.deleted, e.last_updated, e.created_at, e.gallery_id, e.comment_id, e.admire_id, e.feed_event_id, e.external_id FROM events e, activity a
    WHERE e.actor_id = a.actor_id
        AND e.action = a.action
        AND e.created_at < a.created_at
        AND e.created_at >= a.created_at - make_interval(secs => $2)
        AND e.deleted = false
)
SELECT id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id FROM events WHERE id = ANY(SELECT id FROM activity) ORDER BY created_at DESC
`

type GetEventsInWindowParams struct {
	ID   persist.DBID
	Secs float64
}

func (q *Queries) GetEventsInWindow(ctx context.Context, arg GetEventsInWindowParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsInWindow, arg.ID, arg.Secs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.ActorID,
			&i.ResourceTypeID,
			&i.SubjectID,
			&i.UserID,
			&i.TokenID,
			&i.CollectionID,
			&i.Action,
			&i.Data,
			&i.Deleted,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.GalleryID,
			&i.CommentID,
			&i.AdmireID,
			&i.FeedEventID,
			&i.ExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGalleriesByUserId = `-- name: GetGalleriesByUserId :many
SELECT id, deleted, last_updated, created_at, version, owner_user_id, collections FROM galleries WHERE owner_user_id = $1 AND deleted = false
`

func (q *Queries) GetGalleriesByUserId(ctx context.Context, ownerUserID persist.DBID) ([]Gallery, error) {
	rows, err := q.db.Query(ctx, getGalleriesByUserId, ownerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gallery
	for rows.Next() {
		var i Gallery
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Version,
			&i.OwnerUserID,
			&i.Collections,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGalleryByCollectionId = `-- name: GetGalleryByCollectionId :one
SELECT g.id, g.deleted, g.last_updated, g.created_at, g.version, g.owner_user_id, g.collections FROM galleries g, collections c WHERE c.id = $1 AND c.deleted = false AND $1 = ANY(g.collections) AND g.deleted = false
`

func (q *Queries) GetGalleryByCollectionId(ctx context.Context, id persist.DBID) (Gallery, error) {
	row := q.db.QueryRow(ctx, getGalleryByCollectionId, id)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Version,
		&i.OwnerUserID,
		&i.Collections,
	)
	return i, err
}

const getGalleryById = `-- name: GetGalleryById :one
SELECT id, deleted, last_updated, created_at, version, owner_user_id, collections FROM galleries WHERE id = $1 AND deleted = false
`

func (q *Queries) GetGalleryById(ctx context.Context, id persist.DBID) (Gallery, error) {
	row := q.db.QueryRow(ctx, getGalleryById, id)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Version,
		&i.OwnerUserID,
		&i.Collections,
	)
	return i, err
}

const getLastFeedEvent = `-- name: GetLastFeedEvent :one
SELECT id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at FROM feed_events
    WHERE owner_id = $1 AND action = $2 AND event_time < $3 AND deleted = false
    ORDER BY event_time DESC
    LIMIT 1
`

type GetLastFeedEventParams struct {
	OwnerID   persist.DBID
	Action    persist.Action
	EventTime time.Time
}

func (q *Queries) GetLastFeedEvent(ctx context.Context, arg GetLastFeedEventParams) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, getLastFeedEvent, arg.OwnerID, arg.Action, arg.EventTime)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
	)
	return i, err
}

const getLastFeedEventForCollection = `-- name: GetLastFeedEventForCollection :one
SELECT id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at FROM feed_events
    WHERE owner_id = $1 and action = $2 AND data ->> 'collection_id' = $4::varchar AND event_time < $3 AND deleted = false
    ORDER BY event_time DESC
    LIMIT 1
`

type GetLastFeedEventForCollectionParams struct {
	OwnerID      persist.DBID
	Action       persist.Action
	EventTime    time.Time
	CollectionID string
}

func (q *Queries) GetLastFeedEventForCollection(ctx context.Context, arg GetLastFeedEventForCollectionParams) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, getLastFeedEventForCollection,
		arg.OwnerID,
		arg.Action,
		arg.EventTime,
		arg.CollectionID,
	)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
	)
	return i, err
}

const getLastFeedEventForToken = `-- name: GetLastFeedEventForToken :one
SELECT id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at FROM feed_events
    WHERE owner_id = $1 and action = $2 AND data ->> 'token_id' = $4::varchar AND event_time < $3 AND deleted = false
    ORDER BY event_time DESC
    LIMIT 1
`

type GetLastFeedEventForTokenParams struct {
	OwnerID   persist.DBID
	Action    persist.Action
	EventTime time.Time
	TokenID   string
}

func (q *Queries) GetLastFeedEventForToken(ctx context.Context, arg GetLastFeedEventForTokenParams) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, getLastFeedEventForToken,
		arg.OwnerID,
		arg.Action,
		arg.EventTime,
		arg.TokenID,
	)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
	)
	return i, err
}

const getMembershipByMembershipId = `-- name: GetMembershipByMembershipId :one
SELECT id, deleted, version, created_at, last_updated, token_id, name, asset_url, owners FROM membership WHERE id = $1 AND deleted = false
`

func (q *Queries) GetMembershipByMembershipId(ctx context.Context, id persist.DBID) (Membership, error) {
	row := q.db.QueryRow(ctx, getMembershipByMembershipId, id)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.TokenID,
		&i.Name,
		&i.AssetUrl,
		&i.Owners,
	)
	return i, err
}

const getMostRecentNotificationByOwnerIDForAction = `-- name: GetMostRecentNotificationByOwnerIDForAction :one
SELECT id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount FROM notifications
    WHERE owner_id = $1 AND action = $2 AND deleted = false
    ORDER BY created_at DESC
    LIMIT 1
`

type GetMostRecentNotificationByOwnerIDForActionParams struct {
	OwnerID persist.DBID
	Action  persist.Action
}

func (q *Queries) GetMostRecentNotificationByOwnerIDForAction(ctx context.Context, arg GetMostRecentNotificationByOwnerIDForActionParams) (Notification, error) {
	row := q.db.QueryRow(ctx, getMostRecentNotificationByOwnerIDForAction, arg.OwnerID, arg.Action)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
	)
	return i, err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount FROM notifications WHERE id = $1 AND deleted = false
`

func (q *Queries) GetNotificationByID(ctx context.Context, id persist.DBID) (Notification, error) {
	row := q.db.QueryRow(ctx, getNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
	)
	return i, err
}

const getNotificationsByOwnerIDForActionAfter = `-- name: GetNotificationsByOwnerIDForActionAfter :many
SELECT id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount FROM notifications
    WHERE owner_id = $1 AND action = $2 AND deleted = false AND created_at > $3
    ORDER BY created_at DESC
`

type GetNotificationsByOwnerIDForActionAfterParams struct {
	OwnerID      persist.DBID
	Action       persist.Action
	CreatedAfter time.Time
}

func (q *Queries) GetNotificationsByOwnerIDForActionAfter(ctx context.Context, arg GetNotificationsByOwnerIDForActionAfterParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByOwnerIDForActionAfter, arg.OwnerID, arg.Action, arg.CreatedAfter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerID,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Action,
			&i.Data,
			&i.EventIds,
			&i.FeedEventID,
			&i.CommentID,
			&i.GalleryID,
			&i.Seen,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnersByContractIdPaginate = `-- name: GetOwnersByContractIdPaginate :many
SELECT DISTINCT ON (users.id) users.id, users.deleted, users.version, users.last_updated, users.created_at, users.username, users.username_idempotent, users.wallets, users.bio, users.traits, users.universal, users.notification_settings FROM users, tokens
    WHERE tokens.contract = $1 AND tokens.owner_user_id = users.id
    AND tokens.deleted = false AND users.deleted = false
    AND (users.universal,users.created_at,users.id) < ($3, $4::timestamptz, $5)
    AND (users.universal,users.created_at,users.id) > ($6, $7::timestamptz, $8)
    ORDER BY CASE WHEN $9::bool THEN (users.universal,users.created_at,users.id) END ASC,
             CASE WHEN NOT $9::bool THEN (users.universal,users.created_at,users.id) END DESC
    LIMIT $2
`

type GetOwnersByContractIdPaginateParams struct {
	Contract           persist.DBID
	Limit              int32
	CurBeforeUniversal bool
	CurBeforeTime      time.Time
	CurBeforeID        persist.DBID
	CurAfterUniversal  bool
	CurAfterTime       time.Time
	CurAfterID         persist.DBID
	PagingForward      bool
}

func (q *Queries) GetOwnersByContractIdPaginate(ctx context.Context, arg GetOwnersByContractIdPaginateParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getOwnersByContractIdPaginate,
		arg.Contract,
		arg.Limit,
		arg.CurBeforeUniversal,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterUniversal,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPreviewURLsByContractIdAndUserId = `-- name: GetPreviewURLsByContractIdAndUserId :many
SELECT MEDIA->>'thumbnail_url'::varchar as thumbnail_url FROM tokens WHERE CONTRACT = $1 AND DELETED = false AND OWNER_USER_ID = $2 AND LENGTH(MEDIA->>'thumbnail_url'::varchar) > 0 ORDER BY ID LIMIT 3
`

type GetPreviewURLsByContractIdAndUserIdParams struct {
	Contract    persist.DBID
	OwnerUserID persist.DBID
}

func (q *Queries) GetPreviewURLsByContractIdAndUserId(ctx context.Context, arg GetPreviewURLsByContractIdAndUserIdParams) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, getPreviewURLsByContractIdAndUserId, arg.Contract, arg.OwnerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var thumbnail_url interface{}
		if err := rows.Scan(&thumbnail_url); err != nil {
			return nil, err
		}
		items = append(items, thumbnail_url)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokenById = `-- name: GetTokenById :one
SELECT id, deleted, version, created_at, last_updated, name, description, collectors_note, media, token_uri, token_type, token_id, quantity, ownership_history, token_metadata, external_url, block_number, owner_user_id, owned_by_wallets, chain, contract, is_user_marked_spam, is_provider_marked_spam FROM tokens WHERE id = $1 AND deleted = false
`

func (q *Queries) GetTokenById(ctx context.Context, id persist.DBID) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenById, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Name,
		&i.Description,
		&i.CollectorsNote,
		&i.Media,
		&i.TokenUri,
		&i.TokenType,
		&i.TokenID,
		&i.Quantity,
		&i.OwnershipHistory,
		&i.TokenMetadata,
		&i.ExternalUrl,
		&i.BlockNumber,
		&i.OwnerUserID,
		&i.OwnedByWallets,
		&i.Chain,
		&i.Contract,
		&i.IsUserMarkedSpam,
		&i.IsProviderMarkedSpam,
	)
	return i, err
}

const getTokenOwnerByID = `-- name: GetTokenOwnerByID :one
SELECT u.id, u.deleted, u.version, u.last_updated, u.created_at, u.username, u.username_idempotent, u.wallets, u.bio, u.traits, u.universal, u.notification_settings FROM tokens t
    JOIN users u ON u.id = t.owner_user_id
    WHERE t.id = $1 AND t.deleted = false AND u.deleted = false
`

func (q *Queries) GetTokenOwnerByID(ctx context.Context, id persist.DBID) (User, error) {
	row := q.db.QueryRow(ctx, getTokenOwnerByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Username,
		&i.UsernameIdempotent,
		&i.Wallets,
		&i.Bio,
		&i.Traits,
		&i.Universal,
		&i.NotificationSettings,
	)
	return i, err
}

const getTokensByCollectionId = `-- name: GetTokensByCollectionId :many
SELECT t.id, t.deleted, t.version, t.created_at, t.last_updated, t.name, t.description, t.collectors_note, t.media, t.token_uri, t.token_type, t.token_id, t.quantity, t.ownership_history, t.token_metadata, t.external_url, t.block_number, t.owner_user_id, t.owned_by_wallets, t.chain, t.contract, t.is_user_marked_spam, t.is_provider_marked_spam FROM users u, collections c, unnest(c.nfts)
    WITH ORDINALITY AS x(nft_id, nft_ord)
    INNER JOIN tokens t ON t.id = x.nft_id
    WHERE u.id = t.owner_user_id AND t.owned_by_wallets && u.wallets
    AND c.id = $1 AND u.deleted = false AND c.deleted = false AND t.deleted = false ORDER BY x.nft_ord
`

func (q *Queries) GetTokensByCollectionId(ctx context.Context, id persist.DBID) ([]Token, error) {
	rows, err := q.db.Query(ctx, getTokensByCollectionId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Description,
			&i.CollectorsNote,
			&i.Media,
			&i.TokenUri,
			&i.TokenType,
			&i.TokenID,
			&i.Quantity,
			&i.OwnershipHistory,
			&i.TokenMetadata,
			&i.ExternalUrl,
			&i.BlockNumber,
			&i.OwnerUserID,
			&i.OwnedByWallets,
			&i.Chain,
			&i.Contract,
			&i.IsUserMarkedSpam,
			&i.IsProviderMarkedSpam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokensByContractId = `-- name: GetTokensByContractId :many
SELECT id, deleted, version, created_at, last_updated, name, description, collectors_note, media, token_uri, token_type, token_id, quantity, ownership_history, token_metadata, external_url, block_number, owner_user_id, owned_by_wallets, chain, contract, is_user_marked_spam, is_provider_marked_spam FROM tokens WHERE contract = $1 AND deleted = false
    ORDER BY tokens.created_at DESC, tokens.name DESC, tokens.id DESC
`

func (q *Queries) GetTokensByContractId(ctx context.Context, contract persist.DBID) ([]Token, error) {
	rows, err := q.db.Query(ctx, getTokensByContractId, contract)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Description,
			&i.CollectorsNote,
			&i.Media,
			&i.TokenUri,
			&i.TokenType,
			&i.TokenID,
			&i.Quantity,
			&i.OwnershipHistory,
			&i.TokenMetadata,
			&i.ExternalUrl,
			&i.BlockNumber,
			&i.OwnerUserID,
			&i.OwnedByWallets,
			&i.Chain,
			&i.Contract,
			&i.IsUserMarkedSpam,
			&i.IsProviderMarkedSpam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokensByContractIdPaginate = `-- name: GetTokensByContractIdPaginate :many
SELECT t.id, t.deleted, t.version, t.created_at, t.last_updated, t.name, t.description, t.collectors_note, t.media, t.token_uri, t.token_type, t.token_id, t.quantity, t.ownership_history, t.token_metadata, t.external_url, t.block_number, t.owner_user_id, t.owned_by_wallets, t.chain, t.contract, t.is_user_marked_spam, t.is_provider_marked_spam FROM tokens t
    JOIN users u ON u.id = t.owner_user_id
    WHERE t.contract = $1 AND t.deleted = false
    AND (u.universal,t.created_at,t.id) < ($3, $4::timestamptz, $5)
    AND (u.universal,t.created_at,t.id) > ($6, $7::timestamptz, $8)
    ORDER BY CASE WHEN $9::bool THEN (u.universal,t.created_at,t.id) END ASC,
             CASE WHEN NOT $9::bool THEN (u.universal,t.created_at,t.id) END DESC
    LIMIT $2
`

type GetTokensByContractIdPaginateParams struct {
	Contract           persist.DBID
	Limit              int32
	CurBeforeUniversal bool
	CurBeforeTime      time.Time
	CurBeforeID        persist.DBID
	CurAfterUniversal  bool
	CurAfterTime       time.Time
	CurAfterID         persist.DBID
	PagingForward      bool
}

func (q *Queries) GetTokensByContractIdPaginate(ctx context.Context, arg GetTokensByContractIdPaginateParams) ([]Token, error) {
	rows, err := q.db.Query(ctx, getTokensByContractIdPaginate,
		arg.Contract,
		arg.Limit,
		arg.CurBeforeUniversal,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterUniversal,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Description,
			&i.CollectorsNote,
			&i.Media,
			&i.TokenUri,
			&i.TokenType,
			&i.TokenID,
			&i.Quantity,
			&i.OwnershipHistory,
			&i.TokenMetadata,
			&i.ExternalUrl,
			&i.BlockNumber,
			&i.OwnerUserID,
			&i.OwnedByWallets,
			&i.Chain,
			&i.Contract,
			&i.IsUserMarkedSpam,
			&i.IsProviderMarkedSpam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokensByUserId = `-- name: GetTokensByUserId :many
SELECT tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name, tokens.description, tokens.collectors_note, tokens.media, tokens.token_uri, tokens.token_type, tokens.token_id, tokens.quantity, tokens.ownership_history, tokens.token_metadata, tokens.external_url, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain, tokens.contract, tokens.is_user_marked_spam, tokens.is_provider_marked_spam FROM tokens, users
    WHERE tokens.owner_user_id = $1 AND users.id = $1
      AND tokens.owned_by_wallets && users.wallets
      AND tokens.deleted = false AND users.deleted = false
    ORDER BY tokens.created_at DESC, tokens.name DESC, tokens.id DESC
`

func (q *Queries) GetTokensByUserId(ctx context.Context, ownerUserID persist.DBID) ([]Token, error) {
	rows, err := q.db.Query(ctx, getTokensByUserId, ownerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Description,
			&i.CollectorsNote,
			&i.Media,
			&i.TokenUri,
			&i.TokenType,
			&i.TokenID,
			&i.Quantity,
			&i.OwnershipHistory,
			&i.TokenMetadata,
			&i.ExternalUrl,
			&i.BlockNumber,
			&i.OwnerUserID,
			&i.OwnedByWallets,
			&i.Chain,
			&i.Contract,
			&i.IsUserMarkedSpam,
			&i.IsProviderMarkedSpam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokensByUserIdAndContractID = `-- name: GetTokensByUserIdAndContractID :many
SELECT tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name, tokens.description, tokens.collectors_note, tokens.media, tokens.token_uri, tokens.token_type, tokens.token_id, tokens.quantity, tokens.ownership_history, tokens.token_metadata, tokens.external_url, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain, tokens.contract, tokens.is_user_marked_spam, tokens.is_provider_marked_spam FROM tokens, users
    WHERE tokens.owner_user_id = $1 AND users.id = $1
      AND tokens.owned_by_wallets && users.wallets
      AND tokens.contract = $2
      AND tokens.deleted = false AND users.deleted = false
    ORDER BY tokens.created_at DESC, tokens.name DESC, tokens.id DESC
`

type GetTokensByUserIdAndContractIDParams struct {
	OwnerUserID persist.DBID
	Contract    persist.DBID
}

func (q *Queries) GetTokensByUserIdAndContractID(ctx context.Context, arg GetTokensByUserIdAndContractIDParams) ([]Token, error) {
	rows, err := q.db.Query(ctx, getTokensByUserIdAndContractID, arg.OwnerUserID, arg.Contract)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Description,
			&i.CollectorsNote,
			&i.Media,
			&i.TokenUri,
			&i.TokenType,
			&i.TokenID,
			&i.Quantity,
			&i.OwnershipHistory,
			&i.TokenMetadata,
			&i.ExternalUrl,
			&i.BlockNumber,
			&i.OwnerUserID,
			&i.OwnedByWallets,
			&i.Chain,
			&i.Contract,
			&i.IsUserMarkedSpam,
			&i.IsProviderMarkedSpam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokensByWalletIds = `-- name: GetTokensByWalletIds :many
SELECT id, deleted, version, created_at, last_updated, name, description, collectors_note, media, token_uri, token_type, token_id, quantity, ownership_history, token_metadata, external_url, block_number, owner_user_id, owned_by_wallets, chain, contract, is_user_marked_spam, is_provider_marked_spam FROM tokens WHERE owned_by_wallets && $1 AND deleted = false
    ORDER BY tokens.created_at DESC, tokens.name DESC, tokens.id DESC
`

func (q *Queries) GetTokensByWalletIds(ctx context.Context, ownedByWallets persist.DBIDList) ([]Token, error) {
	rows, err := q.db.Query(ctx, getTokensByWalletIds, ownedByWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Description,
			&i.CollectorsNote,
			&i.Media,
			&i.TokenUri,
			&i.TokenType,
			&i.TokenID,
			&i.Quantity,
			&i.OwnershipHistory,
			&i.TokenMetadata,
			&i.ExternalUrl,
			&i.BlockNumber,
			&i.OwnerUserID,
			&i.OwnedByWallets,
			&i.Chain,
			&i.Contract,
			&i.IsUserMarkedSpam,
			&i.IsProviderMarkedSpam,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings FROM users WHERE id = $1 AND deleted = false
`

func (q *Queries) GetUserById(ctx context.Context, id persist.DBID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Username,
		&i.UsernameIdempotent,
		&i.Wallets,
		&i.Bio,
		&i.Traits,
		&i.Universal,
		&i.NotificationSettings,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings FROM users WHERE username_idempotent = lower($1) AND deleted = false
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Username,
		&i.UsernameIdempotent,
		&i.Wallets,
		&i.Bio,
		&i.Traits,
		&i.Universal,
		&i.NotificationSettings,
	)
	return i, err
}

const getUserNotifications = `-- name: GetUserNotifications :many
SELECT id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount FROM notifications WHERE owner_id = $1 AND deleted = false
    AND (created_at, id) < ($3, $4)
    AND (created_at, id) > ($5, $6)
    ORDER BY CASE WHEN $7::bool THEN (created_at, id) END ASC,
             CASE WHEN NOT $7::bool THEN (created_at, id) END DESC
    LIMIT $2
`

type GetUserNotificationsParams struct {
	OwnerID       persist.DBID
	Limit         int32
	CurBeforeTime time.Time
	CurBeforeID   persist.DBID
	CurAfterTime  time.Time
	CurAfterID    persist.DBID
	PagingForward bool
}

func (q *Queries) GetUserNotifications(ctx context.Context, arg GetUserNotificationsParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getUserNotifications,
		arg.OwnerID,
		arg.Limit,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerID,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Action,
			&i.Data,
			&i.EventIds,
			&i.FeedEventID,
			&i.CommentID,
			&i.GalleryID,
			&i.Seen,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByIDs = `-- name: GetUsersByIDs :many
SELECT id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings FROM users WHERE id = ANY($2) AND deleted = false
    AND (created_at, id) < ($3, $4)
    AND (created_at, id) > ($5, $6)
    ORDER BY CASE WHEN $7::bool THEN (created_at, id) END ASC,
             CASE WHEN NOT $7::bool THEN (created_at, id) END DESC
    LIMIT $1
`

type GetUsersByIDsParams struct {
	Limit         int32
	UserIds       persist.DBIDList
	CurBeforeTime time.Time
	CurBeforeID   persist.DBID
	CurAfterTime  time.Time
	CurAfterID    persist.DBID
	PagingForward bool
}

func (q *Queries) GetUsersByIDs(ctx context.Context, arg GetUsersByIDsParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByIDs,
		arg.Limit,
		arg.UserIds,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithTrait = `-- name: GetUsersWithTrait :many
SELECT id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings FROM users WHERE (traits->$1::string) IS NOT NULL AND deleted = false
`

func (q *Queries) GetUsersWithTrait(ctx context.Context, dollar_1 string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersWithTrait, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWalletByChainAddress = `-- name: GetWalletByChainAddress :one
SELECT wallets.id, wallets.created_at, wallets.last_updated, wallets.deleted, wallets.version, wallets.address, wallets.wallet_type, wallets.chain FROM wallets WHERE address = $1 AND chain = $2 AND deleted = false
`

type GetWalletByChainAddressParams struct {
	Address persist.Address
	Chain   sql.NullInt32
}

func (q *Queries) GetWalletByChainAddress(ctx context.Context, arg GetWalletByChainAddressParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByChainAddress, arg.Address, arg.Chain)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.Version,
		&i.Address,
		&i.WalletType,
		&i.Chain,
	)
	return i, err
}

const getWalletByID = `-- name: GetWalletByID :one
SELECT id, created_at, last_updated, deleted, version, address, wallet_type, chain FROM wallets WHERE id = $1 AND deleted = false
`

func (q *Queries) GetWalletByID(ctx context.Context, id persist.DBID) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByID, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.Version,
		&i.Address,
		&i.WalletType,
		&i.Chain,
	)
	return i, err
}

const getWalletsByUserID = `-- name: GetWalletsByUserID :many
SELECT w.id, w.created_at, w.last_updated, w.deleted, w.version, w.address, w.wallet_type, w.chain FROM users u, unnest(u.wallets) WITH ORDINALITY AS a(wallet_id, wallet_ord)INNER JOIN wallets w on w.id = a.wallet_id WHERE u.id = $1 AND u.deleted = false AND w.deleted = false ORDER BY a.wallet_ord
`

func (q *Queries) GetWalletsByUserID(ctx context.Context, id persist.DBID) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, getWalletsByUserID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Deleted,
			&i.Version,
			&i.Address,
			&i.WalletType,
			&i.Chain,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isFeedUserActionBlocked = `-- name: IsFeedUserActionBlocked :one
SELECT EXISTS(SELECT 1 FROM feed_blocklist WHERE user_id = $1 AND action = $2 AND deleted = false)
`

type IsFeedUserActionBlockedParams struct {
	UserID persist.DBID
	Action persist.Action
}

func (q *Queries) IsFeedUserActionBlocked(ctx context.Context, arg IsFeedUserActionBlockedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isFeedUserActionBlocked, arg.UserID, arg.Action)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isWindowActive = `-- name: IsWindowActive :one
SELECT EXISTS(
    SELECT 1 FROM events
    WHERE actor_id = $1 AND action = $2 AND deleted = false
    AND created_at > $3 AND created_at <= $4
    LIMIT 1
)
`

type IsWindowActiveParams struct {
	ActorID     persist.DBID
	Action      persist.Action
	WindowStart time.Time
	WindowEnd   time.Time
}

func (q *Queries) IsWindowActive(ctx context.Context, arg IsWindowActiveParams) (bool, error) {
	row := q.db.QueryRow(ctx, isWindowActive,
		arg.ActorID,
		arg.Action,
		arg.WindowStart,
		arg.WindowEnd,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isWindowActiveWithSubject = `-- name: IsWindowActiveWithSubject :one
SELECT EXISTS(
    SELECT 1 FROM events
    WHERE actor_id = $1 AND action = $2 AND subject_id = $3 AND deleted = false
    AND created_at > $4 AND created_at <= $5
    LIMIT 1
)
`

type IsWindowActiveWithSubjectParams struct {
	ActorID     persist.DBID
	Action      persist.Action
	SubjectID   persist.DBID
	WindowStart time.Time
	WindowEnd   time.Time
}

func (q *Queries) IsWindowActiveWithSubject(ctx context.Context, arg IsWindowActiveWithSubjectParams) (bool, error) {
	row := q.db.QueryRow(ctx, isWindowActiveWithSubject,
		arg.ActorID,
		arg.Action,
		arg.SubjectID,
		arg.WindowStart,
		arg.WindowEnd,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateNotification = `-- name: UpdateNotification :exec
UPDATE notifications SET data = $2, event_ids = event_ids || $3, amount = amount + $4, last_updated = now() WHERE id = $1
`

type UpdateNotificationParams struct {
	ID       persist.DBID
	Data     persist.NotificationData
	EventIds persist.DBIDList
	Amount   int32
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) error {
	_, err := q.db.Exec(ctx, updateNotification,
		arg.ID,
		arg.Data,
		arg.EventIds,
		arg.Amount,
	)
	return err
}

const updateNotificationSettingsByID = `-- name: UpdateNotificationSettingsByID :exec
UPDATE users SET notification_settings = $2 WHERE id = $1
`

type UpdateNotificationSettingsByIDParams struct {
	ID                   persist.DBID
	NotificationSettings persist.UserNotificationSettings
}

func (q *Queries) UpdateNotificationSettingsByID(ctx context.Context, arg UpdateNotificationSettingsByIDParams) error {
	_, err := q.db.Exec(ctx, updateNotificationSettingsByID, arg.ID, arg.NotificationSettings)
	return err
}
