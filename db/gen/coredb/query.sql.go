// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package coredb

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgtype"
	"github.com/mikeydub/go-gallery/service/persist"
)

const addCollectionToGallery = `-- name: AddCollectionToGallery :exec
update galleries set collections = array_append(collections, $1), last_updated = now() where id = $2 and deleted = false
`

type AddCollectionToGalleryParams struct {
	CollectionID interface{}  `json:"collection_id"`
	GalleryID    persist.DBID `json:"gallery_id"`
}

func (q *Queries) AddCollectionToGallery(ctx context.Context, arg AddCollectionToGalleryParams) error {
	_, err := q.db.Exec(ctx, addCollectionToGallery, arg.CollectionID, arg.GalleryID)
	return err
}

const addManyFollows = `-- name: AddManyFollows :exec
insert into follows (id, follower, followee, deleted) select unnest($1::varchar[]), $2, unnest($3::varchar[]), false on conflict (follower, followee) where deleted = false do update set deleted = false, last_updated = now() returning last_updated > created_at
`

type AddManyFollowsParams struct {
	Ids       []string     `json:"ids"`
	Follower  persist.DBID `json:"follower"`
	Followees []string     `json:"followees"`
}

func (q *Queries) AddManyFollows(ctx context.Context, arg AddManyFollowsParams) error {
	_, err := q.db.Exec(ctx, addManyFollows, arg.Ids, arg.Follower, arg.Followees)
	return err
}

const addPiiAccountCreationInfo = `-- name: AddPiiAccountCreationInfo :exec
insert into pii.account_creation_info (user_id, ip_address, created_at) values ($1, $2, now())
  on conflict do nothing
`

type AddPiiAccountCreationInfoParams struct {
	UserID    persist.DBID `json:"user_id"`
	IpAddress string       `json:"ip_address"`
}

func (q *Queries) AddPiiAccountCreationInfo(ctx context.Context, arg AddPiiAccountCreationInfoParams) error {
	_, err := q.db.Exec(ctx, addPiiAccountCreationInfo, arg.UserID, arg.IpAddress)
	return err
}

const addSocialToUser = `-- name: AddSocialToUser :exec
insert into pii.for_users (user_id, pii_socials) values ($1, $2) on conflict (user_id) where deleted = false do update set pii_socials = for_users.pii_socials || $2
`

type AddSocialToUserParams struct {
	UserID  persist.DBID    `json:"user_id"`
	Socials persist.Socials `json:"socials"`
}

func (q *Queries) AddSocialToUser(ctx context.Context, arg AddSocialToUserParams) error {
	_, err := q.db.Exec(ctx, addSocialToUser, arg.UserID, arg.Socials)
	return err
}

const addUserRoles = `-- name: AddUserRoles :exec
insert into user_roles (id, user_id, role, created_at, last_updated)
select unnest($2::varchar[]), $1, unnest($3::varchar[]), now(), now()
on conflict (user_id, role) do update set deleted = false, last_updated = now()
`

type AddUserRolesParams struct {
	UserID persist.DBID `json:"user_id"`
	Ids    []string     `json:"ids"`
	Roles  []string     `json:"roles"`
}

func (q *Queries) AddUserRoles(ctx context.Context, arg AddUserRolesParams) error {
	_, err := q.db.Exec(ctx, addUserRoles, arg.UserID, arg.Ids, arg.Roles)
	return err
}

const blockUserFromFeed = `-- name: BlockUserFromFeed :exec
INSERT INTO feed_blocklist (id, user_id, action) VALUES ($1, $2, $3)
`

type BlockUserFromFeedParams struct {
	ID     persist.DBID   `json:"id"`
	UserID persist.DBID   `json:"user_id"`
	Action persist.Action `json:"action"`
}

func (q *Queries) BlockUserFromFeed(ctx context.Context, arg BlockUserFromFeedParams) error {
	_, err := q.db.Exec(ctx, blockUserFromFeed, arg.ID, arg.UserID, arg.Action)
	return err
}

const checkUserOwnsAllTokenDbids = `-- name: CheckUserOwnsAllTokenDbids :one
with user_tokens as (select count(*) total from tokens where id = any($2) and owner_user_id = $1 and not tokens.deleted), total_tokens as (select cardinality($2) total)
select (select total from total_tokens) = (select total from user_tokens) owns_all
`

type CheckUserOwnsAllTokenDbidsParams struct {
	OwnerUserID persist.DBID     `json:"owner_user_id"`
	TokenIds    persist.DBIDList `json:"token_ids"`
}

func (q *Queries) CheckUserOwnsAllTokenDbids(ctx context.Context, arg CheckUserOwnsAllTokenDbidsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserOwnsAllTokenDbids, arg.OwnerUserID, arg.TokenIds)
	var owns_all bool
	err := row.Scan(&owns_all)
	return owns_all, err
}

const clearNotificationsForUser = `-- name: ClearNotificationsForUser :many
UPDATE notifications SET seen = true WHERE owner_id = $1 AND seen = false RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id
`

func (q *Queries) ClearNotificationsForUser(ctx context.Context, ownerID persist.DBID) ([]Notification, error) {
	rows, err := q.db.Query(ctx, clearNotificationsForUser, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerID,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Action,
			&i.Data,
			&i.EventIds,
			&i.FeedEventID,
			&i.CommentID,
			&i.GalleryID,
			&i.Seen,
			&i.Amount,
			&i.PostID,
			&i.TokenID,
			&i.ContractID,
			&i.MentionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countOwnersByContractId = `-- name: CountOwnersByContractId :one
select count(distinct users.id) from users, tokens, contracts
    where (contracts.id = $1 or contracts.parent_id = $1)
    and tokens.contract = contracts.id
    and tokens.owner_user_id = users.id
    and tokens.displayable
    and (not $2::bool or users.universal = false)
    and tokens.deleted = false and users.deleted = false and contracts.deleted = false
`

type CountOwnersByContractIdParams struct {
	ID               persist.DBID `json:"id"`
	GalleryUsersOnly bool         `json:"gallery_users_only"`
}

func (q *Queries) CountOwnersByContractId(ctx context.Context, arg CountOwnersByContractIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, countOwnersByContractId, arg.ID, arg.GalleryUsersOnly)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPostsByContractID = `-- name: CountPostsByContractID :one
select count(*)
from posts
where $1 = any(posts.contract_ids)
and posts.deleted = false
`

func (q *Queries) CountPostsByContractID(ctx context.Context, contractID persist.DBID) (int64, error) {
	row := q.db.QueryRow(ctx, countPostsByContractID, contractID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPostsByUserID = `-- name: CountPostsByUserID :one
select count(*) from posts where actor_id = $1 and not posts.deleted
`

func (q *Queries) CountPostsByUserID(ctx context.Context, actorID persist.DBID) (int64, error) {
	row := q.db.QueryRow(ctx, countPostsByUserID, actorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSharedContracts = `-- name: CountSharedContracts :one
select count(*)
from owned_contracts a, owned_contracts b, contracts
left join marketplace_contracts on contracts.id = marketplace_contracts.contract_id
where a.user_id = $1
  and b.user_id = $2
  and a.contract_id = b.contract_id
  and a.contract_id = contracts.id
  and marketplace_contracts.contract_id is null
  and contracts.name is not null
  and contracts.name != ''
  and contracts.name != 'Unidentified contract'
`

type CountSharedContractsParams struct {
	UserAID persist.DBID `json:"user_a_id"`
	UserBID persist.DBID `json:"user_b_id"`
}

func (q *Queries) CountSharedContracts(ctx context.Context, arg CountSharedContractsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countSharedContracts, arg.UserAID, arg.UserBID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSharedFollows = `-- name: CountSharedFollows :one
select count(*)
from users, follows a, follows b
where a.follower = $1
	and a.followee = b.follower
	and b.followee = $2
	and users.id = b.follower
	and a.deleted = false
	and b.deleted = false
	and users.deleted = false
`

type CountSharedFollowsParams struct {
	Follower persist.DBID `json:"follower"`
	Followee persist.DBID `json:"followee"`
}

func (q *Queries) CountSharedFollows(ctx context.Context, arg CountSharedFollowsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countSharedFollows, arg.Follower, arg.Followee)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSocialConnections = `-- name: CountSocialConnections :one
select count(*)
from (select unnest($1::varchar[]) as social_id) as s
    inner join pii.user_view on user_view.pii_socials->$2::text->>'id'::varchar = s.social_id and user_view.deleted = false
    left outer join follows f on f.follower = $3 and f.followee = user_view.id and f.deleted = false
where case when $4::bool then f.id is null else true end
`

type CountSocialConnectionsParams struct {
	SocialIds       []string     `json:"social_ids"`
	Social          string       `json:"social"`
	UserID          persist.DBID `json:"user_id"`
	OnlyUnfollowing bool         `json:"only_unfollowing"`
}

func (q *Queries) CountSocialConnections(ctx context.Context, arg CountSocialConnectionsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countSocialConnections,
		arg.SocialIds,
		arg.Social,
		arg.UserID,
		arg.OnlyUnfollowing,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTokensByContractId = `-- name: CountTokensByContractId :one
select count(*)
from tokens
join users on users.id = tokens.owner_user_id
join contracts on tokens.contract = contracts.id
where (contracts.id = $1 or contracts.parent_id = $1)
  and (not $2::bool or users.universal = false) and tokens.deleted = false and contracts.deleted = false
  and tokens.displayable
`

type CountTokensByContractIdParams struct {
	ID               persist.DBID `json:"id"`
	GalleryUsersOnly bool         `json:"gallery_users_only"`
}

func (q *Queries) CountTokensByContractId(ctx context.Context, arg CountTokensByContractIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, countTokensByContractId, arg.ID, arg.GalleryUsersOnly)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserNotifications = `-- name: CountUserNotifications :one
SELECT count(*) FROM notifications WHERE owner_id = $1 AND deleted = false
`

func (q *Queries) CountUserNotifications(ctx context.Context, ownerID persist.DBID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserNotifications, ownerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserUnseenNotifications = `-- name: CountUserUnseenNotifications :one
SELECT count(*) FROM notifications WHERE owner_id = $1 AND deleted = false AND seen = false
`

func (q *Queries) CountUserUnseenNotifications(ctx context.Context, ownerID persist.DBID) (int64, error) {
	row := q.db.QueryRow(ctx, countUserUnseenNotifications, ownerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAdmireEvent = `-- name: CreateAdmireEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, admire_id, feed_event_id, post_id, subject_id, data, group_id, caption) VALUES ($1, $2, $3, $4, $5, $10, $11, $6, $7, $8, $9) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id
`

type CreateAdmireEventParams struct {
	ID             persist.DBID         `json:"id"`
	ActorID        sql.NullString       `json:"actor_id"`
	Action         persist.Action       `json:"action"`
	ResourceTypeID persist.ResourceType `json:"resource_type_id"`
	AdmireID       persist.DBID         `json:"admire_id"`
	SubjectID      persist.DBID         `json:"subject_id"`
	Data           persist.EventData    `json:"data"`
	GroupID        sql.NullString       `json:"group_id"`
	Caption        sql.NullString       `json:"caption"`
	FeedEvent      sql.NullString       `json:"feed_event"`
	Post           sql.NullString       `json:"post"`
}

func (q *Queries) CreateAdmireEvent(ctx context.Context, arg CreateAdmireEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createAdmireEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.AdmireID,
		arg.SubjectID,
		arg.Data,
		arg.GroupID,
		arg.Caption,
		arg.FeedEvent,
		arg.Post,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
		&i.Caption,
		&i.GroupID,
		&i.PostID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createAdmireNotification = `-- name: CreateAdmireNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids, feed_event_id, post_id, token_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id
`

type CreateAdmireNotificationParams struct {
	ID        persist.DBID             `json:"id"`
	OwnerID   persist.DBID             `json:"owner_id"`
	Action    persist.Action           `json:"action"`
	Data      persist.NotificationData `json:"data"`
	EventIds  persist.DBIDList         `json:"event_ids"`
	FeedEvent sql.NullString           `json:"feed_event"`
	Post      sql.NullString           `json:"post"`
	Token     sql.NullString           `json:"token"`
}

func (q *Queries) CreateAdmireNotification(ctx context.Context, arg CreateAdmireNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createAdmireNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
		arg.FeedEvent,
		arg.Post,
		arg.Token,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
		&i.PostID,
		&i.TokenID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createCollection = `-- name: CreateCollection :one
insert into collections (id, version, name, collectors_note, owner_user_id, gallery_id, layout, nfts, hidden, token_settings, created_at, last_updated) values ($1, 1, $2, $3, $4, $5, $6, $7, $8, $9, now(), now()) returning id
`

type CreateCollectionParams struct {
	ID             persist.DBID                                     `json:"id"`
	Name           sql.NullString                                   `json:"name"`
	CollectorsNote sql.NullString                                   `json:"collectors_note"`
	OwnerUserID    persist.DBID                                     `json:"owner_user_id"`
	GalleryID      persist.DBID                                     `json:"gallery_id"`
	Layout         persist.TokenLayout                              `json:"layout"`
	Nfts           persist.DBIDList                                 `json:"nfts"`
	Hidden         bool                                             `json:"hidden"`
	TokenSettings  map[persist.DBID]persist.CollectionTokenSettings `json:"token_settings"`
}

func (q *Queries) CreateCollection(ctx context.Context, arg CreateCollectionParams) (persist.DBID, error) {
	row := q.db.QueryRow(ctx, createCollection,
		arg.ID,
		arg.Name,
		arg.CollectorsNote,
		arg.OwnerUserID,
		arg.GalleryID,
		arg.Layout,
		arg.Nfts,
		arg.Hidden,
		arg.TokenSettings,
	)
	var id persist.DBID
	err := row.Scan(&id)
	return id, err
}

const createCollectionEvent = `-- name: CreateCollectionEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, collection_id, subject_id, data, caption, group_id, gallery_id) VALUES ($1, $2, $3, $4, $5, $5, $6, $7, $8, $9) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id
`

type CreateCollectionEventParams struct {
	ID             persist.DBID         `json:"id"`
	ActorID        sql.NullString       `json:"actor_id"`
	Action         persist.Action       `json:"action"`
	ResourceTypeID persist.ResourceType `json:"resource_type_id"`
	CollectionID   persist.DBID         `json:"collection_id"`
	Data           persist.EventData    `json:"data"`
	Caption        sql.NullString       `json:"caption"`
	GroupID        sql.NullString       `json:"group_id"`
	GalleryID      persist.DBID         `json:"gallery_id"`
}

func (q *Queries) CreateCollectionEvent(ctx context.Context, arg CreateCollectionEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createCollectionEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.CollectionID,
		arg.Data,
		arg.Caption,
		arg.GroupID,
		arg.GalleryID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
		&i.Caption,
		&i.GroupID,
		&i.PostID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createCommentEvent = `-- name: CreateCommentEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, comment_id, feed_event_id, post_id, mention_id, subject_id, data, group_id, caption) VALUES ($1, $2, $3, $4, $5, $10, $11, $12, $6, $7, $8, $9) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id
`

type CreateCommentEventParams struct {
	ID             persist.DBID         `json:"id"`
	ActorID        sql.NullString       `json:"actor_id"`
	Action         persist.Action       `json:"action"`
	ResourceTypeID persist.ResourceType `json:"resource_type_id"`
	CommentID      persist.DBID         `json:"comment_id"`
	SubjectID      persist.DBID         `json:"subject_id"`
	Data           persist.EventData    `json:"data"`
	GroupID        sql.NullString       `json:"group_id"`
	Caption        sql.NullString       `json:"caption"`
	FeedEvent      sql.NullString       `json:"feed_event"`
	Post           sql.NullString       `json:"post"`
	Mention        sql.NullString       `json:"mention"`
}

func (q *Queries) CreateCommentEvent(ctx context.Context, arg CreateCommentEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createCommentEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.CommentID,
		arg.SubjectID,
		arg.Data,
		arg.GroupID,
		arg.Caption,
		arg.FeedEvent,
		arg.Post,
		arg.Mention,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
		&i.Caption,
		&i.GroupID,
		&i.PostID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createCommentNotification = `-- name: CreateCommentNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids, feed_event_id, post_id, comment_id) VALUES ($1, $2, $3, $4, $5, $7, $8, $6) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id
`

type CreateCommentNotificationParams struct {
	ID        persist.DBID             `json:"id"`
	OwnerID   persist.DBID             `json:"owner_id"`
	Action    persist.Action           `json:"action"`
	Data      persist.NotificationData `json:"data"`
	EventIds  persist.DBIDList         `json:"event_ids"`
	CommentID persist.DBID             `json:"comment_id"`
	FeedEvent sql.NullString           `json:"feed_event"`
	Post      sql.NullString           `json:"post"`
}

func (q *Queries) CreateCommentNotification(ctx context.Context, arg CreateCommentNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createCommentNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
		arg.CommentID,
		arg.FeedEvent,
		arg.Post,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
		&i.PostID,
		&i.TokenID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createContractEvent = `-- name: CreateContractEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, contract_id, subject_id, post_id, comment_id, feed_event_id, mention_id, data, group_id, caption) VALUES ($1, $2, $3, $4, $5, $5, $9, $10, $11, $12, $6, $7, $8) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id
`

type CreateContractEventParams struct {
	ID             persist.DBID         `json:"id"`
	ActorID        sql.NullString       `json:"actor_id"`
	Action         persist.Action       `json:"action"`
	ResourceTypeID persist.ResourceType `json:"resource_type_id"`
	ContractID     persist.DBID         `json:"contract_id"`
	Data           persist.EventData    `json:"data"`
	GroupID        sql.NullString       `json:"group_id"`
	Caption        sql.NullString       `json:"caption"`
	Post           sql.NullString       `json:"post"`
	Comment        sql.NullString       `json:"comment"`
	FeedEvent      sql.NullString       `json:"feed_event"`
	Mention        sql.NullString       `json:"mention"`
}

func (q *Queries) CreateContractEvent(ctx context.Context, arg CreateContractEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createContractEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.ContractID,
		arg.Data,
		arg.GroupID,
		arg.Caption,
		arg.Post,
		arg.Comment,
		arg.FeedEvent,
		arg.Mention,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
		&i.Caption,
		&i.GroupID,
		&i.PostID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createContractNotification = `-- name: CreateContractNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids, feed_event_id, post_id, comment_id, contract_id, mention_id) VALUES ($1, $2, $3, $4, $5, $8, $9, $10, $6, $7) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id
`

type CreateContractNotificationParams struct {
	ID         persist.DBID             `json:"id"`
	OwnerID    persist.DBID             `json:"owner_id"`
	Action     persist.Action           `json:"action"`
	Data       persist.NotificationData `json:"data"`
	EventIds   persist.DBIDList         `json:"event_ids"`
	ContractID persist.DBID             `json:"contract_id"`
	MentionID  persist.DBID             `json:"mention_id"`
	FeedEvent  sql.NullString           `json:"feed_event"`
	Post       sql.NullString           `json:"post"`
	Comment    sql.NullString           `json:"comment"`
}

func (q *Queries) CreateContractNotification(ctx context.Context, arg CreateContractNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createContractNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
		arg.ContractID,
		arg.MentionID,
		arg.FeedEvent,
		arg.Post,
		arg.Comment,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
		&i.PostID,
		&i.TokenID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createFeedEvent = `-- name: CreateFeedEvent :one
INSERT INTO feed_events (id, owner_id, action, data, event_time, event_ids, group_id, caption) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at, caption, group_id
`

type CreateFeedEventParams struct {
	ID        persist.DBID          `json:"id"`
	OwnerID   persist.DBID          `json:"owner_id"`
	Action    persist.Action        `json:"action"`
	Data      persist.FeedEventData `json:"data"`
	EventTime time.Time             `json:"event_time"`
	EventIds  persist.DBIDList      `json:"event_ids"`
	GroupID   sql.NullString        `json:"group_id"`
	Caption   sql.NullString        `json:"caption"`
}

func (q *Queries) CreateFeedEvent(ctx context.Context, arg CreateFeedEventParams) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, createFeedEvent,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventTime,
		arg.EventIds,
		arg.GroupID,
		arg.Caption,
	)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Caption,
		&i.GroupID,
	)
	return i, err
}

const createGalleryEvent = `-- name: CreateGalleryEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, gallery_id, subject_id, data, external_id, group_id, caption) VALUES ($1, $2, $3, $4, $5, $5, $6, $7, $8, $9) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id
`

type CreateGalleryEventParams struct {
	ID             persist.DBID         `json:"id"`
	ActorID        sql.NullString       `json:"actor_id"`
	Action         persist.Action       `json:"action"`
	ResourceTypeID persist.ResourceType `json:"resource_type_id"`
	GalleryID      persist.DBID         `json:"gallery_id"`
	Data           persist.EventData    `json:"data"`
	ExternalID     sql.NullString       `json:"external_id"`
	GroupID        sql.NullString       `json:"group_id"`
	Caption        sql.NullString       `json:"caption"`
}

func (q *Queries) CreateGalleryEvent(ctx context.Context, arg CreateGalleryEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createGalleryEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.GalleryID,
		arg.Data,
		arg.ExternalID,
		arg.GroupID,
		arg.Caption,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
		&i.Caption,
		&i.GroupID,
		&i.PostID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createMentionUserNotification = `-- name: CreateMentionUserNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids, feed_event_id, post_id, comment_id, mention_id) VALUES ($1, $2, $3, $4, $5, $7, $8, $9, $6) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id
`

type CreateMentionUserNotificationParams struct {
	ID        persist.DBID             `json:"id"`
	OwnerID   persist.DBID             `json:"owner_id"`
	Action    persist.Action           `json:"action"`
	Data      persist.NotificationData `json:"data"`
	EventIds  persist.DBIDList         `json:"event_ids"`
	MentionID persist.DBID             `json:"mention_id"`
	FeedEvent sql.NullString           `json:"feed_event"`
	Post      sql.NullString           `json:"post"`
	Comment   sql.NullString           `json:"comment"`
}

func (q *Queries) CreateMentionUserNotification(ctx context.Context, arg CreateMentionUserNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createMentionUserNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
		arg.MentionID,
		arg.FeedEvent,
		arg.Post,
		arg.Comment,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
		&i.PostID,
		&i.TokenID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createPostEvent = `-- name: CreatePostEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, user_id, subject_id, post_id) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id
`

type CreatePostEventParams struct {
	ID             persist.DBID         `json:"id"`
	ActorID        sql.NullString       `json:"actor_id"`
	Action         persist.Action       `json:"action"`
	ResourceTypeID persist.ResourceType `json:"resource_type_id"`
	UserID         persist.DBID         `json:"user_id"`
	SubjectID      persist.DBID         `json:"subject_id"`
	PostID         persist.DBID         `json:"post_id"`
}

func (q *Queries) CreatePostEvent(ctx context.Context, arg CreatePostEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createPostEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.UserID,
		arg.SubjectID,
		arg.PostID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
		&i.Caption,
		&i.GroupID,
		&i.PostID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createPushTickets = `-- name: CreatePushTickets :exec
insert into push_notification_tickets (id, push_token_id, ticket_id, created_at, check_after, num_check_attempts, status, deleted) values
  (
   unnest($1::text[]),
   unnest($2::text[]),
   unnest($3::text[]),
   now(),
   now() + interval '15 minutes',
   0,
   'pending',
   false
  )
`

type CreatePushTicketsParams struct {
	Ids          []string `json:"ids"`
	PushTokenIds []string `json:"push_token_ids"`
	TicketIds    []string `json:"ticket_ids"`
}

func (q *Queries) CreatePushTickets(ctx context.Context, arg CreatePushTicketsParams) error {
	_, err := q.db.Exec(ctx, createPushTickets, arg.Ids, arg.PushTokenIds, arg.TicketIds)
	return err
}

const createPushTokenForUser = `-- name: CreatePushTokenForUser :one
insert into push_notification_tokens (id, user_id, push_token, created_at, deleted) values ($1, $2, $3, now(), false) returning id, user_id, push_token, created_at, deleted
`

type CreatePushTokenForUserParams struct {
	ID        persist.DBID `json:"id"`
	UserID    persist.DBID `json:"user_id"`
	PushToken string       `json:"push_token"`
}

func (q *Queries) CreatePushTokenForUser(ctx context.Context, arg CreatePushTokenForUserParams) (PushNotificationToken, error) {
	row := q.db.QueryRow(ctx, createPushTokenForUser, arg.ID, arg.UserID, arg.PushToken)
	var i PushNotificationToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PushToken,
		&i.CreatedAt,
		&i.Deleted,
	)
	return i, err
}

const createSimpleNotification = `-- name: CreateSimpleNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids) VALUES ($1, $2, $3, $4, $5) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id
`

type CreateSimpleNotificationParams struct {
	ID       persist.DBID             `json:"id"`
	OwnerID  persist.DBID             `json:"owner_id"`
	Action   persist.Action           `json:"action"`
	Data     persist.NotificationData `json:"data"`
	EventIds persist.DBIDList         `json:"event_ids"`
}

func (q *Queries) CreateSimpleNotification(ctx context.Context, arg CreateSimpleNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createSimpleNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
		&i.PostID,
		&i.TokenID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createTokenEvent = `-- name: CreateTokenEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, token_id, subject_id, data, group_id, caption, gallery_id, collection_id) VALUES ($1, $2, $3, $4, $5, $5, $6, $7, $8, $9, $10) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id
`

type CreateTokenEventParams struct {
	ID             persist.DBID         `json:"id"`
	ActorID        sql.NullString       `json:"actor_id"`
	Action         persist.Action       `json:"action"`
	ResourceTypeID persist.ResourceType `json:"resource_type_id"`
	TokenID        persist.DBID         `json:"token_id"`
	Data           persist.EventData    `json:"data"`
	GroupID        sql.NullString       `json:"group_id"`
	Caption        sql.NullString       `json:"caption"`
	Gallery        sql.NullString       `json:"gallery"`
	Collection     sql.NullString       `json:"collection"`
}

func (q *Queries) CreateTokenEvent(ctx context.Context, arg CreateTokenEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createTokenEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.TokenID,
		arg.Data,
		arg.GroupID,
		arg.Caption,
		arg.Gallery,
		arg.Collection,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
		&i.Caption,
		&i.GroupID,
		&i.PostID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createTokenNotification = `-- name: CreateTokenNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids, token_id, amount) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id
`

type CreateTokenNotificationParams struct {
	ID       persist.DBID             `json:"id"`
	OwnerID  persist.DBID             `json:"owner_id"`
	Action   persist.Action           `json:"action"`
	Data     persist.NotificationData `json:"data"`
	EventIds persist.DBIDList         `json:"event_ids"`
	TokenID  persist.DBID             `json:"token_id"`
	Amount   int32                    `json:"amount"`
}

func (q *Queries) CreateTokenNotification(ctx context.Context, arg CreateTokenNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createTokenNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
		arg.TokenID,
		arg.Amount,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
		&i.PostID,
		&i.TokenID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createUserEvent = `-- name: CreateUserEvent :one
INSERT INTO events (id, actor_id, action, resource_type_id, user_id, subject_id, post_id, comment_id, feed_event_id, mention_id, data, group_id, caption) VALUES ($1, $2, $3, $4, $5, $5, $9, $10, $11, $12, $6, $7, $8) RETURNING id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id
`

type CreateUserEventParams struct {
	ID             persist.DBID         `json:"id"`
	ActorID        sql.NullString       `json:"actor_id"`
	Action         persist.Action       `json:"action"`
	ResourceTypeID persist.ResourceType `json:"resource_type_id"`
	UserID         persist.DBID         `json:"user_id"`
	Data           persist.EventData    `json:"data"`
	GroupID        sql.NullString       `json:"group_id"`
	Caption        sql.NullString       `json:"caption"`
	Post           sql.NullString       `json:"post"`
	Comment        sql.NullString       `json:"comment"`
	FeedEvent      sql.NullString       `json:"feed_event"`
	Mention        sql.NullString       `json:"mention"`
}

func (q *Queries) CreateUserEvent(ctx context.Context, arg CreateUserEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createUserEvent,
		arg.ID,
		arg.ActorID,
		arg.Action,
		arg.ResourceTypeID,
		arg.UserID,
		arg.Data,
		arg.GroupID,
		arg.Caption,
		arg.Post,
		arg.Comment,
		arg.FeedEvent,
		arg.Mention,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
		&i.Caption,
		&i.GroupID,
		&i.PostID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const createViewGalleryNotification = `-- name: CreateViewGalleryNotification :one
INSERT INTO notifications (id, owner_id, action, data, event_ids, gallery_id) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id
`

type CreateViewGalleryNotificationParams struct {
	ID        persist.DBID             `json:"id"`
	OwnerID   persist.DBID             `json:"owner_id"`
	Action    persist.Action           `json:"action"`
	Data      persist.NotificationData `json:"data"`
	EventIds  persist.DBIDList         `json:"event_ids"`
	GalleryID persist.DBID             `json:"gallery_id"`
}

func (q *Queries) CreateViewGalleryNotification(ctx context.Context, arg CreateViewGalleryNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createViewGalleryNotification,
		arg.ID,
		arg.OwnerID,
		arg.Action,
		arg.Data,
		arg.EventIds,
		arg.GalleryID,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
		&i.PostID,
		&i.TokenID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const deleteCollections = `-- name: DeleteCollections :exec
update collections set deleted = true, last_updated = now() where id = any($1::varchar[])
`

func (q *Queries) DeleteCollections(ctx context.Context, ids []string) error {
	_, err := q.db.Exec(ctx, deleteCollections, ids)
	return err
}

const deletePostByID = `-- name: DeletePostByID :exec
update posts set deleted = true where id = $1
`

func (q *Queries) DeletePostByID(ctx context.Context, id persist.DBID) error {
	_, err := q.db.Exec(ctx, deletePostByID, id)
	return err
}

const deletePushTokensByIDs = `-- name: DeletePushTokensByIDs :exec
update push_notification_tokens set deleted = true where id = any($1) and deleted = false
`

func (q *Queries) DeletePushTokensByIDs(ctx context.Context, ids persist.DBIDList) error {
	_, err := q.db.Exec(ctx, deletePushTokensByIDs, ids)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
update users set deleted = true where id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id persist.DBID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const deleteUserRoles = `-- name: DeleteUserRoles :exec
update user_roles set deleted = true, last_updated = now() where user_id = $1 and role = any($2)
`

type DeleteUserRolesParams struct {
	UserID persist.DBID     `json:"user_id"`
	Roles  persist.RoleList `json:"roles"`
}

func (q *Queries) DeleteUserRoles(ctx context.Context, arg DeleteUserRolesParams) error {
	_, err := q.db.Exec(ctx, deleteUserRoles, arg.UserID, arg.Roles)
	return err
}

const deleteWalletByID = `-- name: DeleteWalletByID :exec
update wallets set deleted = true, last_updated = now() where id = $1
`

func (q *Queries) DeleteWalletByID(ctx context.Context, id persist.DBID) error {
	_, err := q.db.Exec(ctx, deleteWalletByID, id)
	return err
}

const getActorForGroup = `-- name: GetActorForGroup :one
select actor_id from events where group_id = $1 and deleted = false order by(created_at, id) asc limit 1
`

func (q *Queries) GetActorForGroup(ctx context.Context, groupID sql.NullString) (sql.NullString, error) {
	row := q.db.QueryRow(ctx, getActorForGroup, groupID)
	var actor_id sql.NullString
	err := row.Scan(&actor_id)
	return actor_id, err
}

const getAdmireByAdmireID = `-- name: GetAdmireByAdmireID :one
SELECT id, version, feed_event_id, actor_id, deleted, created_at, last_updated, post_id, token_id FROM admires WHERE id = $1 AND deleted = false
`

func (q *Queries) GetAdmireByAdmireID(ctx context.Context, id persist.DBID) (Admire, error) {
	row := q.db.QueryRow(ctx, getAdmireByAdmireID, id)
	var i Admire
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.FeedEventID,
		&i.ActorID,
		&i.Deleted,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.PostID,
		&i.TokenID,
	)
	return i, err
}

const getAdmiresByActorID = `-- name: GetAdmiresByActorID :many
SELECT id, version, feed_event_id, actor_id, deleted, created_at, last_updated, post_id, token_id FROM admires WHERE actor_id = $1 AND deleted = false ORDER BY created_at DESC
`

func (q *Queries) GetAdmiresByActorID(ctx context.Context, actorID persist.DBID) ([]Admire, error) {
	rows, err := q.db.Query(ctx, getAdmiresByActorID, actorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admire
	for rows.Next() {
		var i Admire
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.FeedEventID,
			&i.ActorID,
			&i.Deleted,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.PostID,
			&i.TokenID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAdmiresByAdmireIDs = `-- name: GetAdmiresByAdmireIDs :many
SELECT id, version, feed_event_id, actor_id, deleted, created_at, last_updated, post_id, token_id from admires WHERE id = ANY($1) AND deleted = false
`

func (q *Queries) GetAdmiresByAdmireIDs(ctx context.Context, admireIds persist.DBIDList) ([]Admire, error) {
	rows, err := q.db.Query(ctx, getAdmiresByAdmireIDs, admireIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admire
	for rows.Next() {
		var i Admire
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.FeedEventID,
			&i.ActorID,
			&i.Deleted,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.PostID,
			&i.TokenID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTimeTrendingUserIDs = `-- name: GetAllTimeTrendingUserIDs :many
select users.id
from events, galleries, users
left join legacy_views on users.id = legacy_views.user_id and legacy_views.deleted = false
where action = 'ViewedGallery'
  and events.gallery_id = galleries.id
  and users.id = galleries.owner_user_id
  and galleries.deleted = false
  and users.deleted = false
group by users.id
order by row_number() over(order by count(events.id) + coalesce(max(legacy_views.view_count), 0) desc, max(users.created_at) desc) asc
limit $1
`

func (q *Queries) GetAllTimeTrendingUserIDs(ctx context.Context, limit int32) ([]persist.DBID, error) {
	rows, err := q.db.Query(ctx, getAllTimeTrendingUserIDs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []persist.DBID
	for rows.Next() {
		var id persist.DBID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTokensWithContractsByIDs = `-- name: GetAllTokensWithContractsByIDs :many
select
    tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name__deprecated, tokens.description__deprecated, tokens.collectors_note, tokens.token_uri__deprecated, tokens.token_type__deprecated, tokens.token_id, tokens.quantity, tokens.ownership_history__deprecated, tokens.external_url__deprecated, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain, tokens.contract_id, tokens.is_user_marked_spam, tokens.is_provider_marked_spam__deprecated, tokens.last_synced, tokens.fallback_media__deprecated, tokens.token_media_id__deprecated, tokens.is_creator_token, tokens.is_holder_token, tokens.displayable, tokens.token_definition_id,
    contracts.id, contracts.deleted, contracts.version, contracts.created_at, contracts.last_updated, contracts.name, contracts.symbol, contracts.address, contracts.creator_address, contracts.chain, contracts.profile_banner_url, contracts.profile_image_url, contracts.badge_url, contracts.description, contracts.owner_address, contracts.is_provider_marked_spam, contracts.parent_id, contracts.override_creator_user_id,
    (
        select wallets.address
        from wallets
        where wallets.id = any(tokens.owned_by_wallets) and wallets.deleted = false
        limit 1
    ) as wallet_address
from tokens
join contracts on contracts.id = tokens.contract
left join token_medias on token_medias.id = tokens.token_media_id
where tokens.deleted = false
and (tokens.token_media_id is null or token_medias.active = false)
and tokens.id >= $1 and tokens.id < $2
order by tokens.id
`

type GetAllTokensWithContractsByIDsParams struct {
	StartID persist.DBID `json:"start_id"`
	EndID   persist.DBID `json:"end_id"`
}

type GetAllTokensWithContractsByIDsRow struct {
	ID                             persist.DBID      `json:"id"`
	Deleted                        bool              `json:"deleted"`
	Version                        sql.NullInt32     `json:"version"`
	CreatedAt                      time.Time         `json:"created_at"`
	LastUpdated                    time.Time         `json:"last_updated"`
	NameDeprecated                 sql.NullString    `json:"name__deprecated"`
	DescriptionDeprecated          sql.NullString    `json:"description__deprecated"`
	CollectorsNote                 sql.NullString    `json:"collectors_note"`
	TokenUriDeprecated             sql.NullString    `json:"token_uri__deprecated"`
	TokenTypeDeprecated            sql.NullString    `json:"token_type__deprecated"`
	TokenID                        persist.TokenID   `json:"token_id"`
	Quantity                       persist.HexString `json:"quantity"`
	OwnershipHistoryDeprecated     []pgtype.JSONB    `json:"ownership_history__deprecated"`
	ExternalUrlDeprecated          sql.NullString    `json:"external_url__deprecated"`
	BlockNumber                    sql.NullInt64     `json:"block_number"`
	OwnerUserID                    persist.DBID      `json:"owner_user_id"`
	OwnedByWallets                 persist.DBIDList  `json:"owned_by_wallets"`
	Chain                          persist.Chain     `json:"chain"`
	ContractID                     persist.DBID      `json:"contract_id"`
	IsUserMarkedSpam               sql.NullBool      `json:"is_user_marked_spam"`
	IsProviderMarkedSpamDeprecated sql.NullBool      `json:"is_provider_marked_spam__deprecated"`
	LastSynced                     time.Time         `json:"last_synced"`
	FallbackMediaDeprecated        pgtype.JSONB      `json:"fallback_media__deprecated"`
	TokenMediaIDDeprecated         sql.NullString    `json:"token_media_id__deprecated"`
	IsCreatorToken                 bool              `json:"is_creator_token"`
	IsHolderToken                  bool              `json:"is_holder_token"`
	Displayable                    bool              `json:"displayable"`
	TokenDefinitionID              persist.DBID      `json:"token_definition_id"`
	ID_2                           persist.DBID      `json:"id_2"`
	Deleted_2                      bool              `json:"deleted_2"`
	Version_2                      sql.NullInt32     `json:"version_2"`
	CreatedAt_2                    time.Time         `json:"created_at_2"`
	LastUpdated_2                  time.Time         `json:"last_updated_2"`
	Name                           sql.NullString    `json:"name"`
	Symbol                         sql.NullString    `json:"symbol"`
	Address                        persist.Address   `json:"address"`
	CreatorAddress                 persist.Address   `json:"creator_address"`
	Chain_2                        persist.Chain     `json:"chain_2"`
	ProfileBannerUrl               sql.NullString    `json:"profile_banner_url"`
	ProfileImageUrl                sql.NullString    `json:"profile_image_url"`
	BadgeUrl                       sql.NullString    `json:"badge_url"`
	Description                    sql.NullString    `json:"description"`
	OwnerAddress                   persist.Address   `json:"owner_address"`
	IsProviderMarkedSpam           bool              `json:"is_provider_marked_spam"`
	ParentID                       persist.DBID      `json:"parent_id"`
	OverrideCreatorUserID          persist.DBID      `json:"override_creator_user_id"`
	WalletAddress                  persist.Address   `json:"wallet_address"`
}

func (q *Queries) GetAllTokensWithContractsByIDs(ctx context.Context, arg GetAllTokensWithContractsByIDsParams) ([]GetAllTokensWithContractsByIDsRow, error) {
	rows, err := q.db.Query(ctx, getAllTokensWithContractsByIDs, arg.StartID, arg.EndID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTokensWithContractsByIDsRow
	for rows.Next() {
		var i GetAllTokensWithContractsByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.NameDeprecated,
			&i.DescriptionDeprecated,
			&i.CollectorsNote,
			&i.TokenUriDeprecated,
			&i.TokenTypeDeprecated,
			&i.TokenID,
			&i.Quantity,
			&i.OwnershipHistoryDeprecated,
			&i.ExternalUrlDeprecated,
			&i.BlockNumber,
			&i.OwnerUserID,
			&i.OwnedByWallets,
			&i.Chain,
			&i.ContractID,
			&i.IsUserMarkedSpam,
			&i.IsProviderMarkedSpamDeprecated,
			&i.LastSynced,
			&i.FallbackMediaDeprecated,
			&i.TokenMediaIDDeprecated,
			&i.IsCreatorToken,
			&i.IsHolderToken,
			&i.Displayable,
			&i.TokenDefinitionID,
			&i.ID_2,
			&i.Deleted_2,
			&i.Version_2,
			&i.CreatedAt_2,
			&i.LastUpdated_2,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain_2,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
			&i.OwnerAddress,
			&i.IsProviderMarkedSpam,
			&i.ParentID,
			&i.OverrideCreatorUserID,
			&i.WalletAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCheckablePushTickets = `-- name: GetCheckablePushTickets :many
select id, push_token_id, ticket_id, created_at, check_after, num_check_attempts, deleted, status from push_notification_tickets where check_after <= now() and deleted = false limit $1
`

func (q *Queries) GetCheckablePushTickets(ctx context.Context, limit int32) ([]PushNotificationTicket, error) {
	rows, err := q.db.Query(ctx, getCheckablePushTickets, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PushNotificationTicket
	for rows.Next() {
		var i PushNotificationTicket
		if err := rows.Scan(
			&i.ID,
			&i.PushTokenID,
			&i.TicketID,
			&i.CreatedAt,
			&i.CheckAfter,
			&i.NumCheckAttempts,
			&i.Deleted,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionById = `-- name: GetCollectionById :one
SELECT id, deleted, owner_user_id, nfts, version, last_updated, created_at, hidden, collectors_note, name, layout, token_settings, gallery_id FROM collections WHERE id = $1 AND deleted = false
`

func (q *Queries) GetCollectionById(ctx context.Context, id persist.DBID) (Collection, error) {
	row := q.db.QueryRow(ctx, getCollectionById, id)
	var i Collection
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerUserID,
		&i.Nfts,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Hidden,
		&i.CollectorsNote,
		&i.Name,
		&i.Layout,
		&i.TokenSettings,
		&i.GalleryID,
	)
	return i, err
}

const getCollectionTokensByCollectionID = `-- name: GetCollectionTokensByCollectionID :one
select nfts from collections where id = $1 and deleted = false
`

func (q *Queries) GetCollectionTokensByCollectionID(ctx context.Context, id persist.DBID) (persist.DBIDList, error) {
	row := q.db.QueryRow(ctx, getCollectionTokensByCollectionID, id)
	var nfts persist.DBIDList
	err := row.Scan(&nfts)
	return nfts, err
}

const getCollectionsByGalleryId = `-- name: GetCollectionsByGalleryId :many
SELECT c.id, c.deleted, c.owner_user_id, c.nfts, c.version, c.last_updated, c.created_at, c.hidden, c.collectors_note, c.name, c.layout, c.token_settings, c.gallery_id FROM galleries g, unnest(g.collections)
    WITH ORDINALITY AS x(coll_id, coll_ord)
    INNER JOIN collections c ON c.id = x.coll_id
    WHERE g.id = $1 AND g.deleted = false AND c.deleted = false ORDER BY x.coll_ord
`

func (q *Queries) GetCollectionsByGalleryId(ctx context.Context, id persist.DBID) ([]Collection, error) {
	rows, err := q.db.Query(ctx, getCollectionsByGalleryId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerUserID,
			&i.Nfts,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Hidden,
			&i.CollectorsNote,
			&i.Name,
			&i.Layout,
			&i.TokenSettings,
			&i.GalleryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentByCommentID = `-- name: GetCommentByCommentID :one
SELECT id, version, feed_event_id, actor_id, reply_to, comment, deleted, created_at, last_updated, post_id, removed FROM comments WHERE id = $1 and deleted = false
`

func (q *Queries) GetCommentByCommentID(ctx context.Context, id persist.DBID) (Comment, error) {
	row := q.db.QueryRow(ctx, getCommentByCommentID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.FeedEventID,
		&i.ActorID,
		&i.ReplyTo,
		&i.Comment,
		&i.Deleted,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.PostID,
		&i.Removed,
	)
	return i, err
}

const getCommentsByCommentIDs = `-- name: GetCommentsByCommentIDs :many
SELECT id, version, feed_event_id, actor_id, reply_to, comment, deleted, created_at, last_updated, post_id, removed from comments WHERE id = ANY($1) and deleted = false
`

func (q *Queries) GetCommentsByCommentIDs(ctx context.Context, commentIds persist.DBIDList) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsByCommentIDs, commentIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.FeedEventID,
			&i.ActorID,
			&i.ReplyTo,
			&i.Comment,
			&i.Deleted,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.PostID,
			&i.Removed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContractByChainAddress = `-- name: GetContractByChainAddress :one
select id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description, owner_address, is_provider_marked_spam, parent_id, override_creator_user_id FROM contracts WHERE address = $1 AND chain = $2 AND deleted = false
`

type GetContractByChainAddressParams struct {
	Address persist.Address `json:"address"`
	Chain   persist.Chain   `json:"chain"`
}

func (q *Queries) GetContractByChainAddress(ctx context.Context, arg GetContractByChainAddressParams) (Contract, error) {
	row := q.db.QueryRow(ctx, getContractByChainAddress, arg.Address, arg.Chain)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Name,
		&i.Symbol,
		&i.Address,
		&i.CreatorAddress,
		&i.Chain,
		&i.ProfileBannerUrl,
		&i.ProfileImageUrl,
		&i.BadgeUrl,
		&i.Description,
		&i.OwnerAddress,
		&i.IsProviderMarkedSpam,
		&i.ParentID,
		&i.OverrideCreatorUserID,
	)
	return i, err
}

const getContractByID = `-- name: GetContractByID :one
select id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description, owner_address, is_provider_marked_spam, parent_id, override_creator_user_id FROM contracts WHERE id = $1 AND deleted = false
`

func (q *Queries) GetContractByID(ctx context.Context, id persist.DBID) (Contract, error) {
	row := q.db.QueryRow(ctx, getContractByID, id)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Name,
		&i.Symbol,
		&i.Address,
		&i.CreatorAddress,
		&i.Chain,
		&i.ProfileBannerUrl,
		&i.ProfileImageUrl,
		&i.BadgeUrl,
		&i.Description,
		&i.OwnerAddress,
		&i.IsProviderMarkedSpam,
		&i.ParentID,
		&i.OverrideCreatorUserID,
	)
	return i, err
}

const getContractCreatorsByContractIDs = `-- name: GetContractCreatorsByContractIDs :many
with contract_creators as (
    select c.id as contract_id,
           u.id as creator_user_id,
           c.chain as chain,
           coalesce(nullif(c.owner_address, ''), nullif(c.creator_address, '')) as creator_address,
           w.id as creator_wallet_id
    from contracts c
             left join wallets w on
                w.deleted = false and
                w.chain = c.chain and
                coalesce(nullif(c.owner_address, ''), nullif(c.creator_address, '')) = w.address
             left join users u on
                u.deleted = false and
                (
                        (c.override_creator_user_id is not null and c.override_creator_user_id = u.id)
                        or
                        (c.override_creator_user_id is null and w.address is not null and array[w.id] <@ u.wallets)
                    )
    where c.deleted = false
      and (u.id is not null or coalesce(nullif(c.owner_address, ''), nullif(c.creator_address, '')) is not null)
)
select contract_id, creator_user_id, chain, creator_address, creator_wallet_id from unnest($1::text[]) as ids
                  join contract_creators cc on cc.contract_id = ids
`

type GetContractCreatorsByContractIDsRow struct {
	ContractID      persist.DBID    `json:"contract_id"`
	CreatorUserID   persist.DBID    `json:"creator_user_id"`
	Chain           persist.Chain   `json:"chain"`
	CreatorAddress  persist.Address `json:"creator_address"`
	CreatorWalletID persist.DBID    `json:"creator_wallet_id"`
}

func (q *Queries) GetContractCreatorsByContractIDs(ctx context.Context, contractIds []string) ([]GetContractCreatorsByContractIDsRow, error) {
	rows, err := q.db.Query(ctx, getContractCreatorsByContractIDs, contractIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetContractCreatorsByContractIDsRow
	for rows.Next() {
		var i GetContractCreatorsByContractIDsRow
		if err := rows.Scan(
			&i.ContractID,
			&i.CreatorUserID,
			&i.Chain,
			&i.CreatorAddress,
			&i.CreatorWalletID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContractCreatorsByIds = `-- name: GetContractCreatorsByIds :many
select o.contract_id, o.creator_user_id, o.chain, o.creator_address
    from unnest($1::text[]) as c(id)
        join contract_creators o on o.contract_id = c.id
`

func (q *Queries) GetContractCreatorsByIds(ctx context.Context, contractIds []string) ([]ContractCreator, error) {
	rows, err := q.db.Query(ctx, getContractCreatorsByIds, contractIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContractCreator
	for rows.Next() {
		var i ContractCreator
		if err := rows.Scan(
			&i.ContractID,
			&i.CreatorUserID,
			&i.Chain,
			&i.CreatorAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContractsByIDs = `-- name: GetContractsByIDs :many
SELECT id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description, owner_address, is_provider_marked_spam, parent_id, override_creator_user_id from contracts WHERE id = ANY($1) AND deleted = false
`

func (q *Queries) GetContractsByIDs(ctx context.Context, contractIds persist.DBIDList) ([]Contract, error) {
	rows, err := q.db.Query(ctx, getContractsByIDs, contractIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
			&i.OwnerAddress,
			&i.IsProviderMarkedSpam,
			&i.ParentID,
			&i.OverrideCreatorUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContractsByTokenIDs = `-- name: GetContractsByTokenIDs :many
select contracts.id, contracts.deleted, contracts.version, contracts.created_at, contracts.last_updated, contracts.name, contracts.symbol, contracts.address, contracts.creator_address, contracts.chain, contracts.profile_banner_url, contracts.profile_image_url, contracts.badge_url, contracts.description, contracts.owner_address, contracts.is_provider_marked_spam, contracts.parent_id, contracts.override_creator_user_id from contracts join tokens on contracts.id = tokens.contract where tokens.id = any($1) and contracts.deleted = false
`

func (q *Queries) GetContractsByTokenIDs(ctx context.Context, tokenIds persist.DBIDList) ([]Contract, error) {
	rows, err := q.db.Query(ctx, getContractsByTokenIDs, tokenIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
			&i.OwnerAddress,
			&i.IsProviderMarkedSpam,
			&i.ParentID,
			&i.OverrideCreatorUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCreatedContractsByUserID = `-- name: GetCreatedContractsByUserID :many
select c.id, c.deleted, c.version, c.created_at, c.last_updated, c.name, c.symbol, c.address, c.creator_address, c.chain, c.profile_banner_url, c.profile_image_url, c.badge_url, c.description, c.owner_address, c.is_provider_marked_spam, c.parent_id, c.override_creator_user_id,
       w.id as wallet_id,
       false as is_override_creator
from users u, contracts c, wallets w
where u.id = $1
  and c.chain = any($2::int[])
  and w.id = any(u.wallets) and coalesce(nullif(c.owner_address, ''), nullif(c.creator_address, '')) = w.address
  and c.chain = w.chain
  and u.deleted = false
  and c.deleted = false
  and w.deleted = false
  and c.override_creator_user_id is null
  and (not $3::bool or not exists(
    select 1 from tokens t
        where t.owner_user_id = $1
          and t.contract = c.id
          and t.is_creator_token
          and not t.deleted
        )
    )

union all

select c.id, c.deleted, c.version, c.created_at, c.last_updated, c.name, c.symbol, c.address, c.creator_address, c.chain, c.profile_banner_url, c.profile_image_url, c.badge_url, c.description, c.owner_address, c.is_provider_marked_spam, c.parent_id, c.override_creator_user_id,
       null as wallet_id,
       true as is_override_creator
from contracts c
where c.override_creator_user_id = $1
  and c.chain = any($2::int[])
  and c.deleted = false
  and (not $3::bool or not exists(
    select 1 from tokens t
        where t.owner_user_id = $1
          and t.contract = c.id
          and t.is_creator_token
          and not t.deleted
        )
    )
`

type GetCreatedContractsByUserIDParams struct {
	UserID           persist.DBID `json:"user_id"`
	Chains           []int32      `json:"chains"`
	NewContractsOnly bool         `json:"new_contracts_only"`
}

type GetCreatedContractsByUserIDRow struct {
	Contract          Contract     `json:"contract"`
	WalletID          persist.DBID `json:"wallet_id"`
	IsOverrideCreator bool         `json:"is_override_creator"`
}

func (q *Queries) GetCreatedContractsByUserID(ctx context.Context, arg GetCreatedContractsByUserIDParams) ([]GetCreatedContractsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getCreatedContractsByUserID, arg.UserID, arg.Chains, arg.NewContractsOnly)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCreatedContractsByUserIDRow
	for rows.Next() {
		var i GetCreatedContractsByUserIDRow
		if err := rows.Scan(
			&i.Contract.ID,
			&i.Contract.Deleted,
			&i.Contract.Version,
			&i.Contract.CreatedAt,
			&i.Contract.LastUpdated,
			&i.Contract.Name,
			&i.Contract.Symbol,
			&i.Contract.Address,
			&i.Contract.CreatorAddress,
			&i.Contract.Chain,
			&i.Contract.ProfileBannerUrl,
			&i.Contract.ProfileImageUrl,
			&i.Contract.BadgeUrl,
			&i.Contract.Description,
			&i.Contract.OwnerAddress,
			&i.Contract.IsProviderMarkedSpam,
			&i.Contract.ParentID,
			&i.Contract.OverrideCreatorUserID,
			&i.WalletID,
			&i.IsOverrideCreator,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCurrentTime = `-- name: GetCurrentTime :one
select now()::timestamptz
`

func (q *Queries) GetCurrentTime(ctx context.Context) (time.Time, error) {
	row := q.db.QueryRow(ctx, getCurrentTime)
	var column_1 time.Time
	err := row.Scan(&column_1)
	return column_1, err
}

const getEthereumWalletsForEnsProfileImagesByUserID = `-- name: GetEthereumWalletsForEnsProfileImagesByUserID :many
select w.id, w.created_at, w.last_updated, w.deleted, w.version, w.address, w.wallet_type, w.chain
from wallets w
join users u on w.id = any(u.wallets)
where u.id = $1 and w.chain = 0 and not w.deleted
order by u.primary_wallet_id = w.id desc, w.id desc
`

func (q *Queries) GetEthereumWalletsForEnsProfileImagesByUserID(ctx context.Context, id persist.DBID) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, getEthereumWalletsForEnsProfileImagesByUserID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Deleted,
			&i.Version,
			&i.Address,
			&i.WalletType,
			&i.Chain,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvent = `-- name: GetEvent :one
SELECT id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id FROM events WHERE id = $1 AND deleted = false
`

func (q *Queries) GetEvent(ctx context.Context, id persist.DBID) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.ActorID,
		&i.ResourceTypeID,
		&i.SubjectID,
		&i.UserID,
		&i.TokenID,
		&i.CollectionID,
		&i.Action,
		&i.Data,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.GalleryID,
		&i.CommentID,
		&i.AdmireID,
		&i.FeedEventID,
		&i.ExternalID,
		&i.Caption,
		&i.GroupID,
		&i.PostID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const getEventsInGroup = `-- name: GetEventsInGroup :many
select id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id from events where group_id = $1 and deleted = false order by(created_at, id) asc
`

func (q *Queries) GetEventsInGroup(ctx context.Context, groupID sql.NullString) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsInGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.ActorID,
			&i.ResourceTypeID,
			&i.SubjectID,
			&i.UserID,
			&i.TokenID,
			&i.CollectionID,
			&i.Action,
			&i.Data,
			&i.Deleted,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.GalleryID,
			&i.CommentID,
			&i.AdmireID,
			&i.FeedEventID,
			&i.ExternalID,
			&i.Caption,
			&i.GroupID,
			&i.PostID,
			&i.ContractID,
			&i.MentionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsInWindow = `-- name: GetEventsInWindow :many
with recursive activity as (
    select id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id from events where events.id = $1 and deleted = false
    union
    select e.id, e.version, e.actor_id, e.resource_type_id, e.subject_id, e.user_id, e.token_id, e.collection_id, e.action, e.data, e.deleted, e.last_updated, e.created_at, e.gallery_id, e.comment_id, e.admire_id, e.feed_event_id, e.external_id, e.caption, e.group_id, e.post_id, e.contract_id, e.mention_id from events e, activity a
    where e.actor_id = a.actor_id
        and e.action = any($3)
        and e.created_at < a.created_at
        and e.created_at >= a.created_at - make_interval(secs => $2)
        and e.deleted = false
        and e.caption is null
        and (not $4::bool or e.subject_id = a.subject_id)
)
select id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id from events where id = any(select id from activity) order by (created_at, id) asc
`

type GetEventsInWindowParams struct {
	ID             persist.DBID       `json:"id"`
	Secs           float64            `json:"secs"`
	Actions        persist.ActionList `json:"actions"`
	IncludeSubject bool               `json:"include_subject"`
}

func (q *Queries) GetEventsInWindow(ctx context.Context, arg GetEventsInWindowParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, getEventsInWindow,
		arg.ID,
		arg.Secs,
		arg.Actions,
		arg.IncludeSubject,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.ActorID,
			&i.ResourceTypeID,
			&i.SubjectID,
			&i.UserID,
			&i.TokenID,
			&i.CollectionID,
			&i.Action,
			&i.Data,
			&i.Deleted,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.GalleryID,
			&i.CommentID,
			&i.AdmireID,
			&i.FeedEventID,
			&i.ExternalID,
			&i.Caption,
			&i.GroupID,
			&i.PostID,
			&i.ContractID,
			&i.MentionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFallbackTokenByUserTokenIdentifiers = `-- name: GetFallbackTokenByUserTokenIdentifiers :one
with contract as (
	select id, deleted, version, created_at, last_updated, name, symbol, address, creator_address, chain, profile_banner_url, profile_image_url, badge_url, description, owner_address, is_provider_marked_spam, parent_id, override_creator_user_id from contracts where contracts.chain = $3 and contracts.address = $4 and not contracts.deleted
)
select tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name__deprecated, tokens.description__deprecated, tokens.collectors_note, tokens.token_uri__deprecated, tokens.token_type__deprecated, tokens.token_id, tokens.quantity, tokens.ownership_history__deprecated, tokens.external_url__deprecated, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain, tokens.contract_id, tokens.is_user_marked_spam, tokens.is_provider_marked_spam__deprecated, tokens.last_synced, tokens.fallback_media__deprecated, tokens.token_media_id__deprecated, tokens.is_creator_token, tokens.is_holder_token, tokens.displayable, tokens.token_definition_id
from tokens, contract
where tokens.contract = contract.id and tokens.chain = contract.chain and tokens.token_id = $1 and not tokens.deleted
order by tokens.owner_user_id = $2 desc, nullif(tokens.fallback_media->>'image_url', '') asc, tokens.last_updated desc
limit 1
`

type GetFallbackTokenByUserTokenIdentifiersParams struct {
	TokenID persist.TokenID `json:"token_id"`
	UserID  persist.DBID    `json:"user_id"`
	Chain   persist.Chain   `json:"chain"`
	Address persist.Address `json:"address"`
}

func (q *Queries) GetFallbackTokenByUserTokenIdentifiers(ctx context.Context, arg GetFallbackTokenByUserTokenIdentifiersParams) (Token, error) {
	row := q.db.QueryRow(ctx, getFallbackTokenByUserTokenIdentifiers,
		arg.TokenID,
		arg.UserID,
		arg.Chain,
		arg.Address,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.NameDeprecated,
		&i.DescriptionDeprecated,
		&i.CollectorsNote,
		&i.TokenUriDeprecated,
		&i.TokenTypeDeprecated,
		&i.TokenID,
		&i.Quantity,
		&i.OwnershipHistoryDeprecated,
		&i.ExternalUrlDeprecated,
		&i.BlockNumber,
		&i.OwnerUserID,
		&i.OwnedByWallets,
		&i.Chain,
		&i.ContractID,
		&i.IsUserMarkedSpam,
		&i.IsProviderMarkedSpamDeprecated,
		&i.LastSynced,
		&i.FallbackMediaDeprecated,
		&i.TokenMediaIDDeprecated,
		&i.IsCreatorToken,
		&i.IsHolderToken,
		&i.Displayable,
		&i.TokenDefinitionID,
	)
	return i, err
}

const getFeedEventByID = `-- name: GetFeedEventByID :one
SELECT id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at, caption, group_id FROM feed_events WHERE id = $1 AND deleted = false
`

func (q *Queries) GetFeedEventByID(ctx context.Context, id persist.DBID) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, getFeedEventByID, id)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Caption,
		&i.GroupID,
	)
	return i, err
}

const getFeedEventsByIds = `-- name: GetFeedEventsByIds :many
SELECT id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at, caption, group_id FROM feed_events WHERE id = ANY($1::varchar(255)[]) AND deleted = false
`

func (q *Queries) GetFeedEventsByIds(ctx context.Context, ids []string) ([]FeedEvent, error) {
	rows, err := q.db.Query(ctx, getFeedEventsByIds, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedEvent
	for rows.Next() {
		var i FeedEvent
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.OwnerID,
			&i.Action,
			&i.Data,
			&i.EventTime,
			&i.EventIds,
			&i.Deleted,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Caption,
			&i.GroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGalleriesByUserId = `-- name: GetGalleriesByUserId :many
SELECT id, deleted, last_updated, created_at, version, owner_user_id, collections, name, description, hidden, position FROM galleries WHERE owner_user_id = $1 AND deleted = false order by position
`

func (q *Queries) GetGalleriesByUserId(ctx context.Context, ownerUserID persist.DBID) ([]Gallery, error) {
	rows, err := q.db.Query(ctx, getGalleriesByUserId, ownerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gallery
	for rows.Next() {
		var i Gallery
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Version,
			&i.OwnerUserID,
			&i.Collections,
			&i.Name,
			&i.Description,
			&i.Hidden,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGalleryByCollectionId = `-- name: GetGalleryByCollectionId :one
SELECT g.id, g.deleted, g.last_updated, g.created_at, g.version, g.owner_user_id, g.collections, g.name, g.description, g.hidden, g.position FROM galleries g, collections c WHERE c.id = $1 AND c.deleted = false AND $1 = ANY(g.collections) AND g.deleted = false
`

func (q *Queries) GetGalleryByCollectionId(ctx context.Context, id persist.DBID) (Gallery, error) {
	row := q.db.QueryRow(ctx, getGalleryByCollectionId, id)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Version,
		&i.OwnerUserID,
		&i.Collections,
		&i.Name,
		&i.Description,
		&i.Hidden,
		&i.Position,
	)
	return i, err
}

const getGalleryById = `-- name: GetGalleryById :one
SELECT id, deleted, last_updated, created_at, version, owner_user_id, collections, name, description, hidden, position FROM galleries WHERE id = $1 AND deleted = false
`

func (q *Queries) GetGalleryById(ctx context.Context, id persist.DBID) (Gallery, error) {
	row := q.db.QueryRow(ctx, getGalleryById, id)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Version,
		&i.OwnerUserID,
		&i.Collections,
		&i.Name,
		&i.Description,
		&i.Hidden,
		&i.Position,
	)
	return i, err
}

const getGalleryEventsInWindow = `-- name: GetGalleryEventsInWindow :many
with recursive activity as (
    select id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id from events where events.id = $1 and deleted = false
    union
    select e.id, e.version, e.actor_id, e.resource_type_id, e.subject_id, e.user_id, e.token_id, e.collection_id, e.action, e.data, e.deleted, e.last_updated, e.created_at, e.gallery_id, e.comment_id, e.admire_id, e.feed_event_id, e.external_id, e.caption, e.group_id, e.post_id, e.contract_id, e.mention_id from events e, activity a
    where e.actor_id = a.actor_id
        and e.action = any($3)
        and e.gallery_id = $4
        and e.created_at < a.created_at
        and e.created_at >= a.created_at - make_interval(secs => $2)
        and e.deleted = false
        and e.caption is null
        and (not $5::bool or e.subject_id = a.subject_id)
)
select id, version, actor_id, resource_type_id, subject_id, user_id, token_id, collection_id, action, data, deleted, last_updated, created_at, gallery_id, comment_id, admire_id, feed_event_id, external_id, caption, group_id, post_id, contract_id, mention_id from events where id = any(select id from activity) order by (created_at, id) asc
`

type GetGalleryEventsInWindowParams struct {
	ID             persist.DBID       `json:"id"`
	Secs           float64            `json:"secs"`
	Actions        persist.ActionList `json:"actions"`
	GalleryID      persist.DBID       `json:"gallery_id"`
	IncludeSubject bool               `json:"include_subject"`
}

func (q *Queries) GetGalleryEventsInWindow(ctx context.Context, arg GetGalleryEventsInWindowParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, getGalleryEventsInWindow,
		arg.ID,
		arg.Secs,
		arg.Actions,
		arg.GalleryID,
		arg.IncludeSubject,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.ActorID,
			&i.ResourceTypeID,
			&i.SubjectID,
			&i.UserID,
			&i.TokenID,
			&i.CollectionID,
			&i.Action,
			&i.Data,
			&i.Deleted,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.GalleryID,
			&i.CommentID,
			&i.AdmireID,
			&i.FeedEventID,
			&i.ExternalID,
			&i.Caption,
			&i.GroupID,
			&i.PostID,
			&i.ContractID,
			&i.MentionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGalleryIDByCollectionID = `-- name: GetGalleryIDByCollectionID :one
select gallery_id from collections where id = $1 and deleted = false
`

func (q *Queries) GetGalleryIDByCollectionID(ctx context.Context, id persist.DBID) (persist.DBID, error) {
	row := q.db.QueryRow(ctx, getGalleryIDByCollectionID, id)
	var gallery_id persist.DBID
	err := row.Scan(&gallery_id)
	return gallery_id, err
}

const getLastFeedEventForCollection = `-- name: GetLastFeedEventForCollection :one
select id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at, caption, group_id from feed_events where deleted = false
    and owner_id = $1
    and action = any($3)
    and data ->> 'collection_id' = $4
    and event_time < $2
    order by event_time desc
    limit 1
`

type GetLastFeedEventForCollectionParams struct {
	OwnerID      persist.DBID       `json:"owner_id"`
	EventTime    time.Time          `json:"event_time"`
	Actions      persist.ActionList `json:"actions"`
	CollectionID persist.DBID       `json:"collection_id"`
}

func (q *Queries) GetLastFeedEventForCollection(ctx context.Context, arg GetLastFeedEventForCollectionParams) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, getLastFeedEventForCollection,
		arg.OwnerID,
		arg.EventTime,
		arg.Actions,
		arg.CollectionID,
	)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Caption,
		&i.GroupID,
	)
	return i, err
}

const getLastFeedEventForToken = `-- name: GetLastFeedEventForToken :one
select id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at, caption, group_id from feed_events where deleted = false
    and owner_id = $1
    and action = any($3)
    and data ->> 'token_id' = $4::varchar
    and event_time < $2
    order by event_time desc
    limit 1
`

type GetLastFeedEventForTokenParams struct {
	OwnerID   persist.DBID       `json:"owner_id"`
	EventTime time.Time          `json:"event_time"`
	Actions   persist.ActionList `json:"actions"`
	TokenID   string             `json:"token_id"`
}

func (q *Queries) GetLastFeedEventForToken(ctx context.Context, arg GetLastFeedEventForTokenParams) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, getLastFeedEventForToken,
		arg.OwnerID,
		arg.EventTime,
		arg.Actions,
		arg.TokenID,
	)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Caption,
		&i.GroupID,
	)
	return i, err
}

const getLastFeedEventForUser = `-- name: GetLastFeedEventForUser :one
select id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at, caption, group_id from feed_events where deleted = false
    and owner_id = $1
    and action = any($3)
    and event_time < $2
    order by event_time desc
    limit 1
`

type GetLastFeedEventForUserParams struct {
	OwnerID   persist.DBID       `json:"owner_id"`
	EventTime time.Time          `json:"event_time"`
	Actions   persist.ActionList `json:"actions"`
}

func (q *Queries) GetLastFeedEventForUser(ctx context.Context, arg GetLastFeedEventForUserParams) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, getLastFeedEventForUser, arg.OwnerID, arg.EventTime, arg.Actions)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Caption,
		&i.GroupID,
	)
	return i, err
}

const getMediaByTokenIdentifiers = `-- name: GetMediaByTokenIdentifiers :one
select token_medias.id, token_medias.created_at, token_medias.last_updated, token_medias.version, token_medias.contract_id__deprecated, token_medias.token_id__deprecated, token_medias.chain__deprecated, token_medias.active, token_medias.metadata__deprecated, token_medias.media, token_medias.name__deprecated, token_medias.description__deprecated, token_medias.processing_job_id, token_medias.deleted
from token_definitions
join token_medias on token_definitions.token_media_id = token_medias.id
where (chain, contract_address, token_id) = ($1, $2, $3)
    and not token_definitions.deleted
    and not token_medias.deleted
`

type GetMediaByTokenIdentifiersParams struct {
	Chain           persist.Chain   `json:"chain"`
	ContractAddress persist.Address `json:"contract_address"`
	TokenID         persist.TokenID `json:"token_id"`
}

func (q *Queries) GetMediaByTokenIdentifiers(ctx context.Context, arg GetMediaByTokenIdentifiersParams) (TokenMedia, error) {
	row := q.db.QueryRow(ctx, getMediaByTokenIdentifiers, arg.Chain, arg.ContractAddress, arg.TokenID)
	var i TokenMedia
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Version,
		&i.ContractIDDeprecated,
		&i.TokenIDDeprecated,
		&i.ChainDeprecated,
		&i.Active,
		&i.MetadataDeprecated,
		&i.Media,
		&i.NameDeprecated,
		&i.DescriptionDeprecated,
		&i.ProcessingJobID,
		&i.Deleted,
	)
	return i, err
}

const getMembershipByMembershipId = `-- name: GetMembershipByMembershipId :one
SELECT id, deleted, version, created_at, last_updated, token_id, name, asset_url, owners FROM membership WHERE id = $1 AND deleted = false
`

func (q *Queries) GetMembershipByMembershipId(ctx context.Context, id persist.DBID) (Membership, error) {
	row := q.db.QueryRow(ctx, getMembershipByMembershipId, id)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.TokenID,
		&i.Name,
		&i.AssetUrl,
		&i.Owners,
	)
	return i, err
}

const getMentionByID = `-- name: GetMentionByID :one
select id, post_id, comment_id, user_id, contract_id, start, length, created_at, deleted from mentions where id = $1 and not deleted
`

func (q *Queries) GetMentionByID(ctx context.Context, id persist.DBID) (Mention, error) {
	row := q.db.QueryRow(ctx, getMentionByID, id)
	var i Mention
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.CommentID,
		&i.UserID,
		&i.ContractID,
		&i.Start,
		&i.Length,
		&i.CreatedAt,
		&i.Deleted,
	)
	return i, err
}

const getMerchDiscountCodeByTokenID = `-- name: GetMerchDiscountCodeByTokenID :one
select discount_code from merch where token_id = $1 and redeemed = true and deleted = false
`

func (q *Queries) GetMerchDiscountCodeByTokenID(ctx context.Context, tokenHex persist.TokenID) (sql.NullString, error) {
	row := q.db.QueryRow(ctx, getMerchDiscountCodeByTokenID, tokenHex)
	var discount_code sql.NullString
	err := row.Scan(&discount_code)
	return discount_code, err
}

const getMissingThumbnailTokensByIDRange = `-- name: GetMissingThumbnailTokensByIDRange :many
SELECT
    tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name__deprecated, tokens.description__deprecated, tokens.collectors_note, tokens.token_uri__deprecated, tokens.token_type__deprecated, tokens.token_id, tokens.quantity, tokens.ownership_history__deprecated, tokens.external_url__deprecated, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain, tokens.contract_id, tokens.is_user_marked_spam, tokens.is_provider_marked_spam__deprecated, tokens.last_synced, tokens.fallback_media__deprecated, tokens.token_media_id__deprecated, tokens.is_creator_token, tokens.is_holder_token, tokens.displayable, tokens.token_definition_id,
    contracts.id, contracts.deleted, contracts.version, contracts.created_at, contracts.last_updated, contracts.name, contracts.symbol, contracts.address, contracts.creator_address, contracts.chain, contracts.profile_banner_url, contracts.profile_image_url, contracts.badge_url, contracts.description, contracts.owner_address, contracts.is_provider_marked_spam, contracts.parent_id, contracts.override_creator_user_id,
    (
        SELECT wallets.address
        FROM wallets
        WHERE wallets.id = ANY(tokens.owned_by_wallets) and wallets.deleted = false
        LIMIT 1
    ) AS wallet_address
FROM tokens
JOIN contracts ON contracts.id = tokens.contract
left join token_medias on tokens.token_media_id = token_medias.id where tokens.deleted = false and token_medias.active = true and token_medias.media->>'media_type' = 'html' and (token_medias.media->>'thumbnail_url' is null or token_medias.media->>'thumbnail_url' = '')
AND tokens.id >= $1 AND tokens.id < $2
ORDER BY tokens.id
`

type GetMissingThumbnailTokensByIDRangeParams struct {
	StartID persist.DBID `json:"start_id"`
	EndID   persist.DBID `json:"end_id"`
}

type GetMissingThumbnailTokensByIDRangeRow struct {
	ID                             persist.DBID      `json:"id"`
	Deleted                        bool              `json:"deleted"`
	Version                        sql.NullInt32     `json:"version"`
	CreatedAt                      time.Time         `json:"created_at"`
	LastUpdated                    time.Time         `json:"last_updated"`
	NameDeprecated                 sql.NullString    `json:"name__deprecated"`
	DescriptionDeprecated          sql.NullString    `json:"description__deprecated"`
	CollectorsNote                 sql.NullString    `json:"collectors_note"`
	TokenUriDeprecated             sql.NullString    `json:"token_uri__deprecated"`
	TokenTypeDeprecated            sql.NullString    `json:"token_type__deprecated"`
	TokenID                        persist.TokenID   `json:"token_id"`
	Quantity                       persist.HexString `json:"quantity"`
	OwnershipHistoryDeprecated     []pgtype.JSONB    `json:"ownership_history__deprecated"`
	ExternalUrlDeprecated          sql.NullString    `json:"external_url__deprecated"`
	BlockNumber                    sql.NullInt64     `json:"block_number"`
	OwnerUserID                    persist.DBID      `json:"owner_user_id"`
	OwnedByWallets                 persist.DBIDList  `json:"owned_by_wallets"`
	Chain                          persist.Chain     `json:"chain"`
	ContractID                     persist.DBID      `json:"contract_id"`
	IsUserMarkedSpam               sql.NullBool      `json:"is_user_marked_spam"`
	IsProviderMarkedSpamDeprecated sql.NullBool      `json:"is_provider_marked_spam__deprecated"`
	LastSynced                     time.Time         `json:"last_synced"`
	FallbackMediaDeprecated        pgtype.JSONB      `json:"fallback_media__deprecated"`
	TokenMediaIDDeprecated         sql.NullString    `json:"token_media_id__deprecated"`
	IsCreatorToken                 bool              `json:"is_creator_token"`
	IsHolderToken                  bool              `json:"is_holder_token"`
	Displayable                    bool              `json:"displayable"`
	TokenDefinitionID              persist.DBID      `json:"token_definition_id"`
	ID_2                           persist.DBID      `json:"id_2"`
	Deleted_2                      bool              `json:"deleted_2"`
	Version_2                      sql.NullInt32     `json:"version_2"`
	CreatedAt_2                    time.Time         `json:"created_at_2"`
	LastUpdated_2                  time.Time         `json:"last_updated_2"`
	Name                           sql.NullString    `json:"name"`
	Symbol                         sql.NullString    `json:"symbol"`
	Address                        persist.Address   `json:"address"`
	CreatorAddress                 persist.Address   `json:"creator_address"`
	Chain_2                        persist.Chain     `json:"chain_2"`
	ProfileBannerUrl               sql.NullString    `json:"profile_banner_url"`
	ProfileImageUrl                sql.NullString    `json:"profile_image_url"`
	BadgeUrl                       sql.NullString    `json:"badge_url"`
	Description                    sql.NullString    `json:"description"`
	OwnerAddress                   persist.Address   `json:"owner_address"`
	IsProviderMarkedSpam           bool              `json:"is_provider_marked_spam"`
	ParentID                       persist.DBID      `json:"parent_id"`
	OverrideCreatorUserID          persist.DBID      `json:"override_creator_user_id"`
	WalletAddress                  persist.Address   `json:"wallet_address"`
}

func (q *Queries) GetMissingThumbnailTokensByIDRange(ctx context.Context, arg GetMissingThumbnailTokensByIDRangeParams) ([]GetMissingThumbnailTokensByIDRangeRow, error) {
	rows, err := q.db.Query(ctx, getMissingThumbnailTokensByIDRange, arg.StartID, arg.EndID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMissingThumbnailTokensByIDRangeRow
	for rows.Next() {
		var i GetMissingThumbnailTokensByIDRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.NameDeprecated,
			&i.DescriptionDeprecated,
			&i.CollectorsNote,
			&i.TokenUriDeprecated,
			&i.TokenTypeDeprecated,
			&i.TokenID,
			&i.Quantity,
			&i.OwnershipHistoryDeprecated,
			&i.ExternalUrlDeprecated,
			&i.BlockNumber,
			&i.OwnerUserID,
			&i.OwnedByWallets,
			&i.Chain,
			&i.ContractID,
			&i.IsUserMarkedSpam,
			&i.IsProviderMarkedSpamDeprecated,
			&i.LastSynced,
			&i.FallbackMediaDeprecated,
			&i.TokenMediaIDDeprecated,
			&i.IsCreatorToken,
			&i.IsHolderToken,
			&i.Displayable,
			&i.TokenDefinitionID,
			&i.ID_2,
			&i.Deleted_2,
			&i.Version_2,
			&i.CreatedAt_2,
			&i.LastUpdated_2,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain_2,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
			&i.OwnerAddress,
			&i.IsProviderMarkedSpam,
			&i.ParentID,
			&i.OverrideCreatorUserID,
			&i.WalletAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMostRecentNotificationByOwnerIDForAction = `-- name: GetMostRecentNotificationByOwnerIDForAction :one
select id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id from notifications
    where owner_id = $1
    and action = $2
    and deleted = false
    and (not $5::bool or feed_event_id = $3)
    and (not $6::bool or post_id = $4)
    order by created_at desc
    limit 1
`

type GetMostRecentNotificationByOwnerIDForActionParams struct {
	OwnerID          persist.DBID   `json:"owner_id"`
	Action           persist.Action `json:"action"`
	FeedEventID      persist.DBID   `json:"feed_event_id"`
	PostID           persist.DBID   `json:"post_id"`
	OnlyForFeedEvent bool           `json:"only_for_feed_event"`
	OnlyForPost      bool           `json:"only_for_post"`
}

func (q *Queries) GetMostRecentNotificationByOwnerIDForAction(ctx context.Context, arg GetMostRecentNotificationByOwnerIDForActionParams) (Notification, error) {
	row := q.db.QueryRow(ctx, getMostRecentNotificationByOwnerIDForAction,
		arg.OwnerID,
		arg.Action,
		arg.FeedEventID,
		arg.PostID,
		arg.OnlyForFeedEvent,
		arg.OnlyForPost,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
		&i.PostID,
		&i.TokenID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const getMostRecentNotificationByOwnerIDTokenIDForAction = `-- name: GetMostRecentNotificationByOwnerIDTokenIDForAction :one
select id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id from notifications
    where owner_id = $1
    and token_id = $2
    and action = $3
    and deleted = false
    and (not $6::bool or feed_event_id = $4)
    and (not $7::bool or post_id = $5)
    order by created_at desc
    limit 1
`

type GetMostRecentNotificationByOwnerIDTokenIDForActionParams struct {
	OwnerID          persist.DBID   `json:"owner_id"`
	TokenID          persist.DBID   `json:"token_id"`
	Action           persist.Action `json:"action"`
	FeedEventID      persist.DBID   `json:"feed_event_id"`
	PostID           persist.DBID   `json:"post_id"`
	OnlyForFeedEvent bool           `json:"only_for_feed_event"`
	OnlyForPost      bool           `json:"only_for_post"`
}

func (q *Queries) GetMostRecentNotificationByOwnerIDTokenIDForAction(ctx context.Context, arg GetMostRecentNotificationByOwnerIDTokenIDForActionParams) (Notification, error) {
	row := q.db.QueryRow(ctx, getMostRecentNotificationByOwnerIDTokenIDForAction,
		arg.OwnerID,
		arg.TokenID,
		arg.Action,
		arg.FeedEventID,
		arg.PostID,
		arg.OnlyForFeedEvent,
		arg.OnlyForPost,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
		&i.PostID,
		&i.TokenID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id FROM notifications WHERE id = $1 AND deleted = false
`

func (q *Queries) GetNotificationByID(ctx context.Context, id persist.DBID) (Notification, error) {
	row := q.db.QueryRow(ctx, getNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.OwnerID,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Action,
		&i.Data,
		&i.EventIds,
		&i.FeedEventID,
		&i.CommentID,
		&i.GalleryID,
		&i.Seen,
		&i.Amount,
		&i.PostID,
		&i.TokenID,
		&i.ContractID,
		&i.MentionID,
	)
	return i, err
}

const getNotificationsByOwnerIDForActionAfter = `-- name: GetNotificationsByOwnerIDForActionAfter :many
SELECT id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id FROM notifications
    WHERE owner_id = $1 AND action = $2 AND deleted = false AND created_at > $3
    ORDER BY created_at DESC
`

type GetNotificationsByOwnerIDForActionAfterParams struct {
	OwnerID      persist.DBID   `json:"owner_id"`
	Action       persist.Action `json:"action"`
	CreatedAfter time.Time      `json:"created_after"`
}

func (q *Queries) GetNotificationsByOwnerIDForActionAfter(ctx context.Context, arg GetNotificationsByOwnerIDForActionAfterParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getNotificationsByOwnerIDForActionAfter, arg.OwnerID, arg.Action, arg.CreatedAfter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerID,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Action,
			&i.Data,
			&i.EventIds,
			&i.FeedEventID,
			&i.CommentID,
			&i.GalleryID,
			&i.Seen,
			&i.Amount,
			&i.PostID,
			&i.TokenID,
			&i.ContractID,
			&i.MentionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT id, version, token_ids, contract_ids, actor_id, caption, created_at, last_updated, deleted FROM posts WHERE id = $1 AND deleted = false
`

func (q *Queries) GetPostByID(ctx context.Context, id persist.DBID) (Post, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.TokenIds,
		&i.ContractIds,
		&i.ActorID,
		&i.Caption,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Deleted,
	)
	return i, err
}

const getPostsByIds = `-- name: GetPostsByIds :many
select posts.id, posts.version, posts.token_ids, posts.contract_ids, posts.actor_id, posts.caption, posts.created_at, posts.last_updated, posts.deleted
from posts
join unnest($1::varchar(255)[]) with ordinality t(id, pos) using(id)
where not posts.deleted
order by pos asc
`

func (q *Queries) GetPostsByIds(ctx context.Context, postIds []string) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPostsByIds, postIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.TokenIds,
			&i.ContractIds,
			&i.ActorID,
			&i.Caption,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPotentialENSProfileImageByUserId = `-- name: GetPotentialENSProfileImageByUserId :one
select token_definitions.id, token_definitions.created_at, token_definitions.last_updated, token_definitions.deleted, token_definitions.name, token_definitions.description, token_definitions.token_type, token_definitions.token_id, token_definitions.external_url, token_definitions.chain, token_definitions.is_provider_marked_spam, token_definitions.metadata, token_definitions.fallback_media, token_definitions.contract_address, token_definitions.contract_id, token_definitions.token_media_id, token_medias.id, token_medias.created_at, token_medias.last_updated, token_medias.version, token_medias.contract_id__deprecated, token_medias.token_id__deprecated, token_medias.chain__deprecated, token_medias.active, token_medias.metadata__deprecated, token_medias.media, token_medias.name__deprecated, token_medias.description__deprecated, token_medias.processing_job_id, token_medias.deleted, wallets.id, wallets.created_at, wallets.last_updated, wallets.deleted, wallets.version, wallets.address, wallets.wallet_type, wallets.chain
from token_definitions, tokens, contracts, users, token_medias, wallets, unnest(tokens.owned_by_wallets) tw(id)
where contracts.address = $1
    and contracts.chain = $2
    and tokens.owner_user_id = $3
    and users.id = tokens.owner_user_id
    and tw.id = wallets.id
    and token_definitions.id = tokens.token_definition_id
    and tokens_definitions.contract_id = contracts.id
    and token_definitions.token_media_id = token_medias.id
    and token_medias.active
    and nullif(token_medias.media->>'profile_image_url', '') is not null
    and not contracts.deleted
    and not users.deleted
    and not token_medias.deleted
    and not wallets.deleted
    and not token_definitions.deleted
order by tw.id = users.primary_wallet_id desc, tokens.id desc
limit 1
`

type GetPotentialENSProfileImageByUserIdParams struct {
	EnsAddress persist.Address `json:"ens_address"`
	Chain      persist.Chain   `json:"chain"`
	UserID     persist.DBID    `json:"user_id"`
}

type GetPotentialENSProfileImageByUserIdRow struct {
	TokenDefinition TokenDefinition `json:"tokendefinition"`
	TokenMedia      TokenMedia      `json:"tokenmedia"`
	Wallet          Wallet          `json:"wallet"`
}

func (q *Queries) GetPotentialENSProfileImageByUserId(ctx context.Context, arg GetPotentialENSProfileImageByUserIdParams) (GetPotentialENSProfileImageByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getPotentialENSProfileImageByUserId, arg.EnsAddress, arg.Chain, arg.UserID)
	var i GetPotentialENSProfileImageByUserIdRow
	err := row.Scan(
		&i.TokenDefinition.ID,
		&i.TokenDefinition.CreatedAt,
		&i.TokenDefinition.LastUpdated,
		&i.TokenDefinition.Deleted,
		&i.TokenDefinition.Name,
		&i.TokenDefinition.Description,
		&i.TokenDefinition.TokenType,
		&i.TokenDefinition.TokenID,
		&i.TokenDefinition.ExternalUrl,
		&i.TokenDefinition.Chain,
		&i.TokenDefinition.IsProviderMarkedSpam,
		&i.TokenDefinition.Metadata,
		&i.TokenDefinition.FallbackMedia,
		&i.TokenDefinition.ContractAddress,
		&i.TokenDefinition.ContractID,
		&i.TokenDefinition.TokenMediaID,
		&i.TokenMedia.ID,
		&i.TokenMedia.CreatedAt,
		&i.TokenMedia.LastUpdated,
		&i.TokenMedia.Version,
		&i.TokenMedia.ContractIDDeprecated,
		&i.TokenMedia.TokenIDDeprecated,
		&i.TokenMedia.ChainDeprecated,
		&i.TokenMedia.Active,
		&i.TokenMedia.MetadataDeprecated,
		&i.TokenMedia.Media,
		&i.TokenMedia.NameDeprecated,
		&i.TokenMedia.DescriptionDeprecated,
		&i.TokenMedia.ProcessingJobID,
		&i.TokenMedia.Deleted,
		&i.Wallet.ID,
		&i.Wallet.CreatedAt,
		&i.Wallet.LastUpdated,
		&i.Wallet.Deleted,
		&i.Wallet.Version,
		&i.Wallet.Address,
		&i.Wallet.WalletType,
		&i.Wallet.Chain,
	)
	return i, err
}

const getPreviewURLsByContractIdAndUserId = `-- name: GetPreviewURLsByContractIdAndUserId :many
select coalesce(nullif(tm.media->>'thumbnail_url', ''), nullif(tm.media->>'media_url', ''))::varchar as thumbnail_url
    from tokens t
        inner join token_medias tm on t.token_media_id = tm.id
    where t.contract_id = $1
      and t.owner_user_id = $2
      and t.displayable
      and t.deleted = false
      and (tm.media ->> 'thumbnail_url' != '' or tm.media->>'media_type' = 'image')
      and tm.deleted = false
    order by t.id limit 3
`

type GetPreviewURLsByContractIdAndUserIdParams struct {
	ContractID  persist.DBID `json:"contract_id"`
	OwnerUserID persist.DBID `json:"owner_user_id"`
}

func (q *Queries) GetPreviewURLsByContractIdAndUserId(ctx context.Context, arg GetPreviewURLsByContractIdAndUserIdParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getPreviewURLsByContractIdAndUserId, arg.ContractID, arg.OwnerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var thumbnail_url string
		if err := rows.Scan(&thumbnail_url); err != nil {
			return nil, err
		}
		items = append(items, thumbnail_url)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPushTokenByPushToken = `-- name: GetPushTokenByPushToken :one
select id, user_id, push_token, created_at, deleted from push_notification_tokens where push_token = $1 and deleted = false
`

func (q *Queries) GetPushTokenByPushToken(ctx context.Context, pushToken string) (PushNotificationToken, error) {
	row := q.db.QueryRow(ctx, getPushTokenByPushToken, pushToken)
	var i PushNotificationToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PushToken,
		&i.CreatedAt,
		&i.Deleted,
	)
	return i, err
}

const getPushTokensByIDs = `-- name: GetPushTokensByIDs :many
select t.id, t.user_id, t.push_token, t.created_at, t.deleted from unnest($1::text[]) ids join push_notification_tokens t on t.id = ids and t.deleted = false
`

func (q *Queries) GetPushTokensByIDs(ctx context.Context, ids []string) ([]PushNotificationToken, error) {
	rows, err := q.db.Query(ctx, getPushTokensByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PushNotificationToken
	for rows.Next() {
		var i PushNotificationToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PushToken,
			&i.CreatedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPushTokensByUserID = `-- name: GetPushTokensByUserID :many
select id, user_id, push_token, created_at, deleted from push_notification_tokens where user_id = $1 and deleted = false
`

func (q *Queries) GetPushTokensByUserID(ctx context.Context, userID persist.DBID) ([]PushNotificationToken, error) {
	rows, err := q.db.Query(ctx, getPushTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PushNotificationToken
	for rows.Next() {
		var i PushNotificationToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PushToken,
			&i.CreatedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentUnseenNotifications = `-- name: GetRecentUnseenNotifications :many
SELECT id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id FROM notifications WHERE owner_id = $1 AND deleted = false AND seen = false and created_at > $2 order by created_at desc limit $3
`

type GetRecentUnseenNotificationsParams struct {
	OwnerID      persist.DBID `json:"owner_id"`
	CreatedAfter time.Time    `json:"created_after"`
	Lim          int32        `json:"lim"`
}

func (q *Queries) GetRecentUnseenNotifications(ctx context.Context, arg GetRecentUnseenNotificationsParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getRecentUnseenNotifications, arg.OwnerID, arg.CreatedAfter, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerID,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Action,
			&i.Data,
			&i.EventIds,
			&i.FeedEventID,
			&i.CommentID,
			&i.GalleryID,
			&i.Seen,
			&i.Amount,
			&i.PostID,
			&i.TokenID,
			&i.ContractID,
			&i.MentionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReprocessJobRangeByID = `-- name: GetReprocessJobRangeByID :one
select id, token_start_id, token_end_id from reprocess_jobs where id = $1
`

func (q *Queries) GetReprocessJobRangeByID(ctx context.Context, id int) (ReprocessJob, error) {
	row := q.db.QueryRow(ctx, getReprocessJobRangeByID, id)
	var i ReprocessJob
	err := row.Scan(&i.ID, &i.TokenStartID, &i.TokenEndID)
	return i, err
}

const getSVGTokensWithContractsByIDs = `-- name: GetSVGTokensWithContractsByIDs :many
SELECT
    tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name__deprecated, tokens.description__deprecated, tokens.collectors_note, tokens.token_uri__deprecated, tokens.token_type__deprecated, tokens.token_id, tokens.quantity, tokens.ownership_history__deprecated, tokens.external_url__deprecated, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain, tokens.contract_id, tokens.is_user_marked_spam, tokens.is_provider_marked_spam__deprecated, tokens.last_synced, tokens.fallback_media__deprecated, tokens.token_media_id__deprecated, tokens.is_creator_token, tokens.is_holder_token, tokens.displayable, tokens.token_definition_id,
    contracts.id, contracts.deleted, contracts.version, contracts.created_at, contracts.last_updated, contracts.name, contracts.symbol, contracts.address, contracts.creator_address, contracts.chain, contracts.profile_banner_url, contracts.profile_image_url, contracts.badge_url, contracts.description, contracts.owner_address, contracts.is_provider_marked_spam, contracts.parent_id, contracts.override_creator_user_id,
    (
        SELECT wallets.address
        FROM wallets
        WHERE wallets.id = ANY(tokens.owned_by_wallets) and wallets.deleted = false
        LIMIT 1
    ) AS wallet_address
FROM tokens
JOIN contracts ON contracts.id = tokens.contract
LEFT JOIN token_medias on token_medias.id = tokens.token_media_id
WHERE tokens.deleted = false
AND token_medias.active = true
AND token_medias.media->>'media_type' = 'svg'
AND tokens.id >= $1 AND tokens.id < $2
ORDER BY tokens.id
`

type GetSVGTokensWithContractsByIDsParams struct {
	StartID persist.DBID `json:"start_id"`
	EndID   persist.DBID `json:"end_id"`
}

type GetSVGTokensWithContractsByIDsRow struct {
	ID                             persist.DBID      `json:"id"`
	Deleted                        bool              `json:"deleted"`
	Version                        sql.NullInt32     `json:"version"`
	CreatedAt                      time.Time         `json:"created_at"`
	LastUpdated                    time.Time         `json:"last_updated"`
	NameDeprecated                 sql.NullString    `json:"name__deprecated"`
	DescriptionDeprecated          sql.NullString    `json:"description__deprecated"`
	CollectorsNote                 sql.NullString    `json:"collectors_note"`
	TokenUriDeprecated             sql.NullString    `json:"token_uri__deprecated"`
	TokenTypeDeprecated            sql.NullString    `json:"token_type__deprecated"`
	TokenID                        persist.TokenID   `json:"token_id"`
	Quantity                       persist.HexString `json:"quantity"`
	OwnershipHistoryDeprecated     []pgtype.JSONB    `json:"ownership_history__deprecated"`
	ExternalUrlDeprecated          sql.NullString    `json:"external_url__deprecated"`
	BlockNumber                    sql.NullInt64     `json:"block_number"`
	OwnerUserID                    persist.DBID      `json:"owner_user_id"`
	OwnedByWallets                 persist.DBIDList  `json:"owned_by_wallets"`
	Chain                          persist.Chain     `json:"chain"`
	ContractID                     persist.DBID      `json:"contract_id"`
	IsUserMarkedSpam               sql.NullBool      `json:"is_user_marked_spam"`
	IsProviderMarkedSpamDeprecated sql.NullBool      `json:"is_provider_marked_spam__deprecated"`
	LastSynced                     time.Time         `json:"last_synced"`
	FallbackMediaDeprecated        pgtype.JSONB      `json:"fallback_media__deprecated"`
	TokenMediaIDDeprecated         sql.NullString    `json:"token_media_id__deprecated"`
	IsCreatorToken                 bool              `json:"is_creator_token"`
	IsHolderToken                  bool              `json:"is_holder_token"`
	Displayable                    bool              `json:"displayable"`
	TokenDefinitionID              persist.DBID      `json:"token_definition_id"`
	ID_2                           persist.DBID      `json:"id_2"`
	Deleted_2                      bool              `json:"deleted_2"`
	Version_2                      sql.NullInt32     `json:"version_2"`
	CreatedAt_2                    time.Time         `json:"created_at_2"`
	LastUpdated_2                  time.Time         `json:"last_updated_2"`
	Name                           sql.NullString    `json:"name"`
	Symbol                         sql.NullString    `json:"symbol"`
	Address                        persist.Address   `json:"address"`
	CreatorAddress                 persist.Address   `json:"creator_address"`
	Chain_2                        persist.Chain     `json:"chain_2"`
	ProfileBannerUrl               sql.NullString    `json:"profile_banner_url"`
	ProfileImageUrl                sql.NullString    `json:"profile_image_url"`
	BadgeUrl                       sql.NullString    `json:"badge_url"`
	Description                    sql.NullString    `json:"description"`
	OwnerAddress                   persist.Address   `json:"owner_address"`
	IsProviderMarkedSpam           bool              `json:"is_provider_marked_spam"`
	ParentID                       persist.DBID      `json:"parent_id"`
	OverrideCreatorUserID          persist.DBID      `json:"override_creator_user_id"`
	WalletAddress                  persist.Address   `json:"wallet_address"`
}

func (q *Queries) GetSVGTokensWithContractsByIDs(ctx context.Context, arg GetSVGTokensWithContractsByIDsParams) ([]GetSVGTokensWithContractsByIDsRow, error) {
	rows, err := q.db.Query(ctx, getSVGTokensWithContractsByIDs, arg.StartID, arg.EndID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSVGTokensWithContractsByIDsRow
	for rows.Next() {
		var i GetSVGTokensWithContractsByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.NameDeprecated,
			&i.DescriptionDeprecated,
			&i.CollectorsNote,
			&i.TokenUriDeprecated,
			&i.TokenTypeDeprecated,
			&i.TokenID,
			&i.Quantity,
			&i.OwnershipHistoryDeprecated,
			&i.ExternalUrlDeprecated,
			&i.BlockNumber,
			&i.OwnerUserID,
			&i.OwnedByWallets,
			&i.Chain,
			&i.ContractID,
			&i.IsUserMarkedSpam,
			&i.IsProviderMarkedSpamDeprecated,
			&i.LastSynced,
			&i.FallbackMediaDeprecated,
			&i.TokenMediaIDDeprecated,
			&i.IsCreatorToken,
			&i.IsHolderToken,
			&i.Displayable,
			&i.TokenDefinitionID,
			&i.ID_2,
			&i.Deleted_2,
			&i.Version_2,
			&i.CreatedAt_2,
			&i.LastUpdated_2,
			&i.Name,
			&i.Symbol,
			&i.Address,
			&i.CreatorAddress,
			&i.Chain_2,
			&i.ProfileBannerUrl,
			&i.ProfileImageUrl,
			&i.BadgeUrl,
			&i.Description,
			&i.OwnerAddress,
			&i.IsProviderMarkedSpam,
			&i.ParentID,
			&i.OverrideCreatorUserID,
			&i.WalletAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSocialAuthByUserID = `-- name: GetSocialAuthByUserID :one
select id, deleted, version, created_at, last_updated, user_id, provider, access_token, refresh_token from pii.socials_auth where user_id = $1 and provider = $2 and deleted = false
`

type GetSocialAuthByUserIDParams struct {
	UserID   persist.DBID           `json:"user_id"`
	Provider persist.SocialProvider `json:"provider"`
}

func (q *Queries) GetSocialAuthByUserID(ctx context.Context, arg GetSocialAuthByUserIDParams) (PiiSocialsAuth, error) {
	row := q.db.QueryRow(ctx, getSocialAuthByUserID, arg.UserID, arg.Provider)
	var i PiiSocialsAuth
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.UserID,
		&i.Provider,
		&i.AccessToken,
		&i.RefreshToken,
	)
	return i, err
}

const getSocialConnections = `-- name: GetSocialConnections :many
select s.social_id, s.social_username, s.social_displayname, s.social_profile_image, user_view.id as user_id, user_view.created_at as user_created_at, (f.id is not null)::bool as already_following
from (select unnest($1::varchar[]) as social_id, unnest($2::varchar[]) as social_username, unnest($3::varchar[]) as social_displayname, unnest($4::varchar[]) as social_profile_image) as s
    inner join pii.user_view on user_view.pii_socials->$5::text->>'id'::varchar = s.social_id and user_view.deleted = false
    left outer join follows f on f.follower = $6 and f.followee = user_view.id and f.deleted = false
where case when $7::bool then f.id is null else true end
order by (f.id is not null,user_view.created_at,user_view.id)
`

type GetSocialConnectionsParams struct {
	SocialIds           []string     `json:"social_ids"`
	SocialUsernames     []string     `json:"social_usernames"`
	SocialDisplaynames  []string     `json:"social_displaynames"`
	SocialProfileImages []string     `json:"social_profile_images"`
	Social              string       `json:"social"`
	UserID              persist.DBID `json:"user_id"`
	OnlyUnfollowing     bool         `json:"only_unfollowing"`
}

type GetSocialConnectionsRow struct {
	SocialID           interface{}  `json:"social_id"`
	SocialUsername     interface{}  `json:"social_username"`
	SocialDisplayname  interface{}  `json:"social_displayname"`
	SocialProfileImage interface{}  `json:"social_profile_image"`
	UserID             persist.DBID `json:"user_id"`
	UserCreatedAt      time.Time    `json:"user_created_at"`
	AlreadyFollowing   bool         `json:"already_following"`
}

func (q *Queries) GetSocialConnections(ctx context.Context, arg GetSocialConnectionsParams) ([]GetSocialConnectionsRow, error) {
	rows, err := q.db.Query(ctx, getSocialConnections,
		arg.SocialIds,
		arg.SocialUsernames,
		arg.SocialDisplaynames,
		arg.SocialProfileImages,
		arg.Social,
		arg.UserID,
		arg.OnlyUnfollowing,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSocialConnectionsRow
	for rows.Next() {
		var i GetSocialConnectionsRow
		if err := rows.Scan(
			&i.SocialID,
			&i.SocialUsername,
			&i.SocialDisplayname,
			&i.SocialProfileImage,
			&i.UserID,
			&i.UserCreatedAt,
			&i.AlreadyFollowing,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSocialConnectionsPaginate = `-- name: GetSocialConnectionsPaginate :many
select s.social_id, s.social_username, s.social_displayname, s.social_profile_image, user_view.id as user_id, user_view.created_at as user_created_at, (f.id is not null)::bool as already_following
from (select unnest($2::varchar[]) as social_id, unnest($3::varchar[]) as social_username, unnest($4::varchar[]) as social_displayname, unnest($5::varchar[]) as social_profile_image) as s
    inner join pii.user_view on user_view.pii_socials->$6::text->>'id'::varchar = s.social_id and user_view.deleted = false
    left outer join follows f on f.follower = $7 and f.followee = user_view.id and f.deleted = false
where case when $8::bool then f.id is null else true end
    and (f.id is not null,user_view.created_at,user_view.id) < ($9::bool, $10::timestamptz, $11)
    and (f.id is not null,user_view.created_at,user_view.id) > ($12::bool, $13::timestamptz, $14)
order by case when $15::bool then (f.id is not null,user_view.created_at,user_view.id) end asc,
    case when not $15::bool then (f.id is not null,user_view.created_at,user_view.id) end desc
limit $1
`

type GetSocialConnectionsPaginateParams struct {
	Limit               int32        `json:"limit"`
	SocialIds           []string     `json:"social_ids"`
	SocialUsernames     []string     `json:"social_usernames"`
	SocialDisplaynames  []string     `json:"social_displaynames"`
	SocialProfileImages []string     `json:"social_profile_images"`
	Social              string       `json:"social"`
	UserID              persist.DBID `json:"user_id"`
	OnlyUnfollowing     bool         `json:"only_unfollowing"`
	CurBeforeFollowing  bool         `json:"cur_before_following"`
	CurBeforeTime       time.Time    `json:"cur_before_time"`
	CurBeforeID         persist.DBID `json:"cur_before_id"`
	CurAfterFollowing   bool         `json:"cur_after_following"`
	CurAfterTime        time.Time    `json:"cur_after_time"`
	CurAfterID          persist.DBID `json:"cur_after_id"`
	PagingForward       bool         `json:"paging_forward"`
}

type GetSocialConnectionsPaginateRow struct {
	SocialID           interface{}  `json:"social_id"`
	SocialUsername     interface{}  `json:"social_username"`
	SocialDisplayname  interface{}  `json:"social_displayname"`
	SocialProfileImage interface{}  `json:"social_profile_image"`
	UserID             persist.DBID `json:"user_id"`
	UserCreatedAt      time.Time    `json:"user_created_at"`
	AlreadyFollowing   bool         `json:"already_following"`
}

// this query will take in enoug info to create a sort of fake table of social accounts matching them up to users in gallery with twitter connected.
// it will also go and search for whether the specified user follows any of the users returned
func (q *Queries) GetSocialConnectionsPaginate(ctx context.Context, arg GetSocialConnectionsPaginateParams) ([]GetSocialConnectionsPaginateRow, error) {
	rows, err := q.db.Query(ctx, getSocialConnectionsPaginate,
		arg.Limit,
		arg.SocialIds,
		arg.SocialUsernames,
		arg.SocialDisplaynames,
		arg.SocialProfileImages,
		arg.Social,
		arg.UserID,
		arg.OnlyUnfollowing,
		arg.CurBeforeFollowing,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterFollowing,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSocialConnectionsPaginateRow
	for rows.Next() {
		var i GetSocialConnectionsPaginateRow
		if err := rows.Scan(
			&i.SocialID,
			&i.SocialUsername,
			&i.SocialDisplayname,
			&i.SocialProfileImage,
			&i.UserID,
			&i.UserCreatedAt,
			&i.AlreadyFollowing,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSocialsByUserID = `-- name: GetSocialsByUserID :one
select pii_socials from pii.user_view where id = $1
`

func (q *Queries) GetSocialsByUserID(ctx context.Context, id persist.DBID) (persist.Socials, error) {
	row := q.db.QueryRow(ctx, getSocialsByUserID, id)
	var pii_socials persist.Socials
	err := row.Scan(&pii_socials)
	return pii_socials, err
}

const getTokenById = `-- name: GetTokenById :one
select id, deleted, version, created_at, last_updated, name__deprecated, description__deprecated, collectors_note, token_uri__deprecated, token_type__deprecated, token_id, quantity, ownership_history__deprecated, external_url__deprecated, block_number, owner_user_id, owned_by_wallets, chain, contract_id, is_user_marked_spam, is_provider_marked_spam__deprecated, last_synced, fallback_media__deprecated, token_media_id__deprecated, is_creator_token, is_holder_token, displayable, token_definition_id from tokens where id = $1 and displayable and deleted = false
`

func (q *Queries) GetTokenById(ctx context.Context, id persist.DBID) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenById, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.NameDeprecated,
		&i.DescriptionDeprecated,
		&i.CollectorsNote,
		&i.TokenUriDeprecated,
		&i.TokenTypeDeprecated,
		&i.TokenID,
		&i.Quantity,
		&i.OwnershipHistoryDeprecated,
		&i.ExternalUrlDeprecated,
		&i.BlockNumber,
		&i.OwnerUserID,
		&i.OwnedByWallets,
		&i.Chain,
		&i.ContractID,
		&i.IsUserMarkedSpam,
		&i.IsProviderMarkedSpamDeprecated,
		&i.LastSynced,
		&i.FallbackMediaDeprecated,
		&i.TokenMediaIDDeprecated,
		&i.IsCreatorToken,
		&i.IsHolderToken,
		&i.Displayable,
		&i.TokenDefinitionID,
	)
	return i, err
}

const getTokenByTokenIdentifiers = `-- name: GetTokenByTokenIdentifiers :one
select id, deleted, version, created_at, last_updated, name__deprecated, description__deprecated, collectors_note, token_uri__deprecated, token_type__deprecated, token_id, quantity, ownership_history__deprecated, external_url__deprecated, block_number, owner_user_id, owned_by_wallets, chain, contract_id, is_user_marked_spam, is_provider_marked_spam__deprecated, last_synced, fallback_media__deprecated, token_media_id__deprecated, is_creator_token, is_holder_token, displayable, token_definition_id from tokens
    where tokens.token_id = $1
      and contract = (select contracts.id from contracts where contracts.address = $2)
      and tokens.chain = $3 and tokens.deleted = false
      and tokens.displayable
`

type GetTokenByTokenIdentifiersParams struct {
	TokenHex        persist.TokenID `json:"token_hex"`
	ContractAddress persist.Address `json:"contract_address"`
	Chain           persist.Chain   `json:"chain"`
}

func (q *Queries) GetTokenByTokenIdentifiers(ctx context.Context, arg GetTokenByTokenIdentifiersParams) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenByTokenIdentifiers, arg.TokenHex, arg.ContractAddress, arg.Chain)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.NameDeprecated,
		&i.DescriptionDeprecated,
		&i.CollectorsNote,
		&i.TokenUriDeprecated,
		&i.TokenTypeDeprecated,
		&i.TokenID,
		&i.Quantity,
		&i.OwnershipHistoryDeprecated,
		&i.ExternalUrlDeprecated,
		&i.BlockNumber,
		&i.OwnerUserID,
		&i.OwnedByWallets,
		&i.Chain,
		&i.ContractID,
		&i.IsUserMarkedSpam,
		&i.IsProviderMarkedSpamDeprecated,
		&i.LastSynced,
		&i.FallbackMediaDeprecated,
		&i.TokenMediaIDDeprecated,
		&i.IsCreatorToken,
		&i.IsHolderToken,
		&i.Displayable,
		&i.TokenDefinitionID,
	)
	return i, err
}

const getTokenByUserTokenIdentifiers = `-- name: GetTokenByUserTokenIdentifiers :one

select t.id, t.deleted, t.version, t.created_at, t.last_updated, t.name__deprecated, t.description__deprecated, t.collectors_note, t.token_uri__deprecated, t.token_type__deprecated, t.token_id, t.quantity, t.ownership_history__deprecated, t.external_url__deprecated, t.block_number, t.owner_user_id, t.owned_by_wallets, t.chain, t.contract_id, t.is_user_marked_spam, t.is_provider_marked_spam__deprecated, t.last_synced, t.fallback_media__deprecated, t.token_media_id__deprecated, t.is_creator_token, t.is_holder_token, t.displayable, t.token_definition_id
from tokens t
join contracts c on t.contract = c.id
where t.owner_user_id = $1 and t.token_id = $2 and c.address = $3 and c.chain = $4 and t.displayable and not t.deleted and not c.deleted
`

type GetTokenByUserTokenIdentifiersParams struct {
	OwnerID         persist.DBID    `json:"owner_id"`
	TokenID         persist.TokenID `json:"token_id"`
	ContractAddress persist.Address `json:"contract_address"`
	Chain           persist.Chain   `json:"chain"`
}

// XXX select t.*
// XXX from tokens t
// XXX join contracts c on t.contract = c.id
// XXX where t.owner_user_id = @owner_id and t.token_id = @token_id and c.address = @contract_address and c.chain = @chain and t.displayable and not t.deleted and not c.deleted;
func (q *Queries) GetTokenByUserTokenIdentifiers(ctx context.Context, arg GetTokenByUserTokenIdentifiersParams) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenByUserTokenIdentifiers,
		arg.OwnerID,
		arg.TokenID,
		arg.ContractAddress,
		arg.Chain,
	)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.NameDeprecated,
		&i.DescriptionDeprecated,
		&i.CollectorsNote,
		&i.TokenUriDeprecated,
		&i.TokenTypeDeprecated,
		&i.TokenID,
		&i.Quantity,
		&i.OwnershipHistoryDeprecated,
		&i.ExternalUrlDeprecated,
		&i.BlockNumber,
		&i.OwnerUserID,
		&i.OwnedByWallets,
		&i.Chain,
		&i.ContractID,
		&i.IsUserMarkedSpam,
		&i.IsProviderMarkedSpamDeprecated,
		&i.LastSynced,
		&i.FallbackMediaDeprecated,
		&i.TokenMediaIDDeprecated,
		&i.IsCreatorToken,
		&i.IsHolderToken,
		&i.Displayable,
		&i.TokenDefinitionID,
	)
	return i, err
}

const getTokenDefinitionAndMediaByTokenIdentifiers = `-- name: GetTokenDefinitionAndMediaByTokenIdentifiers :one
select token_definitions.id, token_definitions.created_at, token_definitions.last_updated, token_definitions.deleted, token_definitions.name, token_definitions.description, token_definitions.token_type, token_definitions.token_id, token_definitions.external_url, token_definitions.chain, token_definitions.is_provider_marked_spam, token_definitions.metadata, token_definitions.fallback_media, token_definitions.contract_address, token_definitions.contract_id, token_definitions.token_media_id, token_medias.id, token_medias.created_at, token_medias.last_updated, token_medias.version, token_medias.contract_id__deprecated, token_medias.token_id__deprecated, token_medias.chain__deprecated, token_medias.active, token_medias.metadata__deprecated, token_medias.media, token_medias.name__deprecated, token_medias.description__deprecated, token_medias.processing_job_id, token_medias.deleted
from token_definitions, token_medias
where token_definitions.chain = $1
    and contract_id = (
        select contract.id
        from contracts
        where contracts.address = $2 and not contracts.deleted
    )
    and token_definitions.token_id = $3
    and not token_definitions.deleted
    and not token_medias.deleted
`

type GetTokenDefinitionAndMediaByTokenIdentifiersParams struct {
	Chain           persist.Chain   `json:"chain"`
	ContractAddress persist.Address `json:"contract_address"`
	TokenID         persist.TokenID `json:"token_id"`
}

type GetTokenDefinitionAndMediaByTokenIdentifiersRow struct {
	TokenDefinition TokenDefinition `json:"tokendefinition"`
	TokenMedia      TokenMedia      `json:"tokenmedia"`
}

// XXX: Could be an extra query
func (q *Queries) GetTokenDefinitionAndMediaByTokenIdentifiers(ctx context.Context, arg GetTokenDefinitionAndMediaByTokenIdentifiersParams) (GetTokenDefinitionAndMediaByTokenIdentifiersRow, error) {
	row := q.db.QueryRow(ctx, getTokenDefinitionAndMediaByTokenIdentifiers, arg.Chain, arg.ContractAddress, arg.TokenID)
	var i GetTokenDefinitionAndMediaByTokenIdentifiersRow
	err := row.Scan(
		&i.TokenDefinition.ID,
		&i.TokenDefinition.CreatedAt,
		&i.TokenDefinition.LastUpdated,
		&i.TokenDefinition.Deleted,
		&i.TokenDefinition.Name,
		&i.TokenDefinition.Description,
		&i.TokenDefinition.TokenType,
		&i.TokenDefinition.TokenID,
		&i.TokenDefinition.ExternalUrl,
		&i.TokenDefinition.Chain,
		&i.TokenDefinition.IsProviderMarkedSpam,
		&i.TokenDefinition.Metadata,
		&i.TokenDefinition.FallbackMedia,
		&i.TokenDefinition.ContractAddress,
		&i.TokenDefinition.ContractID,
		&i.TokenDefinition.TokenMediaID,
		&i.TokenMedia.ID,
		&i.TokenMedia.CreatedAt,
		&i.TokenMedia.LastUpdated,
		&i.TokenMedia.Version,
		&i.TokenMedia.ContractIDDeprecated,
		&i.TokenMedia.TokenIDDeprecated,
		&i.TokenMedia.ChainDeprecated,
		&i.TokenMedia.Active,
		&i.TokenMedia.MetadataDeprecated,
		&i.TokenMedia.Media,
		&i.TokenMedia.NameDeprecated,
		&i.TokenMedia.DescriptionDeprecated,
		&i.TokenMedia.ProcessingJobID,
		&i.TokenMedia.Deleted,
	)
	return i, err
}

const getTokenDefinitionById = `-- name: GetTokenDefinitionById :one
select id, created_at, last_updated, deleted, name, description, token_type, token_id, external_url, chain, is_provider_marked_spam, metadata, fallback_media, contract_address, contract_id, token_media_id from token_definitions where id = $1 and not deleted
`

func (q *Queries) GetTokenDefinitionById(ctx context.Context, id persist.DBID) (TokenDefinition, error) {
	row := q.db.QueryRow(ctx, getTokenDefinitionById, id)
	var i TokenDefinition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.Name,
		&i.Description,
		&i.TokenType,
		&i.TokenID,
		&i.ExternalUrl,
		&i.Chain,
		&i.IsProviderMarkedSpam,
		&i.Metadata,
		&i.FallbackMedia,
		&i.ContractAddress,
		&i.ContractID,
		&i.TokenMediaID,
	)
	return i, err
}

const getTokenDefinitionByTokenDbid = `-- name: GetTokenDefinitionByTokenDbid :one
select token_definitions.id, token_definitions.created_at, token_definitions.last_updated, token_definitions.deleted, token_definitions.name, token_definitions.description, token_definitions.token_type, token_definitions.token_id, token_definitions.external_url, token_definitions.chain, token_definitions.is_provider_marked_spam, token_definitions.metadata, token_definitions.fallback_media, token_definitions.contract_address, token_definitions.contract_id, token_definitions.token_media_id
from token_definitions, tokens
where token_definitions.id = tokens.token_definition_id
    and tokens.id = $1
    and not tokens.deleted
    and not token_definitions.deleted
`

func (q *Queries) GetTokenDefinitionByTokenDbid(ctx context.Context, id persist.DBID) (TokenDefinition, error) {
	row := q.db.QueryRow(ctx, getTokenDefinitionByTokenDbid, id)
	var i TokenDefinition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.Name,
		&i.Description,
		&i.TokenType,
		&i.TokenID,
		&i.ExternalUrl,
		&i.Chain,
		&i.IsProviderMarkedSpam,
		&i.Metadata,
		&i.FallbackMedia,
		&i.ContractAddress,
		&i.ContractID,
		&i.TokenMediaID,
	)
	return i, err
}

const getTokenDefinitionByTokenIdentifiers = `-- name: GetTokenDefinitionByTokenIdentifiers :one
select id, created_at, last_updated, deleted, name, description, token_type, token_id, external_url, chain, is_provider_marked_spam, metadata, fallback_media, contract_address, contract_id, token_media_id
from token_definitions
where token_definitions.chain = $1
    and contract_id = (
        select contract.id
        from contracts
        where contracts.address = $2 and not contracts.deleted
    )
    and token_definitions.token_id = $3
    and not token_definitions.deleted
`

type GetTokenDefinitionByTokenIdentifiersParams struct {
	Chain           persist.Chain   `json:"chain"`
	ContractAddress persist.Address `json:"contract_address"`
	TokenID         persist.TokenID `json:"token_id"`
}

func (q *Queries) GetTokenDefinitionByTokenIdentifiers(ctx context.Context, arg GetTokenDefinitionByTokenIdentifiersParams) (TokenDefinition, error) {
	row := q.db.QueryRow(ctx, getTokenDefinitionByTokenIdentifiers, arg.Chain, arg.ContractAddress, arg.TokenID)
	var i TokenDefinition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.Name,
		&i.Description,
		&i.TokenType,
		&i.TokenID,
		&i.ExternalUrl,
		&i.Chain,
		&i.IsProviderMarkedSpam,
		&i.Metadata,
		&i.FallbackMedia,
		&i.ContractAddress,
		&i.ContractID,
		&i.TokenMediaID,
	)
	return i, err
}

const getTokenFullDetailsByContractId = `-- name: GetTokenFullDetailsByContractId :many
select tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name__deprecated, tokens.description__deprecated, tokens.collectors_note, tokens.token_uri__deprecated, tokens.token_type__deprecated, tokens.token_id, tokens.quantity, tokens.ownership_history__deprecated, tokens.external_url__deprecated, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain, tokens.contract_id, tokens.is_user_marked_spam, tokens.is_provider_marked_spam__deprecated, tokens.last_synced, tokens.fallback_media__deprecated, tokens.token_media_id__deprecated, tokens.is_creator_token, tokens.is_holder_token, tokens.displayable, tokens.token_definition_id, token_definitions.id, token_definitions.created_at, token_definitions.last_updated, token_definitions.deleted, token_definitions.name, token_definitions.description, token_definitions.token_type, token_definitions.token_id, token_definitions.external_url, token_definitions.chain, token_definitions.is_provider_marked_spam, token_definitions.metadata, token_definitions.fallback_media, token_definitions.contract_address, token_definitions.contract_id, token_definitions.token_media_id, token_medias.id, token_medias.created_at, token_medias.last_updated, token_medias.version, token_medias.contract_id__deprecated, token_medias.token_id__deprecated, token_medias.chain__deprecated, token_medias.active, token_medias.metadata__deprecated, token_medias.media, token_medias.name__deprecated, token_medias.description__deprecated, token_medias.processing_job_id, token_medias.deleted, contracts.id, contracts.deleted, contracts.version, contracts.created_at, contracts.last_updated, contracts.name, contracts.symbol, contracts.address, contracts.creator_address, contracts.chain, contracts.profile_banner_url, contracts.profile_image_url, contracts.badge_url, contracts.description, contracts.owner_address, contracts.is_provider_marked_spam, contracts.parent_id, contracts.override_creator_user_id
from tokens
join token_definitions on tokens.token_definition_id = token_definitions.id
join contracts on token_definitions.contract_id = contracts.id
left join token_medias on token_definitions.token_media_id = token_medias.id
where contracts.id = $1 and tokens.displayable and not tokens.deleted and not token_definitions.deleted and not contracts.deleted
order by tokens.block_number desc
`

type GetTokenFullDetailsByContractIdRow struct {
	Token           Token           `json:"token"`
	TokenDefinition TokenDefinition `json:"tokendefinition"`
	TokenMedia      TokenMedia      `json:"tokenmedia"`
	Contract        Contract        `json:"contract"`
}

func (q *Queries) GetTokenFullDetailsByContractId(ctx context.Context, id persist.DBID) ([]GetTokenFullDetailsByContractIdRow, error) {
	rows, err := q.db.Query(ctx, getTokenFullDetailsByContractId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTokenFullDetailsByContractIdRow
	for rows.Next() {
		var i GetTokenFullDetailsByContractIdRow
		if err := rows.Scan(
			&i.Token.ID,
			&i.Token.Deleted,
			&i.Token.Version,
			&i.Token.CreatedAt,
			&i.Token.LastUpdated,
			&i.Token.NameDeprecated,
			&i.Token.DescriptionDeprecated,
			&i.Token.CollectorsNote,
			&i.Token.TokenUriDeprecated,
			&i.Token.TokenTypeDeprecated,
			&i.Token.TokenID,
			&i.Token.Quantity,
			&i.Token.OwnershipHistoryDeprecated,
			&i.Token.ExternalUrlDeprecated,
			&i.Token.BlockNumber,
			&i.Token.OwnerUserID,
			&i.Token.OwnedByWallets,
			&i.Token.Chain,
			&i.Token.ContractID,
			&i.Token.IsUserMarkedSpam,
			&i.Token.IsProviderMarkedSpamDeprecated,
			&i.Token.LastSynced,
			&i.Token.FallbackMediaDeprecated,
			&i.Token.TokenMediaIDDeprecated,
			&i.Token.IsCreatorToken,
			&i.Token.IsHolderToken,
			&i.Token.Displayable,
			&i.Token.TokenDefinitionID,
			&i.TokenDefinition.ID,
			&i.TokenDefinition.CreatedAt,
			&i.TokenDefinition.LastUpdated,
			&i.TokenDefinition.Deleted,
			&i.TokenDefinition.Name,
			&i.TokenDefinition.Description,
			&i.TokenDefinition.TokenType,
			&i.TokenDefinition.TokenID,
			&i.TokenDefinition.ExternalUrl,
			&i.TokenDefinition.Chain,
			&i.TokenDefinition.IsProviderMarkedSpam,
			&i.TokenDefinition.Metadata,
			&i.TokenDefinition.FallbackMedia,
			&i.TokenDefinition.ContractAddress,
			&i.TokenDefinition.ContractID,
			&i.TokenDefinition.TokenMediaID,
			&i.TokenMedia.ID,
			&i.TokenMedia.CreatedAt,
			&i.TokenMedia.LastUpdated,
			&i.TokenMedia.Version,
			&i.TokenMedia.ContractIDDeprecated,
			&i.TokenMedia.TokenIDDeprecated,
			&i.TokenMedia.ChainDeprecated,
			&i.TokenMedia.Active,
			&i.TokenMedia.MetadataDeprecated,
			&i.TokenMedia.Media,
			&i.TokenMedia.NameDeprecated,
			&i.TokenMedia.DescriptionDeprecated,
			&i.TokenMedia.ProcessingJobID,
			&i.TokenMedia.Deleted,
			&i.Contract.ID,
			&i.Contract.Deleted,
			&i.Contract.Version,
			&i.Contract.CreatedAt,
			&i.Contract.LastUpdated,
			&i.Contract.Name,
			&i.Contract.Symbol,
			&i.Contract.Address,
			&i.Contract.CreatorAddress,
			&i.Contract.Chain,
			&i.Contract.ProfileBannerUrl,
			&i.Contract.ProfileImageUrl,
			&i.Contract.BadgeUrl,
			&i.Contract.Description,
			&i.Contract.OwnerAddress,
			&i.Contract.IsProviderMarkedSpam,
			&i.Contract.ParentID,
			&i.Contract.OverrideCreatorUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokenFullDetailsByTokenDbid = `-- name: GetTokenFullDetailsByTokenDbid :one
select tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name__deprecated, tokens.description__deprecated, tokens.collectors_note, tokens.token_uri__deprecated, tokens.token_type__deprecated, tokens.token_id, tokens.quantity, tokens.ownership_history__deprecated, tokens.external_url__deprecated, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain, tokens.contract_id, tokens.is_user_marked_spam, tokens.is_provider_marked_spam__deprecated, tokens.last_synced, tokens.fallback_media__deprecated, tokens.token_media_id__deprecated, tokens.is_creator_token, tokens.is_holder_token, tokens.displayable, tokens.token_definition_id, token_definitions.id, token_definitions.created_at, token_definitions.last_updated, token_definitions.deleted, token_definitions.name, token_definitions.description, token_definitions.token_type, token_definitions.token_id, token_definitions.external_url, token_definitions.chain, token_definitions.is_provider_marked_spam, token_definitions.metadata, token_definitions.fallback_media, token_definitions.contract_address, token_definitions.contract_id, token_definitions.token_media_id, token_medias.id, token_medias.created_at, token_medias.last_updated, token_medias.version, token_medias.contract_id__deprecated, token_medias.token_id__deprecated, token_medias.chain__deprecated, token_medias.active, token_medias.metadata__deprecated, token_medias.media, token_medias.name__deprecated, token_medias.description__deprecated, token_medias.processing_job_id, token_medias.deleted, contracts.id, contracts.deleted, contracts.version, contracts.created_at, contracts.last_updated, contracts.name, contracts.symbol, contracts.address, contracts.creator_address, contracts.chain, contracts.profile_banner_url, contracts.profile_image_url, contracts.badge_url, contracts.description, contracts.owner_address, contracts.is_provider_marked_spam, contracts.parent_id, contracts.override_creator_user_id
from tokens
join token_definitions on tokens.token_definition_id = token_definitions.id
join contracts on token_definitions.contract_id = contracts.id
left join token_medias on token_definitions.token_media_id = token_medias.id
where tokens.id = $1 and tokens.displayable and not tokens.deleted and not token_definitions.deleted and not contracts.deleted
`

type GetTokenFullDetailsByTokenDbidRow struct {
	Token           Token           `json:"token"`
	TokenDefinition TokenDefinition `json:"tokendefinition"`
	TokenMedia      TokenMedia      `json:"tokenmedia"`
	Contract        Contract        `json:"contract"`
}

func (q *Queries) GetTokenFullDetailsByTokenDbid(ctx context.Context, id persist.DBID) (GetTokenFullDetailsByTokenDbidRow, error) {
	row := q.db.QueryRow(ctx, getTokenFullDetailsByTokenDbid, id)
	var i GetTokenFullDetailsByTokenDbidRow
	err := row.Scan(
		&i.Token.ID,
		&i.Token.Deleted,
		&i.Token.Version,
		&i.Token.CreatedAt,
		&i.Token.LastUpdated,
		&i.Token.NameDeprecated,
		&i.Token.DescriptionDeprecated,
		&i.Token.CollectorsNote,
		&i.Token.TokenUriDeprecated,
		&i.Token.TokenTypeDeprecated,
		&i.Token.TokenID,
		&i.Token.Quantity,
		&i.Token.OwnershipHistoryDeprecated,
		&i.Token.ExternalUrlDeprecated,
		&i.Token.BlockNumber,
		&i.Token.OwnerUserID,
		&i.Token.OwnedByWallets,
		&i.Token.Chain,
		&i.Token.ContractID,
		&i.Token.IsUserMarkedSpam,
		&i.Token.IsProviderMarkedSpamDeprecated,
		&i.Token.LastSynced,
		&i.Token.FallbackMediaDeprecated,
		&i.Token.TokenMediaIDDeprecated,
		&i.Token.IsCreatorToken,
		&i.Token.IsHolderToken,
		&i.Token.Displayable,
		&i.Token.TokenDefinitionID,
		&i.TokenDefinition.ID,
		&i.TokenDefinition.CreatedAt,
		&i.TokenDefinition.LastUpdated,
		&i.TokenDefinition.Deleted,
		&i.TokenDefinition.Name,
		&i.TokenDefinition.Description,
		&i.TokenDefinition.TokenType,
		&i.TokenDefinition.TokenID,
		&i.TokenDefinition.ExternalUrl,
		&i.TokenDefinition.Chain,
		&i.TokenDefinition.IsProviderMarkedSpam,
		&i.TokenDefinition.Metadata,
		&i.TokenDefinition.FallbackMedia,
		&i.TokenDefinition.ContractAddress,
		&i.TokenDefinition.ContractID,
		&i.TokenDefinition.TokenMediaID,
		&i.TokenMedia.ID,
		&i.TokenMedia.CreatedAt,
		&i.TokenMedia.LastUpdated,
		&i.TokenMedia.Version,
		&i.TokenMedia.ContractIDDeprecated,
		&i.TokenMedia.TokenIDDeprecated,
		&i.TokenMedia.ChainDeprecated,
		&i.TokenMedia.Active,
		&i.TokenMedia.MetadataDeprecated,
		&i.TokenMedia.Media,
		&i.TokenMedia.NameDeprecated,
		&i.TokenMedia.DescriptionDeprecated,
		&i.TokenMedia.ProcessingJobID,
		&i.TokenMedia.Deleted,
		&i.Contract.ID,
		&i.Contract.Deleted,
		&i.Contract.Version,
		&i.Contract.CreatedAt,
		&i.Contract.LastUpdated,
		&i.Contract.Name,
		&i.Contract.Symbol,
		&i.Contract.Address,
		&i.Contract.CreatorAddress,
		&i.Contract.Chain,
		&i.Contract.ProfileBannerUrl,
		&i.Contract.ProfileImageUrl,
		&i.Contract.BadgeUrl,
		&i.Contract.Description,
		&i.Contract.OwnerAddress,
		&i.Contract.IsProviderMarkedSpam,
		&i.Contract.ParentID,
		&i.Contract.OverrideCreatorUserID,
	)
	return i, err
}

const getTokenFullDetailsByTokenDefinitionId = `-- name: GetTokenFullDetailsByTokenDefinitionId :many
select tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name__deprecated, tokens.description__deprecated, tokens.collectors_note, tokens.token_uri__deprecated, tokens.token_type__deprecated, tokens.token_id, tokens.quantity, tokens.ownership_history__deprecated, tokens.external_url__deprecated, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain, tokens.contract_id, tokens.is_user_marked_spam, tokens.is_provider_marked_spam__deprecated, tokens.last_synced, tokens.fallback_media__deprecated, tokens.token_media_id__deprecated, tokens.is_creator_token, tokens.is_holder_token, tokens.displayable, tokens.token_definition_id, token_definitions.id, token_definitions.created_at, token_definitions.last_updated, token_definitions.deleted, token_definitions.name, token_definitions.description, token_definitions.token_type, token_definitions.token_id, token_definitions.external_url, token_definitions.chain, token_definitions.is_provider_marked_spam, token_definitions.metadata, token_definitions.fallback_media, token_definitions.contract_address, token_definitions.contract_id, token_definitions.token_media_id, token_medias.id, token_medias.created_at, token_medias.last_updated, token_medias.version, token_medias.contract_id__deprecated, token_medias.token_id__deprecated, token_medias.chain__deprecated, token_medias.active, token_medias.metadata__deprecated, token_medias.media, token_medias.name__deprecated, token_medias.description__deprecated, token_medias.processing_job_id, token_medias.deleted, contracts.id, contracts.deleted, contracts.version, contracts.created_at, contracts.last_updated, contracts.name, contracts.symbol, contracts.address, contracts.creator_address, contracts.chain, contracts.profile_banner_url, contracts.profile_image_url, contracts.badge_url, contracts.description, contracts.owner_address, contracts.is_provider_marked_spam, contracts.parent_id, contracts.override_creator_user_id
from tokens
join token_definitions on tokens.token_definition_id = token_definitions.id
join contracts on token_definitions.contract_id = contracts.id
left join token_medias on token_definitions.token_media_id = token_medias.id
where token_definitions.id = $1 and tokens.displayable and not tokens.deleted and not token_definitions.deleted and not contracts.deleted
order by tokens.block_number desc
`

type GetTokenFullDetailsByTokenDefinitionIdRow struct {
	Token           Token           `json:"token"`
	TokenDefinition TokenDefinition `json:"tokendefinition"`
	TokenMedia      TokenMedia      `json:"tokenmedia"`
	Contract        Contract        `json:"contract"`
}

func (q *Queries) GetTokenFullDetailsByTokenDefinitionId(ctx context.Context, id persist.DBID) ([]GetTokenFullDetailsByTokenDefinitionIdRow, error) {
	rows, err := q.db.Query(ctx, getTokenFullDetailsByTokenDefinitionId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTokenFullDetailsByTokenDefinitionIdRow
	for rows.Next() {
		var i GetTokenFullDetailsByTokenDefinitionIdRow
		if err := rows.Scan(
			&i.Token.ID,
			&i.Token.Deleted,
			&i.Token.Version,
			&i.Token.CreatedAt,
			&i.Token.LastUpdated,
			&i.Token.NameDeprecated,
			&i.Token.DescriptionDeprecated,
			&i.Token.CollectorsNote,
			&i.Token.TokenUriDeprecated,
			&i.Token.TokenTypeDeprecated,
			&i.Token.TokenID,
			&i.Token.Quantity,
			&i.Token.OwnershipHistoryDeprecated,
			&i.Token.ExternalUrlDeprecated,
			&i.Token.BlockNumber,
			&i.Token.OwnerUserID,
			&i.Token.OwnedByWallets,
			&i.Token.Chain,
			&i.Token.ContractID,
			&i.Token.IsUserMarkedSpam,
			&i.Token.IsProviderMarkedSpamDeprecated,
			&i.Token.LastSynced,
			&i.Token.FallbackMediaDeprecated,
			&i.Token.TokenMediaIDDeprecated,
			&i.Token.IsCreatorToken,
			&i.Token.IsHolderToken,
			&i.Token.Displayable,
			&i.Token.TokenDefinitionID,
			&i.TokenDefinition.ID,
			&i.TokenDefinition.CreatedAt,
			&i.TokenDefinition.LastUpdated,
			&i.TokenDefinition.Deleted,
			&i.TokenDefinition.Name,
			&i.TokenDefinition.Description,
			&i.TokenDefinition.TokenType,
			&i.TokenDefinition.TokenID,
			&i.TokenDefinition.ExternalUrl,
			&i.TokenDefinition.Chain,
			&i.TokenDefinition.IsProviderMarkedSpam,
			&i.TokenDefinition.Metadata,
			&i.TokenDefinition.FallbackMedia,
			&i.TokenDefinition.ContractAddress,
			&i.TokenDefinition.ContractID,
			&i.TokenDefinition.TokenMediaID,
			&i.TokenMedia.ID,
			&i.TokenMedia.CreatedAt,
			&i.TokenMedia.LastUpdated,
			&i.TokenMedia.Version,
			&i.TokenMedia.ContractIDDeprecated,
			&i.TokenMedia.TokenIDDeprecated,
			&i.TokenMedia.ChainDeprecated,
			&i.TokenMedia.Active,
			&i.TokenMedia.MetadataDeprecated,
			&i.TokenMedia.Media,
			&i.TokenMedia.NameDeprecated,
			&i.TokenMedia.DescriptionDeprecated,
			&i.TokenMedia.ProcessingJobID,
			&i.TokenMedia.Deleted,
			&i.Contract.ID,
			&i.Contract.Deleted,
			&i.Contract.Version,
			&i.Contract.CreatedAt,
			&i.Contract.LastUpdated,
			&i.Contract.Name,
			&i.Contract.Symbol,
			&i.Contract.Address,
			&i.Contract.CreatorAddress,
			&i.Contract.Chain,
			&i.Contract.ProfileBannerUrl,
			&i.Contract.ProfileImageUrl,
			&i.Contract.BadgeUrl,
			&i.Contract.Description,
			&i.Contract.OwnerAddress,
			&i.Contract.IsProviderMarkedSpam,
			&i.Contract.ParentID,
			&i.Contract.OverrideCreatorUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokenFullDetailsByUserId = `-- name: GetTokenFullDetailsByUserId :many
select tokens.id, tokens.deleted, tokens.version, tokens.created_at, tokens.last_updated, tokens.name__deprecated, tokens.description__deprecated, tokens.collectors_note, tokens.token_uri__deprecated, tokens.token_type__deprecated, tokens.token_id, tokens.quantity, tokens.ownership_history__deprecated, tokens.external_url__deprecated, tokens.block_number, tokens.owner_user_id, tokens.owned_by_wallets, tokens.chain, tokens.contract_id, tokens.is_user_marked_spam, tokens.is_provider_marked_spam__deprecated, tokens.last_synced, tokens.fallback_media__deprecated, tokens.token_media_id__deprecated, tokens.is_creator_token, tokens.is_holder_token, tokens.displayable, tokens.token_definition_id, token_definitions.id, token_definitions.created_at, token_definitions.last_updated, token_definitions.deleted, token_definitions.name, token_definitions.description, token_definitions.token_type, token_definitions.token_id, token_definitions.external_url, token_definitions.chain, token_definitions.is_provider_marked_spam, token_definitions.metadata, token_definitions.fallback_media, token_definitions.contract_address, token_definitions.contract_id, token_definitions.token_media_id, token_medias.id, token_medias.created_at, token_medias.last_updated, token_medias.version, token_medias.contract_id__deprecated, token_medias.token_id__deprecated, token_medias.chain__deprecated, token_medias.active, token_medias.metadata__deprecated, token_medias.media, token_medias.name__deprecated, token_medias.description__deprecated, token_medias.processing_job_id, token_medias.deleted, contracts.id, contracts.deleted, contracts.version, contracts.created_at, contracts.last_updated, contracts.name, contracts.symbol, contracts.address, contracts.creator_address, contracts.chain, contracts.profile_banner_url, contracts.profile_image_url, contracts.badge_url, contracts.description, contracts.owner_address, contracts.is_provider_marked_spam, contracts.parent_id, contracts.override_creator_user_id
from tokens
join token_definitions on tokens.token_definition_id = token_definitions.id
join contracts on token_definitions.contract_id = contracts.id
left join token_medias on token_definitions.token_media_id = token_medias.id
where tokens.owner_user_id = $1 and tokens.displayable and not tokens.deleted and not token_definitions.deleted and not contracts.deleted
order by tokens.block_number desc
`

type GetTokenFullDetailsByUserIdRow struct {
	Token           Token           `json:"token"`
	TokenDefinition TokenDefinition `json:"tokendefinition"`
	TokenMedia      TokenMedia      `json:"tokenmedia"`
	Contract        Contract        `json:"contract"`
}

func (q *Queries) GetTokenFullDetailsByUserId(ctx context.Context, ownerUserID persist.DBID) ([]GetTokenFullDetailsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getTokenFullDetailsByUserId, ownerUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTokenFullDetailsByUserIdRow
	for rows.Next() {
		var i GetTokenFullDetailsByUserIdRow
		if err := rows.Scan(
			&i.Token.ID,
			&i.Token.Deleted,
			&i.Token.Version,
			&i.Token.CreatedAt,
			&i.Token.LastUpdated,
			&i.Token.NameDeprecated,
			&i.Token.DescriptionDeprecated,
			&i.Token.CollectorsNote,
			&i.Token.TokenUriDeprecated,
			&i.Token.TokenTypeDeprecated,
			&i.Token.TokenID,
			&i.Token.Quantity,
			&i.Token.OwnershipHistoryDeprecated,
			&i.Token.ExternalUrlDeprecated,
			&i.Token.BlockNumber,
			&i.Token.OwnerUserID,
			&i.Token.OwnedByWallets,
			&i.Token.Chain,
			&i.Token.ContractID,
			&i.Token.IsUserMarkedSpam,
			&i.Token.IsProviderMarkedSpamDeprecated,
			&i.Token.LastSynced,
			&i.Token.FallbackMediaDeprecated,
			&i.Token.TokenMediaIDDeprecated,
			&i.Token.IsCreatorToken,
			&i.Token.IsHolderToken,
			&i.Token.Displayable,
			&i.Token.TokenDefinitionID,
			&i.TokenDefinition.ID,
			&i.TokenDefinition.CreatedAt,
			&i.TokenDefinition.LastUpdated,
			&i.TokenDefinition.Deleted,
			&i.TokenDefinition.Name,
			&i.TokenDefinition.Description,
			&i.TokenDefinition.TokenType,
			&i.TokenDefinition.TokenID,
			&i.TokenDefinition.ExternalUrl,
			&i.TokenDefinition.Chain,
			&i.TokenDefinition.IsProviderMarkedSpam,
			&i.TokenDefinition.Metadata,
			&i.TokenDefinition.FallbackMedia,
			&i.TokenDefinition.ContractAddress,
			&i.TokenDefinition.ContractID,
			&i.TokenDefinition.TokenMediaID,
			&i.TokenMedia.ID,
			&i.TokenMedia.CreatedAt,
			&i.TokenMedia.LastUpdated,
			&i.TokenMedia.Version,
			&i.TokenMedia.ContractIDDeprecated,
			&i.TokenMedia.TokenIDDeprecated,
			&i.TokenMedia.ChainDeprecated,
			&i.TokenMedia.Active,
			&i.TokenMedia.MetadataDeprecated,
			&i.TokenMedia.Media,
			&i.TokenMedia.NameDeprecated,
			&i.TokenMedia.DescriptionDeprecated,
			&i.TokenMedia.ProcessingJobID,
			&i.TokenMedia.Deleted,
			&i.Contract.ID,
			&i.Contract.Deleted,
			&i.Contract.Version,
			&i.Contract.CreatedAt,
			&i.Contract.LastUpdated,
			&i.Contract.Name,
			&i.Contract.Symbol,
			&i.Contract.Address,
			&i.Contract.CreatorAddress,
			&i.Contract.Chain,
			&i.Contract.ProfileBannerUrl,
			&i.Contract.ProfileImageUrl,
			&i.Contract.BadgeUrl,
			&i.Contract.Description,
			&i.Contract.OwnerAddress,
			&i.Contract.IsProviderMarkedSpam,
			&i.Contract.ParentID,
			&i.Contract.OverrideCreatorUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTokenOwnerByID = `-- name: GetTokenOwnerByID :one
select u.id, u.deleted, u.version, u.last_updated, u.created_at, u.username, u.username_idempotent, u.wallets, u.bio, u.traits, u.universal, u.notification_settings, u.email_verified, u.email_unsubscriptions, u.featured_gallery, u.primary_wallet_id, u.user_experiences, u.profile_image_id from tokens t
    join users u on u.id = t.owner_user_id
    where t.id = $1 and t.displayable and t.deleted = false and u.deleted = false
`

func (q *Queries) GetTokenOwnerByID(ctx context.Context, id persist.DBID) (User, error) {
	row := q.db.QueryRow(ctx, getTokenOwnerByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Username,
		&i.UsernameIdempotent,
		&i.Wallets,
		&i.Bio,
		&i.Traits,
		&i.Universal,
		&i.NotificationSettings,
		&i.EmailVerified,
		&i.EmailUnsubscriptions,
		&i.FeaturedGallery,
		&i.PrimaryWalletID,
		&i.UserExperiences,
		&i.ProfileImageID,
	)
	return i, err
}

const getTokensByContractIdPaginate = `-- name: GetTokensByContractIdPaginate :many
select t.id, t.deleted, t.version, t.created_at, t.last_updated, t.name__deprecated, t.description__deprecated, t.collectors_note, t.token_uri__deprecated, t.token_type__deprecated, t.token_id, t.quantity, t.ownership_history__deprecated, t.external_url__deprecated, t.block_number, t.owner_user_id, t.owned_by_wallets, t.chain, t.contract_id, t.is_user_marked_spam, t.is_provider_marked_spam__deprecated, t.last_synced, t.fallback_media__deprecated, t.token_media_id__deprecated, t.is_creator_token, t.is_holder_token, t.displayable, t.token_definition_id from tokens t
    join users u on u.id = t.owner_user_id
    join contracts c on t.contract = c.id
    where (c.id = $1 or c.parent_id = $1)
    and t.displayable
    and t.deleted = false
    and c.deleted = false
    and (not $3::bool or u.universal = false)
    and (u.universal,t.created_at,t.id) < ($4, $5::timestamptz, $6)
    and (u.universal,t.created_at,t.id) > ($7, $8::timestamptz, $9)
    order by case when $10::bool then (u.universal,t.created_at,t.id) end asc,
             case when not $10::bool then (u.universal,t.created_at,t.id) end desc
    limit $2
`

type GetTokensByContractIdPaginateParams struct {
	ID                 persist.DBID `json:"id"`
	Limit              int32        `json:"limit"`
	GalleryUsersOnly   bool         `json:"gallery_users_only"`
	CurBeforeUniversal bool         `json:"cur_before_universal"`
	CurBeforeTime      time.Time    `json:"cur_before_time"`
	CurBeforeID        persist.DBID `json:"cur_before_id"`
	CurAfterUniversal  bool         `json:"cur_after_universal"`
	CurAfterTime       time.Time    `json:"cur_after_time"`
	CurAfterID         persist.DBID `json:"cur_after_id"`
	PagingForward      bool         `json:"paging_forward"`
}

func (q *Queries) GetTokensByContractIdPaginate(ctx context.Context, arg GetTokensByContractIdPaginateParams) ([]Token, error) {
	rows, err := q.db.Query(ctx, getTokensByContractIdPaginate,
		arg.ID,
		arg.Limit,
		arg.GalleryUsersOnly,
		arg.CurBeforeUniversal,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterUniversal,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.NameDeprecated,
			&i.DescriptionDeprecated,
			&i.CollectorsNote,
			&i.TokenUriDeprecated,
			&i.TokenTypeDeprecated,
			&i.TokenID,
			&i.Quantity,
			&i.OwnershipHistoryDeprecated,
			&i.ExternalUrlDeprecated,
			&i.BlockNumber,
			&i.OwnerUserID,
			&i.OwnedByWallets,
			&i.Chain,
			&i.ContractID,
			&i.IsUserMarkedSpam,
			&i.IsProviderMarkedSpamDeprecated,
			&i.LastSynced,
			&i.FallbackMediaDeprecated,
			&i.TokenMediaIDDeprecated,
			&i.IsCreatorToken,
			&i.IsHolderToken,
			&i.Displayable,
			&i.TokenDefinitionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopCollectionsForCommunity = `-- name: GetTopCollectionsForCommunity :many
with contract_tokens as (
	select t.id, t.owner_user_id
	from tokens t
	join contracts c on t.contract = c.id
	where not t.deleted
	  and not c.deleted
	  and t.contract = c.id
	  and t.displayable
	  and c.chain = $1
	  and c.address = $2
),
ranking as (
	select col.id, rank() over (order by count(col.id) desc, col.created_at desc) score
	from collections col
	join contract_tokens on col.owner_user_id = contract_tokens.owner_user_id and contract_tokens.id = any(col.nfts)
	join users on col.owner_user_id = users.id
	where not col.deleted and not col.hidden and not users.deleted
	group by col.id
)
select collections.id from collections join ranking using(id) where score <= 100 order by score asc
`

type GetTopCollectionsForCommunityParams struct {
	Chain   persist.Chain   `json:"chain"`
	Address persist.Address `json:"address"`
}

func (q *Queries) GetTopCollectionsForCommunity(ctx context.Context, arg GetTopCollectionsForCommunityParams) ([]persist.DBID, error) {
	rows, err := q.db.Query(ctx, getTopCollectionsForCommunity, arg.Chain, arg.Address)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []persist.DBID
	for rows.Next() {
		var id persist.DBID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrendingUsersByIDs = `-- name: GetTrendingUsersByIDs :many
select users.id, users.deleted, users.version, users.last_updated, users.created_at, users.username, users.username_idempotent, users.wallets, users.bio, users.traits, users.universal, users.notification_settings, users.email_verified, users.email_unsubscriptions, users.featured_gallery, users.primary_wallet_id, users.user_experiences, users.profile_image_id from users join unnest($1::varchar[]) with ordinality t(id, pos) using (id) where deleted = false order by t.pos asc
`

func (q *Queries) GetTrendingUsersByIDs(ctx context.Context, userIds []string) ([]User, error) {
	rows, err := q.db.Query(ctx, getTrendingUsersByIDs, userIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
			&i.EmailVerified,
			&i.EmailUnsubscriptions,
			&i.FeaturedGallery,
			&i.PrimaryWalletID,
			&i.UserExperiences,
			&i.ProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUniqueTokenIdentifiersByTokenID = `-- name: GetUniqueTokenIdentifiersByTokenID :one
select tokens.token_id, contracts.address as contract_address, contracts.chain, tokens.quantity, array_agg(wallets.address)::varchar[] as owner_addresses 
from tokens
join contracts on tokens.contract = contracts.id
join wallets on wallets.id = any(tokens.owned_by_wallets)
where tokens.id = $1 and tokens.displayable and not tokens.deleted and not contracts.deleted and not wallets.deleted
group by (tokens.token_id, contracts.address, contracts.chain, tokens.quantity) limit 1
`

type GetUniqueTokenIdentifiersByTokenIDRow struct {
	TokenID         persist.TokenID   `json:"token_id"`
	ContractAddress persist.Address   `json:"contract_address"`
	Chain           persist.Chain     `json:"chain"`
	Quantity        persist.HexString `json:"quantity"`
	OwnerAddresses  []string          `json:"owner_addresses"`
}

func (q *Queries) GetUniqueTokenIdentifiersByTokenID(ctx context.Context, id persist.DBID) (GetUniqueTokenIdentifiersByTokenIDRow, error) {
	row := q.db.QueryRow(ctx, getUniqueTokenIdentifiersByTokenID, id)
	var i GetUniqueTokenIdentifiersByTokenIDRow
	err := row.Scan(
		&i.TokenID,
		&i.ContractAddress,
		&i.Chain,
		&i.Quantity,
		&i.OwnerAddresses,
	)
	return i, err
}

const getUserByAddressAndChains = `-- name: GetUserByAddressAndChains :one
select users.id, users.deleted, users.version, users.last_updated, users.created_at, users.username, users.username_idempotent, users.wallets, users.bio, users.traits, users.universal, users.notification_settings, users.email_verified, users.email_unsubscriptions, users.featured_gallery, users.primary_wallet_id, users.user_experiences, users.profile_image_id
from users, wallets
where wallets.address = $1
	and wallets.chain = any($2::int[])
	and array[wallets.id] <@ users.wallets
	and wallets.deleted = false
	and users.deleted = false
`

type GetUserByAddressAndChainsParams struct {
	Address persist.Address `json:"address"`
	Chains  []int32         `json:"chains"`
}

func (q *Queries) GetUserByAddressAndChains(ctx context.Context, arg GetUserByAddressAndChainsParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByAddressAndChains, arg.Address, arg.Chains)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Username,
		&i.UsernameIdempotent,
		&i.Wallets,
		&i.Bio,
		&i.Traits,
		&i.Universal,
		&i.NotificationSettings,
		&i.EmailVerified,
		&i.EmailUnsubscriptions,
		&i.FeaturedGallery,
		&i.PrimaryWalletID,
		&i.UserExperiences,
		&i.ProfileImageID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings, email_verified, email_unsubscriptions, featured_gallery, primary_wallet_id, user_experiences, profile_image_id FROM users WHERE id = $1 AND deleted = false
`

func (q *Queries) GetUserById(ctx context.Context, id persist.DBID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Username,
		&i.UsernameIdempotent,
		&i.Wallets,
		&i.Bio,
		&i.Traits,
		&i.Universal,
		&i.NotificationSettings,
		&i.EmailVerified,
		&i.EmailUnsubscriptions,
		&i.FeaturedGallery,
		&i.PrimaryWalletID,
		&i.UserExperiences,
		&i.ProfileImageID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings, email_verified, email_unsubscriptions, featured_gallery, primary_wallet_id, user_experiences, profile_image_id FROM users WHERE username_idempotent = lower($1) AND deleted = false
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Username,
		&i.UsernameIdempotent,
		&i.Wallets,
		&i.Bio,
		&i.Traits,
		&i.Universal,
		&i.NotificationSettings,
		&i.EmailVerified,
		&i.EmailUnsubscriptions,
		&i.FeaturedGallery,
		&i.PrimaryWalletID,
		&i.UserExperiences,
		&i.ProfileImageID,
	)
	return i, err
}

const getUserByVerifiedEmailAddress = `-- name: GetUserByVerifiedEmailAddress :one
select u.id, u.deleted, u.version, u.last_updated, u.created_at, u.username, u.username_idempotent, u.wallets, u.bio, u.traits, u.universal, u.notification_settings, u.email_verified, u.email_unsubscriptions, u.featured_gallery, u.primary_wallet_id, u.user_experiences, u.profile_image_id from users u join pii.for_users p on u.id = p.user_id
where p.pii_email_address = lower($1)
  and u.email_verified != 0
  and p.deleted = false
  and u.deleted = false
`

func (q *Queries) GetUserByVerifiedEmailAddress(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByVerifiedEmailAddress, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Username,
		&i.UsernameIdempotent,
		&i.Wallets,
		&i.Bio,
		&i.Traits,
		&i.Universal,
		&i.NotificationSettings,
		&i.EmailVerified,
		&i.EmailUnsubscriptions,
		&i.FeaturedGallery,
		&i.PrimaryWalletID,
		&i.UserExperiences,
		&i.ProfileImageID,
	)
	return i, err
}

const getUserByWalletID = `-- name: GetUserByWalletID :one
select id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings, email_verified, email_unsubscriptions, featured_gallery, primary_wallet_id, user_experiences, profile_image_id from users where array[$1::varchar]::varchar[] <@ wallets and deleted = false
`

func (q *Queries) GetUserByWalletID(ctx context.Context, wallet string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByWalletID, wallet)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Username,
		&i.UsernameIdempotent,
		&i.Wallets,
		&i.Bio,
		&i.Traits,
		&i.Universal,
		&i.NotificationSettings,
		&i.EmailVerified,
		&i.EmailUnsubscriptions,
		&i.FeaturedGallery,
		&i.PrimaryWalletID,
		&i.UserExperiences,
		&i.ProfileImageID,
	)
	return i, err
}

const getUserExperiencesByUserID = `-- name: GetUserExperiencesByUserID :one
select user_experiences from users where id = $1
`

func (q *Queries) GetUserExperiencesByUserID(ctx context.Context, id persist.DBID) (pgtype.JSONB, error) {
	row := q.db.QueryRow(ctx, getUserExperiencesByUserID, id)
	var user_experiences pgtype.JSONB
	err := row.Scan(&user_experiences)
	return user_experiences, err
}

const getUserNotifications = `-- name: GetUserNotifications :many
SELECT id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id FROM notifications WHERE owner_id = $1 AND deleted = false
    AND (created_at, id) < ($3, $4)
    AND (created_at, id) > ($5, $6)
    ORDER BY CASE WHEN $7::bool THEN (created_at, id) END ASC,
             CASE WHEN NOT $7::bool THEN (created_at, id) END DESC
    LIMIT $2
`

type GetUserNotificationsParams struct {
	OwnerID       persist.DBID `json:"owner_id"`
	Limit         int32        `json:"limit"`
	CurBeforeTime time.Time    `json:"cur_before_time"`
	CurBeforeID   persist.DBID `json:"cur_before_id"`
	CurAfterTime  time.Time    `json:"cur_after_time"`
	CurAfterID    persist.DBID `json:"cur_after_id"`
	PagingForward bool         `json:"paging_forward"`
}

func (q *Queries) GetUserNotifications(ctx context.Context, arg GetUserNotificationsParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getUserNotifications,
		arg.OwnerID,
		arg.Limit,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerID,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Action,
			&i.Data,
			&i.EventIds,
			&i.FeedEventID,
			&i.CommentID,
			&i.GalleryID,
			&i.Seen,
			&i.Amount,
			&i.PostID,
			&i.TokenID,
			&i.ContractID,
			&i.MentionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRolesByUserId = `-- name: GetUserRolesByUserId :many
with membership_roles(role) as (
    select (case when exists(
        select 1
        from tokens
        where owner_user_id = $1
            and token_id = any($2::varchar[])
            and contract = (select id from contracts where address = $3 and contracts.chain = $4 and contracts.deleted = false)
            and exists(select 1 from users where id = $1 and email_verified = 1 and deleted = false)
            and displayable
            and deleted = false
    ) then $5 else null end)::varchar
)
select role from user_roles where user_id = $1 and deleted = false
union
select role from membership_roles where role is not null
`

type GetUserRolesByUserIdParams struct {
	UserID                persist.DBID    `json:"user_id"`
	MembershipTokenIds    []string        `json:"membership_token_ids"`
	MembershipAddress     persist.Address `json:"membership_address"`
	Chain                 persist.Chain   `json:"chain"`
	GrantedMembershipRole string          `json:"granted_membership_role"`
}

func (q *Queries) GetUserRolesByUserId(ctx context.Context, arg GetUserRolesByUserIdParams) ([]persist.Role, error) {
	rows, err := q.db.Query(ctx, getUserRolesByUserId,
		arg.UserID,
		arg.MembershipTokenIds,
		arg.MembershipAddress,
		arg.Chain,
		arg.GrantedMembershipRole,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []persist.Role
	for rows.Next() {
		var role persist.Role
		if err := rows.Scan(&role); err != nil {
			return nil, err
		}
		items = append(items, role)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserUnseenNotifications = `-- name: GetUserUnseenNotifications :many
SELECT id, deleted, owner_id, version, last_updated, created_at, action, data, event_ids, feed_event_id, comment_id, gallery_id, seen, amount, post_id, token_id, contract_id, mention_id FROM notifications WHERE owner_id = $1 AND deleted = false AND seen = false
    AND (created_at, id) < ($3, $4)
    AND (created_at, id) > ($5, $6)
    ORDER BY CASE WHEN $7::bool THEN (created_at, id) END ASC,
             CASE WHEN NOT $7::bool THEN (created_at, id) END DESC
    LIMIT $2
`

type GetUserUnseenNotificationsParams struct {
	OwnerID       persist.DBID `json:"owner_id"`
	Limit         int32        `json:"limit"`
	CurBeforeTime time.Time    `json:"cur_before_time"`
	CurBeforeID   persist.DBID `json:"cur_before_id"`
	CurAfterTime  time.Time    `json:"cur_after_time"`
	CurAfterID    persist.DBID `json:"cur_after_id"`
	PagingForward bool         `json:"paging_forward"`
}

func (q *Queries) GetUserUnseenNotifications(ctx context.Context, arg GetUserUnseenNotificationsParams) ([]Notification, error) {
	rows, err := q.db.Query(ctx, getUserUnseenNotifications,
		arg.OwnerID,
		arg.Limit,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerID,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Action,
			&i.Data,
			&i.EventIds,
			&i.FeedEventID,
			&i.CommentID,
			&i.GalleryID,
			&i.Seen,
			&i.Amount,
			&i.PostID,
			&i.TokenID,
			&i.ContractID,
			&i.MentionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWithPIIByID = `-- name: GetUserWithPIIByID :one
select id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings, email_verified, email_unsubscriptions, featured_gallery, primary_wallet_id, user_experiences, pii_email_address, pii_socials from pii.user_view where id = $1 and deleted = false
`

func (q *Queries) GetUserWithPIIByID(ctx context.Context, userID persist.DBID) (PiiUserView, error) {
	row := q.db.QueryRow(ctx, getUserWithPIIByID, userID)
	var i PiiUserView
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.Version,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Username,
		&i.UsernameIdempotent,
		&i.Wallets,
		&i.Bio,
		&i.Traits,
		&i.Universal,
		&i.NotificationSettings,
		&i.EmailVerified,
		&i.EmailUnsubscriptions,
		&i.FeaturedGallery,
		&i.PrimaryWalletID,
		&i.UserExperiences,
		&i.PiiEmailAddress,
		&i.PiiSocials,
	)
	return i, err
}

const getUsersByChainAddresses = `-- name: GetUsersByChainAddresses :many
select users.id, users.deleted, users.version, users.last_updated, users.created_at, users.username, users.username_idempotent, users.wallets, users.bio, users.traits, users.universal, users.notification_settings, users.email_verified, users.email_unsubscriptions, users.featured_gallery, users.primary_wallet_id, users.user_experiences, users.profile_image_id,wallets.address from users, wallets where wallets.address = ANY($1::varchar[]) AND wallets.chain = $2::int AND ARRAY[wallets.id] <@ users.wallets AND users.deleted = false AND wallets.deleted = false
`

type GetUsersByChainAddressesParams struct {
	Addresses []string `json:"addresses"`
	Chain     int32    `json:"chain"`
}

type GetUsersByChainAddressesRow struct {
	ID                   persist.DBID                     `json:"id"`
	Deleted              bool                             `json:"deleted"`
	Version              sql.NullInt32                    `json:"version"`
	LastUpdated          time.Time                        `json:"last_updated"`
	CreatedAt            time.Time                        `json:"created_at"`
	Username             sql.NullString                   `json:"username"`
	UsernameIdempotent   sql.NullString                   `json:"username_idempotent"`
	Wallets              persist.WalletList               `json:"wallets"`
	Bio                  sql.NullString                   `json:"bio"`
	Traits               pgtype.JSONB                     `json:"traits"`
	Universal            bool                             `json:"universal"`
	NotificationSettings persist.UserNotificationSettings `json:"notification_settings"`
	EmailVerified        persist.EmailVerificationStatus  `json:"email_verified"`
	EmailUnsubscriptions persist.EmailUnsubscriptions     `json:"email_unsubscriptions"`
	FeaturedGallery      *persist.DBID                    `json:"featured_gallery"`
	PrimaryWalletID      persist.DBID                     `json:"primary_wallet_id"`
	UserExperiences      pgtype.JSONB                     `json:"user_experiences"`
	ProfileImageID       persist.DBID                     `json:"profile_image_id"`
	Address              persist.Address                  `json:"address"`
}

func (q *Queries) GetUsersByChainAddresses(ctx context.Context, arg GetUsersByChainAddressesParams) ([]GetUsersByChainAddressesRow, error) {
	rows, err := q.db.Query(ctx, getUsersByChainAddresses, arg.Addresses, arg.Chain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByChainAddressesRow
	for rows.Next() {
		var i GetUsersByChainAddressesRow
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
			&i.EmailVerified,
			&i.EmailUnsubscriptions,
			&i.FeaturedGallery,
			&i.PrimaryWalletID,
			&i.UserExperiences,
			&i.ProfileImageID,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByIDs = `-- name: GetUsersByIDs :many
SELECT id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings, email_verified, email_unsubscriptions, featured_gallery, primary_wallet_id, user_experiences, profile_image_id FROM users WHERE id = ANY($2) AND deleted = false
    AND (created_at, id) < ($3, $4)
    AND (created_at, id) > ($5, $6)
    ORDER BY CASE WHEN $7::bool THEN (created_at, id) END ASC,
             CASE WHEN NOT $7::bool THEN (created_at, id) END DESC
    LIMIT $1
`

type GetUsersByIDsParams struct {
	Limit         int32            `json:"limit"`
	UserIds       persist.DBIDList `json:"user_ids"`
	CurBeforeTime time.Time        `json:"cur_before_time"`
	CurBeforeID   persist.DBID     `json:"cur_before_id"`
	CurAfterTime  time.Time        `json:"cur_after_time"`
	CurAfterID    persist.DBID     `json:"cur_after_id"`
	PagingForward bool             `json:"paging_forward"`
}

func (q *Queries) GetUsersByIDs(ctx context.Context, arg GetUsersByIDsParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByIDs,
		arg.Limit,
		arg.UserIds,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
			&i.EmailVerified,
			&i.EmailUnsubscriptions,
			&i.FeaturedGallery,
			&i.PrimaryWalletID,
			&i.UserExperiences,
			&i.ProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByPositionPaginate = `-- name: GetUsersByPositionPaginate :many
select u.id, u.deleted, u.version, u.last_updated, u.created_at, u.username, u.username_idempotent, u.wallets, u.bio, u.traits, u.universal, u.notification_settings, u.email_verified, u.email_unsubscriptions, u.featured_gallery, u.primary_wallet_id, u.user_experiences, u.profile_image_id from users u join unnest($1::text[]) with ordinality t(id, pos) using(id) where u.deleted = false
  and t.pos > $2::int
  and t.pos < $3::int
  order by case when $4::bool then t.pos end desc,
          case when not $4::bool then t.pos end asc
  limit $5
`

type GetUsersByPositionPaginateParams struct {
	UserIds       []string `json:"user_ids"`
	CurBeforePos  int32    `json:"cur_before_pos"`
	CurAfterPos   int32    `json:"cur_after_pos"`
	PagingForward bool     `json:"paging_forward"`
	Limit         int32    `json:"limit"`
}

func (q *Queries) GetUsersByPositionPaginate(ctx context.Context, arg GetUsersByPositionPaginateParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersByPositionPaginate,
		arg.UserIds,
		arg.CurBeforePos,
		arg.CurAfterPos,
		arg.PagingForward,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
			&i.EmailVerified,
			&i.EmailUnsubscriptions,
			&i.FeaturedGallery,
			&i.PrimaryWalletID,
			&i.UserExperiences,
			&i.ProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersBySocialIDs = `-- name: GetUsersBySocialIDs :many
select id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings, email_verified, email_unsubscriptions, featured_gallery, primary_wallet_id, user_experiences, pii_email_address, pii_socials from pii.user_view u where u.pii_socials->$1::varchar->>'id' = any($2::varchar[]) and not u.deleted and not u.universal
`

type GetUsersBySocialIDsParams struct {
	SocialAccountType string   `json:"social_account_type"`
	SocialIds         []string `json:"social_ids"`
}

func (q *Queries) GetUsersBySocialIDs(ctx context.Context, arg GetUsersBySocialIDsParams) ([]PiiUserView, error) {
	rows, err := q.db.Query(ctx, getUsersBySocialIDs, arg.SocialAccountType, arg.SocialIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PiiUserView
	for rows.Next() {
		var i PiiUserView
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
			&i.EmailVerified,
			&i.EmailUnsubscriptions,
			&i.FeaturedGallery,
			&i.PrimaryWalletID,
			&i.UserExperiences,
			&i.PiiEmailAddress,
			&i.PiiSocials,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByWalletAddressesAndChains = `-- name: GetUsersByWalletAddressesAndChains :many
WITH params AS (
    SELECT unnest($1::varchar[]) as address, unnest($2::int[]) as chain
)
SELECT wallets.id, wallets.created_at, wallets.last_updated, wallets.deleted, wallets.version, wallets.address, wallets.wallet_type, wallets.chain, users.id, users.deleted, users.version, users.last_updated, users.created_at, users.username, users.username_idempotent, users.wallets, users.bio, users.traits, users.universal, users.notification_settings, users.email_verified, users.email_unsubscriptions, users.featured_gallery, users.primary_wallet_id, users.user_experiences, users.profile_image_id
FROM wallets 
JOIN users ON wallets.id = any(users.wallets)
JOIN params ON wallets.address = params.address AND wallets.chain = params.chain
WHERE not wallets.deleted AND not users.deleted and not users.universal
`

type GetUsersByWalletAddressesAndChainsParams struct {
	WalletAddresses []string `json:"wallet_addresses"`
	Chains          []int32  `json:"chains"`
}

type GetUsersByWalletAddressesAndChainsRow struct {
	Wallet Wallet `json:"wallet"`
	User   User   `json:"user"`
}

func (q *Queries) GetUsersByWalletAddressesAndChains(ctx context.Context, arg GetUsersByWalletAddressesAndChainsParams) ([]GetUsersByWalletAddressesAndChainsRow, error) {
	rows, err := q.db.Query(ctx, getUsersByWalletAddressesAndChains, arg.WalletAddresses, arg.Chains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByWalletAddressesAndChainsRow
	for rows.Next() {
		var i GetUsersByWalletAddressesAndChainsRow
		if err := rows.Scan(
			&i.Wallet.ID,
			&i.Wallet.CreatedAt,
			&i.Wallet.LastUpdated,
			&i.Wallet.Deleted,
			&i.Wallet.Version,
			&i.Wallet.Address,
			&i.Wallet.WalletType,
			&i.Wallet.Chain,
			&i.User.ID,
			&i.User.Deleted,
			&i.User.Version,
			&i.User.LastUpdated,
			&i.User.CreatedAt,
			&i.User.Username,
			&i.User.UsernameIdempotent,
			&i.User.Wallets,
			&i.User.Bio,
			&i.User.Traits,
			&i.User.Universal,
			&i.User.NotificationSettings,
			&i.User.EmailVerified,
			&i.User.EmailUnsubscriptions,
			&i.User.FeaturedGallery,
			&i.User.PrimaryWalletID,
			&i.User.UserExperiences,
			&i.User.ProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithEmailNotificationsOn = `-- name: GetUsersWithEmailNotificationsOn :many
select id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings, email_verified, email_unsubscriptions, featured_gallery, primary_wallet_id, user_experiences, pii_email_address, pii_socials from pii.user_view
    where (email_unsubscriptions->>'all' = 'false' or email_unsubscriptions->>'all' is null)
    and deleted = false and pii_email_address is not null and email_verified = $1
    and (created_at, id) < ($3, $4)
    and (created_at, id) > ($5, $6)
    order by case when $7::bool then (created_at, id) end asc,
             case when not $7::bool then (created_at, id) end desc
    limit $2
`

type GetUsersWithEmailNotificationsOnParams struct {
	EmailVerified persist.EmailVerificationStatus `json:"email_verified"`
	Limit         int32                           `json:"limit"`
	CurBeforeTime time.Time                       `json:"cur_before_time"`
	CurBeforeID   persist.DBID                    `json:"cur_before_id"`
	CurAfterTime  time.Time                       `json:"cur_after_time"`
	CurAfterID    persist.DBID                    `json:"cur_after_id"`
	PagingForward bool                            `json:"paging_forward"`
}

// TODO: Does not appear to be used
func (q *Queries) GetUsersWithEmailNotificationsOn(ctx context.Context, arg GetUsersWithEmailNotificationsOnParams) ([]PiiUserView, error) {
	rows, err := q.db.Query(ctx, getUsersWithEmailNotificationsOn,
		arg.EmailVerified,
		arg.Limit,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PiiUserView
	for rows.Next() {
		var i PiiUserView
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
			&i.EmailVerified,
			&i.EmailUnsubscriptions,
			&i.FeaturedGallery,
			&i.PrimaryWalletID,
			&i.UserExperiences,
			&i.PiiEmailAddress,
			&i.PiiSocials,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithEmailNotificationsOnForEmailType = `-- name: GetUsersWithEmailNotificationsOnForEmailType :many
select id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings, email_verified, email_unsubscriptions, featured_gallery, primary_wallet_id, user_experiences, pii_email_address, pii_socials from pii.user_view
    where (email_unsubscriptions->>'all' = 'false' or email_unsubscriptions->>'all' is null)
    and (email_unsubscriptions->>$3::varchar = 'false' or email_unsubscriptions->>$3::varchar is null)
    and deleted = false and pii_email_address is not null and email_verified = $1
    and (created_at, id) < ($4, $5)
    and (created_at, id) > ($6, $7)
    order by case when $8::bool then (created_at, id) end asc,
             case when not $8::bool then (created_at, id) end desc
    limit $2
`

type GetUsersWithEmailNotificationsOnForEmailTypeParams struct {
	EmailVerified       persist.EmailVerificationStatus `json:"email_verified"`
	Limit               int32                           `json:"limit"`
	EmailUnsubscription string                          `json:"email_unsubscription"`
	CurBeforeTime       time.Time                       `json:"cur_before_time"`
	CurBeforeID         persist.DBID                    `json:"cur_before_id"`
	CurAfterTime        time.Time                       `json:"cur_after_time"`
	CurAfterID          persist.DBID                    `json:"cur_after_id"`
	PagingForward       bool                            `json:"paging_forward"`
}

// for some reason this query will not allow me to use @tags for $1
func (q *Queries) GetUsersWithEmailNotificationsOnForEmailType(ctx context.Context, arg GetUsersWithEmailNotificationsOnForEmailTypeParams) ([]PiiUserView, error) {
	rows, err := q.db.Query(ctx, getUsersWithEmailNotificationsOnForEmailType,
		arg.EmailVerified,
		arg.Limit,
		arg.EmailUnsubscription,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PiiUserView
	for rows.Next() {
		var i PiiUserView
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
			&i.EmailVerified,
			&i.EmailUnsubscriptions,
			&i.FeaturedGallery,
			&i.PrimaryWalletID,
			&i.UserExperiences,
			&i.PiiEmailAddress,
			&i.PiiSocials,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithRolePaginate = `-- name: GetUsersWithRolePaginate :many
select u.id, u.deleted, u.version, u.last_updated, u.created_at, u.username, u.username_idempotent, u.wallets, u.bio, u.traits, u.universal, u.notification_settings, u.email_verified, u.email_unsubscriptions, u.featured_gallery, u.primary_wallet_id, u.user_experiences, u.profile_image_id from users u, user_roles ur where u.deleted = false and ur.deleted = false
    and u.id = ur.user_id and ur.role = $2
    and (u.username_idempotent, u.id) < ($3::varchar, $4)
    and (u.username_idempotent, u.id) > ($5::varchar, $6)
    order by case when $7::bool then (u.username_idempotent, u.id) end asc,
             case when not $7::bool then (u.username_idempotent, u.id) end desc
    limit $1
`

type GetUsersWithRolePaginateParams struct {
	Limit         int32        `json:"limit"`
	Role          persist.Role `json:"role"`
	CurBeforeKey  string       `json:"cur_before_key"`
	CurBeforeID   persist.DBID `json:"cur_before_id"`
	CurAfterKey   string       `json:"cur_after_key"`
	CurAfterID    persist.DBID `json:"cur_after_id"`
	PagingForward bool         `json:"paging_forward"`
}

func (q *Queries) GetUsersWithRolePaginate(ctx context.Context, arg GetUsersWithRolePaginateParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersWithRolePaginate,
		arg.Limit,
		arg.Role,
		arg.CurBeforeKey,
		arg.CurBeforeID,
		arg.CurAfterKey,
		arg.CurAfterID,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
			&i.EmailVerified,
			&i.EmailUnsubscriptions,
			&i.FeaturedGallery,
			&i.PrimaryWalletID,
			&i.UserExperiences,
			&i.ProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithTrait = `-- name: GetUsersWithTrait :many
SELECT id, deleted, version, last_updated, created_at, username, username_idempotent, wallets, bio, traits, universal, notification_settings, email_verified, email_unsubscriptions, featured_gallery, primary_wallet_id, user_experiences, profile_image_id FROM users WHERE (traits->$1::string) IS NOT NULL AND deleted = false
`

func (q *Queries) GetUsersWithTrait(ctx context.Context, dollar_1 string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsersWithTrait, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Username,
			&i.UsernameIdempotent,
			&i.Wallets,
			&i.Bio,
			&i.Traits,
			&i.Universal,
			&i.NotificationSettings,
			&i.EmailVerified,
			&i.EmailUnsubscriptions,
			&i.FeaturedGallery,
			&i.PrimaryWalletID,
			&i.UserExperiences,
			&i.ProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersWithoutSocials = `-- name: GetUsersWithoutSocials :many
select u.id, w.address, u.pii_socials->>'Lens' is null, u.pii_socials->>'Farcaster' is null from pii.user_view u join wallets w on w.id = any(u.wallets) where u.deleted = false and w.chain = 0 and w.deleted = false and u.universal = false and (u.pii_socials->>'Lens' is null or u.pii_socials->>'Farcaster' is null) order by u.created_at desc
`

type GetUsersWithoutSocialsRow struct {
	ID      persist.DBID    `json:"id"`
	Address persist.Address `json:"address"`
	Column3 interface{}     `json:"column_3"`
	Column4 interface{}     `json:"column_4"`
}

func (q *Queries) GetUsersWithoutSocials(ctx context.Context) ([]GetUsersWithoutSocialsRow, error) {
	rows, err := q.db.Query(ctx, getUsersWithoutSocials)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersWithoutSocialsRow
	for rows.Next() {
		var i GetUsersWithoutSocialsRow
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Column3,
			&i.Column4,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVisibleCollectionsByIDsPaginate = `-- name: GetVisibleCollectionsByIDsPaginate :many
select collections.id, collections.deleted, collections.owner_user_id, collections.nfts, collections.version, collections.last_updated, collections.created_at, collections.hidden, collections.collectors_note, collections.name, collections.layout, collections.token_settings, collections.gallery_id
from collections, unnest($2::varchar[]) with ordinality as t(id, pos)
where collections.id = t.id and not deleted and not hidden and t.pos < $3::int and t.pos > $4::int
order by case when $5::bool then t.pos end asc, case when not $5::bool then t.pos end desc
limit $1
`

type GetVisibleCollectionsByIDsPaginateParams struct {
	Limit         int32    `json:"limit"`
	CollectionIds []string `json:"collection_ids"`
	CurBeforePos  int32    `json:"cur_before_pos"`
	CurAfterPos   int32    `json:"cur_after_pos"`
	PagingForward bool     `json:"paging_forward"`
}

func (q *Queries) GetVisibleCollectionsByIDsPaginate(ctx context.Context, arg GetVisibleCollectionsByIDsPaginateParams) ([]Collection, error) {
	rows, err := q.db.Query(ctx, getVisibleCollectionsByIDsPaginate,
		arg.Limit,
		arg.CollectionIds,
		arg.CurBeforePos,
		arg.CurAfterPos,
		arg.PagingForward,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.ID,
			&i.Deleted,
			&i.OwnerUserID,
			&i.Nfts,
			&i.Version,
			&i.LastUpdated,
			&i.CreatedAt,
			&i.Hidden,
			&i.CollectorsNote,
			&i.Name,
			&i.Layout,
			&i.TokenSettings,
			&i.GalleryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWalletByChainAddress = `-- name: GetWalletByChainAddress :one
SELECT wallets.id, wallets.created_at, wallets.last_updated, wallets.deleted, wallets.version, wallets.address, wallets.wallet_type, wallets.chain FROM wallets WHERE address = $1 AND chain = $2 AND deleted = false
`

type GetWalletByChainAddressParams struct {
	Address persist.Address `json:"address"`
	Chain   persist.Chain   `json:"chain"`
}

func (q *Queries) GetWalletByChainAddress(ctx context.Context, arg GetWalletByChainAddressParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByChainAddress, arg.Address, arg.Chain)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.Version,
		&i.Address,
		&i.WalletType,
		&i.Chain,
	)
	return i, err
}

const getWalletByID = `-- name: GetWalletByID :one
SELECT id, created_at, last_updated, deleted, version, address, wallet_type, chain FROM wallets WHERE id = $1 AND deleted = false
`

func (q *Queries) GetWalletByID(ctx context.Context, id persist.DBID) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletByID, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.Version,
		&i.Address,
		&i.WalletType,
		&i.Chain,
	)
	return i, err
}

const getWalletsByUserID = `-- name: GetWalletsByUserID :many
SELECT w.id, w.created_at, w.last_updated, w.deleted, w.version, w.address, w.wallet_type, w.chain FROM users u, unnest(u.wallets) WITH ORDINALITY AS a(wallet_id, wallet_ord)INNER JOIN wallets w on w.id = a.wallet_id WHERE u.id = $1 AND u.deleted = false AND w.deleted = false ORDER BY a.wallet_ord
`

func (q *Queries) GetWalletsByUserID(ctx context.Context, id persist.DBID) ([]Wallet, error) {
	rows, err := q.db.Query(ctx, getWalletsByUserID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Deleted,
			&i.Version,
			&i.Address,
			&i.WalletType,
			&i.Chain,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWindowedTrendingUserIDs = `-- name: GetWindowedTrendingUserIDs :many
with viewers as (
  select gallery_id, count(distinct coalesce(actor_id, external_id)) viewer_count
  from events
  where action = 'ViewedGallery' and events.created_at >= $2
  group by gallery_id
),
edit_events as (
  select actor_id
  from events
  where action in (
    'CollectionCreated',
    'CollectorsNoteAddedToCollection',
    'CollectorsNoteAddedToToken',
    'TokensAddedToCollection',
    'GalleryInfoUpdated'
  ) and created_at >= $2
  group by actor_id
)
select users.id
from viewers, galleries, users, edit_events
where viewers.gallery_id = galleries.id
	and galleries.owner_user_id = users.id
	and users.deleted = false
	and galleries.deleted = false
  and users.id = edit_events.actor_id
group by users.id
order by row_number() over(order by sum(viewers.viewer_count) desc, max(users.created_at) desc) asc
limit $1
`

type GetWindowedTrendingUserIDsParams struct {
	Limit     int32     `json:"limit"`
	WindowEnd time.Time `json:"window_end"`
}

func (q *Queries) GetWindowedTrendingUserIDs(ctx context.Context, arg GetWindowedTrendingUserIDsParams) ([]persist.DBID, error) {
	rows, err := q.db.Query(ctx, getWindowedTrendingUserIDs, arg.Limit, arg.WindowEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []persist.DBID
	for rows.Next() {
		var id persist.DBID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasLaterGroupedEvent = `-- name: HasLaterGroupedEvent :one
select exists(
  select 1 from events where deleted = false
  and group_id = $1
  and id > $2
)
`

type HasLaterGroupedEventParams struct {
	GroupID sql.NullString `json:"group_id"`
	EventID persist.DBID   `json:"event_id"`
}

func (q *Queries) HasLaterGroupedEvent(ctx context.Context, arg HasLaterGroupedEventParams) (bool, error) {
	row := q.db.QueryRow(ctx, hasLaterGroupedEvent, arg.GroupID, arg.EventID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const insertCommentMention = `-- name: InsertCommentMention :one
insert into mentions (id, user_id, contract_id, comment_id, start, length) values ($1, $2, $3, $4, $5, $6) returning id, post_id, comment_id, user_id, contract_id, start, length, created_at, deleted
`

type InsertCommentMentionParams struct {
	ID        persist.DBID   `json:"id"`
	User      sql.NullString `json:"user"`
	Contract  sql.NullString `json:"contract"`
	CommentID persist.DBID   `json:"comment_id"`
	Start     sql.NullInt32  `json:"start"`
	Length    sql.NullInt32  `json:"length"`
}

func (q *Queries) InsertCommentMention(ctx context.Context, arg InsertCommentMentionParams) (Mention, error) {
	row := q.db.QueryRow(ctx, insertCommentMention,
		arg.ID,
		arg.User,
		arg.Contract,
		arg.CommentID,
		arg.Start,
		arg.Length,
	)
	var i Mention
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.CommentID,
		&i.UserID,
		&i.ContractID,
		&i.Start,
		&i.Length,
		&i.CreatedAt,
		&i.Deleted,
	)
	return i, err
}

const insertExternalSocialConnectionsForUser = `-- name: InsertExternalSocialConnectionsForUser :many
insert into external_social_connections (id, social_account_type, follower_id, followee_id) 
select id, $1::varchar, $2::varchar, followee_id
from 
(select unnest($3::varchar[]) as id, unnest($4::varchar[]) as followee_id) as bulk_upsert 
returning id, version, social_account_type, follower_id, followee_id, created_at, last_updated, deleted
`

type InsertExternalSocialConnectionsForUserParams struct {
	SocialAccountType string   `json:"social_account_type"`
	FollowerID        string   `json:"follower_id"`
	Ids               []string `json:"ids"`
	FolloweeIds       []string `json:"followee_ids"`
}

func (q *Queries) InsertExternalSocialConnectionsForUser(ctx context.Context, arg InsertExternalSocialConnectionsForUserParams) ([]ExternalSocialConnection, error) {
	rows, err := q.db.Query(ctx, insertExternalSocialConnectionsForUser,
		arg.SocialAccountType,
		arg.FollowerID,
		arg.Ids,
		arg.FolloweeIds,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExternalSocialConnection
	for rows.Next() {
		var i ExternalSocialConnection
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.SocialAccountType,
			&i.FollowerID,
			&i.FolloweeID,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPost = `-- name: InsertPost :one
insert into posts(id, token_ids, contract_ids, actor_id, caption, created_at) values ($1, $2, $3, $4, $5, now()) returning id
`

type InsertPostParams struct {
	ID          persist.DBID     `json:"id"`
	TokenIds    persist.DBIDList `json:"token_ids"`
	ContractIds persist.DBIDList `json:"contract_ids"`
	ActorID     persist.DBID     `json:"actor_id"`
	Caption     sql.NullString   `json:"caption"`
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) (persist.DBID, error) {
	row := q.db.QueryRow(ctx, insertPost,
		arg.ID,
		arg.TokenIds,
		arg.ContractIds,
		arg.ActorID,
		arg.Caption,
	)
	var id persist.DBID
	err := row.Scan(&id)
	return id, err
}

const insertPostMention = `-- name: InsertPostMention :one
insert into mentions (id, user_id, contract_id, post_id, start, length) values ($1, $2, $3, $4, $5, $6) returning id, post_id, comment_id, user_id, contract_id, start, length, created_at, deleted
`

type InsertPostMentionParams struct {
	ID       persist.DBID   `json:"id"`
	User     sql.NullString `json:"user"`
	Contract sql.NullString `json:"contract"`
	PostID   persist.DBID   `json:"post_id"`
	Start    sql.NullInt32  `json:"start"`
	Length   sql.NullInt32  `json:"length"`
}

func (q *Queries) InsertPostMention(ctx context.Context, arg InsertPostMentionParams) (Mention, error) {
	row := q.db.QueryRow(ctx, insertPostMention,
		arg.ID,
		arg.User,
		arg.Contract,
		arg.PostID,
		arg.Start,
		arg.Length,
	)
	var i Mention
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.CommentID,
		&i.UserID,
		&i.ContractID,
		&i.Start,
		&i.Length,
		&i.CreatedAt,
		&i.Deleted,
	)
	return i, err
}

const insertSpamContracts = `-- name: InsertSpamContracts :exec
with insert_spam_contracts as (
    insert into alchemy_spam_contracts (id, chain, address, created_at, is_spam) (
        select unnest($1::varchar[])
        , unnest($2::int[])
        , unnest($3::varchar[])
        , unnest($4::timestamptz[])
        , unnest($5::bool[])
    ) on conflict(chain, address) do update set created_at = excluded.created_at, is_spam = excluded.is_spam
    returning created_at
)
delete from alchemy_spam_contracts where created_at < (select created_at from insert_spam_contracts limit 1)
`

type InsertSpamContractsParams struct {
	ID        []string    `json:"id"`
	Chain     []int32     `json:"chain"`
	Address   []string    `json:"address"`
	CreatedAt []time.Time `json:"created_at"`
	IsSpam    []bool      `json:"is_spam"`
}

func (q *Queries) InsertSpamContracts(ctx context.Context, arg InsertSpamContractsParams) error {
	_, err := q.db.Exec(ctx, insertSpamContracts,
		arg.ID,
		arg.Chain,
		arg.Address,
		arg.CreatedAt,
		arg.IsSpam,
	)
	return err
}

const insertTokenPipelineResults = `-- name: InsertTokenPipelineResults :one
with insert_job(id) as (
    insert into token_processing_jobs (id, token_properties, pipeline_metadata, processing_cause, processor_version)
    values ($1, $2, $3, $4, $5)
    returning id
)
, set_conditionally_current_media_to_inactive as (
    insert into token_medias (id, media, processing_job_id, active, created_at, last_updated)
    (
        select $6, media, processing_job_id, false, created_at, now()
        from token_medias
        where id = (select token_media_id from token_definitions td where (td.chain, td.contract_address, td.token_id) = ($7, $8, $9) and not deleted)
        and not deleted
        and $10::bool
    )
)
, insert_new_media as (
    insert into token_medias (id, media, processing_job_id, active, created_at, last_updated)
    values ($11, $12, (select id from insert_job), @@new_media_is_active,
        -- Using timestamps generated from set_conditionally_current_media_to_inactive ensures that the new record is only inserted after the current media is moved
        (select coalesce((select last_updated from set_conditionally_current_media_to_inactive), now())),
        (select coalesce((select last_updated from set_conditionally_current_media_to_inactive), now()))
    )
    returning id, created_at, last_updated, version, contract_id__deprecated, token_id__deprecated, chain__deprecated, active, metadata__deprecated, media, name__deprecated, description__deprecated, processing_job_id, deleted
)
, update_token_definition(token_media_id) as (
    update token_definitions
    set metadata = $13, name = $14, description = $15, token_media_id = case when $10 then (select id from insert_new_media) else token_definitions.token_media_id end
    returning token_media_id
)
select id, created_at, last_updated, version, contract_id__deprecated, token_id__deprecated, chain__deprecated, active, metadata__deprecated, media, name__deprecated, description__deprecated, processing_job_id, deleted from token_medias where id = update_token_definition.token_media_id
`

type InsertTokenPipelineResultsParams struct {
	ProcessingJobID  persist.DBID             `json:"processing_job_id"`
	TokenProperties  persist.TokenProperties  `json:"token_properties"`
	PipelineMetadata persist.PipelineMetadata `json:"pipeline_metadata"`
	ProcessingCause  persist.ProcessingCause  `json:"processing_cause"`
	ProcessorVersion string                   `json:"processor_version"`
	RetiringMediaID  persist.DBID             `json:"retiring_media_id"`
	Chain            persist.Chain            `json:"chain"`
	ContractAddress  persist.Address          `json:"contract_address"`
	TokenID          persist.TokenID          `json:"token_id"`
	NewMediaIsActive bool                     `json:"new_media_is_active"`
	NewMediaID       persist.DBID             `json:"new_media_id"`
	NewMedia         pgtype.JSONB             `json:"new_media"`
	NewMetadata      pgtype.JSONB             `json:"new_metadata"`
	NewName          sql.NullString           `json:"new_name"`
	NewDescription   sql.NullString           `json:"new_description"`
}

func (q *Queries) InsertTokenPipelineResults(ctx context.Context, arg InsertTokenPipelineResultsParams) (TokenMedia, error) {
	row := q.db.QueryRow(ctx, insertTokenPipelineResults,
		arg.ProcessingJobID,
		arg.TokenProperties,
		arg.PipelineMetadata,
		arg.ProcessingCause,
		arg.ProcessorVersion,
		arg.RetiringMediaID,
		arg.Chain,
		arg.ContractAddress,
		arg.TokenID,
		arg.NewMediaIsActive,
		arg.NewMediaID,
		arg.NewMedia,
		arg.NewMetadata,
		arg.NewName,
		arg.NewDescription,
	)
	var i TokenMedia
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Version,
		&i.ContractIDDeprecated,
		&i.TokenIDDeprecated,
		&i.ChainDeprecated,
		&i.Active,
		&i.MetadataDeprecated,
		&i.Media,
		&i.NameDeprecated,
		&i.DescriptionDeprecated,
		&i.ProcessingJobID,
		&i.Deleted,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
insert into users (id, username, username_idempotent, bio, universal, email_unsubscriptions) values ($1, $2, $3, $4, $5, $6) returning id
`

type InsertUserParams struct {
	ID                   persist.DBID                 `json:"id"`
	Username             sql.NullString               `json:"username"`
	UsernameIdempotent   sql.NullString               `json:"username_idempotent"`
	Bio                  sql.NullString               `json:"bio"`
	Universal            bool                         `json:"universal"`
	EmailUnsubscriptions persist.EmailUnsubscriptions `json:"email_unsubscriptions"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (persist.DBID, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.Username,
		arg.UsernameIdempotent,
		arg.Bio,
		arg.Universal,
		arg.EmailUnsubscriptions,
	)
	var id persist.DBID
	err := row.Scan(&id)
	return id, err
}

const insertWallet = `-- name: InsertWallet :exec
with new_wallet as (insert into wallets(id, address, chain, wallet_type) values ($1, $2, $3, $4) returning id)
update users set
    primary_wallet_id = coalesce(users.primary_wallet_id, new_wallet.id),
    wallets = array_append(users.wallets, new_wallet.id)
from new_wallet
where users.id = $5 and not users.deleted
`

type InsertWalletParams struct {
	ID         persist.DBID       `json:"id"`
	Address    persist.Address    `json:"address"`
	Chain      persist.Chain      `json:"chain"`
	WalletType persist.WalletType `json:"wallet_type"`
	UserID     persist.DBID       `json:"user_id"`
}

func (q *Queries) InsertWallet(ctx context.Context, arg InsertWalletParams) error {
	_, err := q.db.Exec(ctx, insertWallet,
		arg.ID,
		arg.Address,
		arg.Chain,
		arg.WalletType,
		arg.UserID,
	)
	return err
}

const invalidateSession = `-- name: InvalidateSession :exec
update sessions set invalidated = true, active_until = least(active_until, now()), last_updated = now() where id = $1 and deleted = false and invalidated = false
`

func (q *Queries) InvalidateSession(ctx context.Context, id persist.DBID) error {
	_, err := q.db.Exec(ctx, invalidateSession, id)
	return err
}

const isActorActionActive = `-- name: IsActorActionActive :one
select exists(
  select 1 from events where deleted = false
  and actor_id = $1
  and action = any($2)
  and created_at > $3 and created_at <= $4
)
`

type IsActorActionActiveParams struct {
	ActorID     sql.NullString     `json:"actor_id"`
	Actions     persist.ActionList `json:"actions"`
	WindowStart time.Time          `json:"window_start"`
	WindowEnd   time.Time          `json:"window_end"`
}

func (q *Queries) IsActorActionActive(ctx context.Context, arg IsActorActionActiveParams) (bool, error) {
	row := q.db.QueryRow(ctx, isActorActionActive,
		arg.ActorID,
		arg.Actions,
		arg.WindowStart,
		arg.WindowEnd,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isActorGalleryActive = `-- name: IsActorGalleryActive :one
select exists(
  select 1 from events where deleted = false
  and actor_id = $1
  and gallery_id = $2
  and created_at > $3 and created_at <= $4
)
`

type IsActorGalleryActiveParams struct {
	ActorID     sql.NullString `json:"actor_id"`
	GalleryID   persist.DBID   `json:"gallery_id"`
	WindowStart time.Time      `json:"window_start"`
	WindowEnd   time.Time      `json:"window_end"`
}

func (q *Queries) IsActorGalleryActive(ctx context.Context, arg IsActorGalleryActiveParams) (bool, error) {
	row := q.db.QueryRow(ctx, isActorGalleryActive,
		arg.ActorID,
		arg.GalleryID,
		arg.WindowStart,
		arg.WindowEnd,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isActorSubjectActionActive = `-- name: IsActorSubjectActionActive :one
select exists(
  select 1 from events where deleted = false
  and actor_id = $1
  and subject_id = $2
  and action = any($3)
  and created_at > $4 and created_at <= $5
)
`

type IsActorSubjectActionActiveParams struct {
	ActorID     sql.NullString     `json:"actor_id"`
	SubjectID   persist.DBID       `json:"subject_id"`
	Actions     persist.ActionList `json:"actions"`
	WindowStart time.Time          `json:"window_start"`
	WindowEnd   time.Time          `json:"window_end"`
}

func (q *Queries) IsActorSubjectActionActive(ctx context.Context, arg IsActorSubjectActionActiveParams) (bool, error) {
	row := q.db.QueryRow(ctx, isActorSubjectActionActive,
		arg.ActorID,
		arg.SubjectID,
		arg.Actions,
		arg.WindowStart,
		arg.WindowEnd,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isActorSubjectActive = `-- name: IsActorSubjectActive :one
select exists(
  select 1 from events where deleted = false
  and actor_id = $1
  and subject_id = $2
  and created_at > $3 and created_at <= $4
)
`

type IsActorSubjectActiveParams struct {
	ActorID     sql.NullString `json:"actor_id"`
	SubjectID   persist.DBID   `json:"subject_id"`
	WindowStart time.Time      `json:"window_start"`
	WindowEnd   time.Time      `json:"window_end"`
}

func (q *Queries) IsActorSubjectActive(ctx context.Context, arg IsActorSubjectActiveParams) (bool, error) {
	row := q.db.QueryRow(ctx, isActorSubjectActive,
		arg.ActorID,
		arg.SubjectID,
		arg.WindowStart,
		arg.WindowEnd,
	)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isFeedEventExistsForGroup = `-- name: IsFeedEventExistsForGroup :one
SELECT exists(
  SELECT 1 FROM feed_events WHERE deleted = false
  AND group_id = $1
)
`

func (q *Queries) IsFeedEventExistsForGroup(ctx context.Context, groupID sql.NullString) (bool, error) {
	row := q.db.QueryRow(ctx, isFeedEventExistsForGroup, groupID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isFeedUserActionBlocked = `-- name: IsFeedUserActionBlocked :one
SELECT EXISTS(SELECT 1 FROM feed_blocklist WHERE user_id = $1 AND (action = $2 or action = '') AND deleted = false)
`

type IsFeedUserActionBlockedParams struct {
	UserID persist.DBID   `json:"user_id"`
	Action persist.Action `json:"action"`
}

func (q *Queries) IsFeedUserActionBlocked(ctx context.Context, arg IsFeedUserActionBlockedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isFeedUserActionBlocked, arg.UserID, arg.Action)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isMemberOfCommunity = `-- name: IsMemberOfCommunity :one
select exists (select id, deleted, version, created_at, last_updated, name__deprecated, description__deprecated, collectors_note, token_uri__deprecated, token_type__deprecated, token_id, quantity, ownership_history__deprecated, external_url__deprecated, block_number, owner_user_id, owned_by_wallets, chain, contract_id, is_user_marked_spam, is_provider_marked_spam__deprecated, last_synced, fallback_media__deprecated, token_media_id__deprecated, is_creator_token, is_holder_token, displayable, token_definition_id from tokens where not deleted and displayable and owner_user_id = $1 and contract_id = $2 limit 1) is_member
`

type IsMemberOfCommunityParams struct {
	UserID     persist.DBID `json:"user_id"`
	ContractID persist.DBID `json:"contract_id"`
}

func (q *Queries) IsMemberOfCommunity(ctx context.Context, arg IsMemberOfCommunityParams) (bool, error) {
	row := q.db.QueryRow(ctx, isMemberOfCommunity, arg.UserID, arg.ContractID)
	var is_member bool
	err := row.Scan(&is_member)
	return is_member, err
}

const paginateGlobalFeed = `-- name: PaginateGlobalFeed :many
SELECT id, feed_entity_type, created_at, actor_id
FROM feed_entities
WHERE (created_at, id) < ($1, $2)
        AND (created_at, id) > ($3, $4)
ORDER BY 
    CASE WHEN $5::bool THEN (created_at, id) END ASC,
    CASE WHEN NOT $5::bool THEN (created_at, id) END DESC
LIMIT $6
`

type PaginateGlobalFeedParams struct {
	CurBeforeTime time.Time    `json:"cur_before_time"`
	CurBeforeID   persist.DBID `json:"cur_before_id"`
	CurAfterTime  time.Time    `json:"cur_after_time"`
	CurAfterID    persist.DBID `json:"cur_after_id"`
	PagingForward bool         `json:"paging_forward"`
	Limit         int32        `json:"limit"`
}

func (q *Queries) PaginateGlobalFeed(ctx context.Context, arg PaginateGlobalFeedParams) ([]FeedEntity, error) {
	rows, err := q.db.Query(ctx, paginateGlobalFeed,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedEntity
	for rows.Next() {
		var i FeedEntity
		if err := rows.Scan(
			&i.ID,
			&i.FeedEntityType,
			&i.CreatedAt,
			&i.ActorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paginatePersonalFeedByUserID = `-- name: PaginatePersonalFeedByUserID :many
select fe.id, fe.feed_entity_type, fe.created_at, fe.actor_id from feed_entities fe, follows fl
    where fl.deleted = false
      and fe.actor_id = fl.followee
      and fl.follower = $1
      and (fe.created_at, fe.id) < ($2, $3)
      and (fe.created_at, fe.id) > ($4, $5)
order by
    case when $6::bool then (fe.created_at, fe.id) end asc,
    case when not $6::bool then (fe.created_at, fe.id) end desc
limit $7
`

type PaginatePersonalFeedByUserIDParams struct {
	Follower      persist.DBID `json:"follower"`
	CurBeforeTime time.Time    `json:"cur_before_time"`
	CurBeforeID   persist.DBID `json:"cur_before_id"`
	CurAfterTime  time.Time    `json:"cur_after_time"`
	CurAfterID    persist.DBID `json:"cur_after_id"`
	PagingForward bool         `json:"paging_forward"`
	Limit         int32        `json:"limit"`
}

func (q *Queries) PaginatePersonalFeedByUserID(ctx context.Context, arg PaginatePersonalFeedByUserIDParams) ([]FeedEntity, error) {
	rows, err := q.db.Query(ctx, paginatePersonalFeedByUserID,
		arg.Follower,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedEntity
	for rows.Next() {
		var i FeedEntity
		if err := rows.Scan(
			&i.ID,
			&i.FeedEntityType,
			&i.CreatedAt,
			&i.ActorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paginatePostsByContractIDAndProjectID = `-- name: PaginatePostsByContractIDAndProjectID :many
with valid_post_ids as (
    SELECT distinct on (posts.id) posts.id
    FROM posts
        JOIN tokens on tokens.id = ANY(posts.token_ids)
            and tokens.displayable
            and tokens.deleted = false
            and tokens.contract_id = $7
            and ('x' || lpad(substring(tokens.token_id, 1, 16), 16, '0'))::bit(64)::bigint / 1000000 = $8::int
    WHERE $7 = ANY(posts.contract_ids)
      AND posts.deleted = false
)
SELECT posts.id, posts.version, posts.token_ids, posts.contract_ids, posts.actor_id, posts.caption, posts.created_at, posts.last_updated, posts.deleted from posts
    join valid_post_ids on posts.id = valid_post_ids.id
WHERE (posts.created_at, posts.id) < ($1, $2)
  AND (posts.created_at, posts.id) > ($3, $4)
ORDER BY
    CASE WHEN $5::bool THEN (posts.created_at, posts.id) END ASC,
    CASE WHEN NOT $5::bool THEN (posts.created_at, posts.id) END DESC
LIMIT $6
`

type PaginatePostsByContractIDAndProjectIDParams struct {
	CurBeforeTime time.Time    `json:"cur_before_time"`
	CurBeforeID   persist.DBID `json:"cur_before_id"`
	CurAfterTime  time.Time    `json:"cur_after_time"`
	CurAfterID    persist.DBID `json:"cur_after_id"`
	PagingForward bool         `json:"paging_forward"`
	Limit         int32        `json:"limit"`
	ContractID    persist.DBID `json:"contract_id"`
	ProjectIDInt  int32        `json:"project_id_int"`
}

func (q *Queries) PaginatePostsByContractIDAndProjectID(ctx context.Context, arg PaginatePostsByContractIDAndProjectIDParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, paginatePostsByContractIDAndProjectID,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
		arg.Limit,
		arg.ContractID,
		arg.ProjectIDInt,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.TokenIds,
			&i.ContractIds,
			&i.ActorID,
			&i.Caption,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paginatePostsByUserID = `-- name: PaginatePostsByUserID :many
select id, version, token_ids, contract_ids, actor_id, caption, created_at, last_updated, deleted
from posts
where actor_id = $1
        and (created_at, id) < ($2, $3)
        and (created_at, id) > ($4, $5)
        and not posts.deleted
order by
    case when $6::bool then (created_at, id) end asc,
    case when not $6::bool then (created_at, id) end desc
limit $7
`

type PaginatePostsByUserIDParams struct {
	UserID        persist.DBID `json:"user_id"`
	CurBeforeTime time.Time    `json:"cur_before_time"`
	CurBeforeID   persist.DBID `json:"cur_before_id"`
	CurAfterTime  time.Time    `json:"cur_after_time"`
	CurAfterID    persist.DBID `json:"cur_after_id"`
	PagingForward bool         `json:"paging_forward"`
	Limit         int32        `json:"limit"`
}

func (q *Queries) PaginatePostsByUserID(ctx context.Context, arg PaginatePostsByUserIDParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, paginatePostsByUserID,
		arg.UserID,
		arg.CurBeforeTime,
		arg.CurBeforeID,
		arg.CurAfterTime,
		arg.CurAfterID,
		arg.PagingForward,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.TokenIds,
			&i.ContractIds,
			&i.ActorID,
			&i.Caption,
			&i.CreatedAt,
			&i.LastUpdated,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const redeemMerch = `-- name: RedeemMerch :one
update merch set redeemed = true, token_id = $1, last_updated = now() where id = (select m.id from merch m where m.object_type = $2 and m.token_id is null and m.redeemed = false and m.deleted = false order by m.id limit 1) and token_id is null and redeemed = false returning discount_code
`

type RedeemMerchParams struct {
	TokenHex   persist.TokenID `json:"token_hex"`
	ObjectType int32           `json:"object_type"`
}

func (q *Queries) RedeemMerch(ctx context.Context, arg RedeemMerchParams) (sql.NullString, error) {
	row := q.db.QueryRow(ctx, redeemMerch, arg.TokenHex, arg.ObjectType)
	var discount_code sql.NullString
	err := row.Scan(&discount_code)
	return discount_code, err
}

const removeCollectionFromGallery = `-- name: RemoveCollectionFromGallery :exec
update galleries set collections = array_remove(collections, $1), last_updated = now() where id = $2 and deleted = false
`

type RemoveCollectionFromGalleryParams struct {
	CollectionID interface{}  `json:"collection_id"`
	GalleryID    persist.DBID `json:"gallery_id"`
}

func (q *Queries) RemoveCollectionFromGallery(ctx context.Context, arg RemoveCollectionFromGalleryParams) error {
	_, err := q.db.Exec(ctx, removeCollectionFromGallery, arg.CollectionID, arg.GalleryID)
	return err
}

const removeContractOverrideCreator = `-- name: RemoveContractOverrideCreator :exec
update contracts set override_creator_user_id = null, last_updated = now() where id = $1 and deleted = false
`

func (q *Queries) RemoveContractOverrideCreator(ctx context.Context, contractID persist.DBID) error {
	_, err := q.db.Exec(ctx, removeContractOverrideCreator, contractID)
	return err
}

const removeProfileImage = `-- name: RemoveProfileImage :exec
with remove_image as (
    update profile_images set deleted = true, last_updated = now() where user_id = $1 and not deleted
)
update users set profile_image_id = null where users.id = $1 and not users.deleted
`

func (q *Queries) RemoveProfileImage(ctx context.Context, id persist.DBID) error {
	_, err := q.db.Exec(ctx, removeProfileImage, id)
	return err
}

const removeSocialFromUser = `-- name: RemoveSocialFromUser :exec
update pii.for_users set pii_socials = pii_socials - $1::varchar where user_id = $2
`

type RemoveSocialFromUserParams struct {
	Social string       `json:"social"`
	UserID persist.DBID `json:"user_id"`
}

func (q *Queries) RemoveSocialFromUser(ctx context.Context, arg RemoveSocialFromUserParams) error {
	_, err := q.db.Exec(ctx, removeSocialFromUser, arg.Social, arg.UserID)
	return err
}

const removeStaleCreatorStatusFromTokens = `-- name: RemoveStaleCreatorStatusFromTokens :exec
with created_contracts as (
    select contract_id, creator_user_id, chain, creator_address from contract_creators where creator_user_id = $1
)
update tokens
    set is_creator_token = false,
        last_updated = now()
    where owner_user_id = $1
      and is_creator_token = true
      and not exists(select 1 from created_contracts where created_contracts.contract_id = tokens.contract)
      and not deleted
`

func (q *Queries) RemoveStaleCreatorStatusFromTokens(ctx context.Context, userID persist.DBID) error {
	_, err := q.db.Exec(ctx, removeStaleCreatorStatusFromTokens, userID)
	return err
}

const removeWalletFromTokens = `-- name: RemoveWalletFromTokens :exec
update tokens t
    set owned_by_wallets = array_remove(owned_by_wallets, $1::varchar),
        last_updated = now()
    from users u
    where u.id = $2
      and t.owner_user_id = u.id
      and t.owned_by_wallets @> array[$1::varchar]
      and not u.wallets @> array[$1::varchar]
      and not u.deleted
      and not t.deleted
`

type RemoveWalletFromTokensParams struct {
	WalletID string       `json:"wallet_id"`
	UserID   persist.DBID `json:"user_id"`
}

func (q *Queries) RemoveWalletFromTokens(ctx context.Context, arg RemoveWalletFromTokensParams) error {
	_, err := q.db.Exec(ctx, removeWalletFromTokens, arg.WalletID, arg.UserID)
	return err
}

const setContractOverrideCreator = `-- name: SetContractOverrideCreator :exec
update contracts set override_creator_user_id = $1, last_updated = now() where id = $2 and deleted = false
`

type SetContractOverrideCreatorParams struct {
	CreatorUserID persist.DBID `json:"creator_user_id"`
	ContractID    persist.DBID `json:"contract_id"`
}

func (q *Queries) SetContractOverrideCreator(ctx context.Context, arg SetContractOverrideCreatorParams) error {
	_, err := q.db.Exec(ctx, setContractOverrideCreator, arg.CreatorUserID, arg.ContractID)
	return err
}

const setProfileImageToENS = `-- name: SetProfileImageToENS :one
with profile_images as (
    insert into profile_images (id, user_id, source_type, wallet_id, ens_domain, ens_avatar_uri, deleted, last_updated)
    values ($2, $1, $3, $4, $5, $6, false, now())
    on conflict (user_id) do update set wallet_id = excluded.wallet_id
        , ens_domain = excluded.ens_domain
        , ens_avatar_uri = excluded.ens_avatar_uri
        , source_type = excluded.source_type
        , deleted = excluded.deleted
        , last_updated = excluded.last_updated
    returning id, user_id, token_id, source_type, deleted, created_at, last_updated, wallet_id, ens_avatar_uri, ens_domain
)
update users set profile_image_id = profile_images.id from profile_images where users.id = $1 and not users.deleted returning profile_images.id, profile_images.user_id, profile_images.token_id, profile_images.source_type, profile_images.deleted, profile_images.created_at, profile_images.last_updated, profile_images.wallet_id, profile_images.ens_avatar_uri, profile_images.ens_domain
`

type SetProfileImageToENSParams struct {
	UserID        persist.DBID               `json:"user_id"`
	ProfileID     persist.DBID               `json:"profile_id"`
	EnsSourceType persist.ProfileImageSource `json:"ens_source_type"`
	WalletID      persist.DBID               `json:"wallet_id"`
	EnsDomain     sql.NullString             `json:"ens_domain"`
	EnsAvatarUri  sql.NullString             `json:"ens_avatar_uri"`
}

type SetProfileImageToENSRow struct {
	ProfileImage ProfileImage `json:"profileimage"`
}

func (q *Queries) SetProfileImageToENS(ctx context.Context, arg SetProfileImageToENSParams) (SetProfileImageToENSRow, error) {
	row := q.db.QueryRow(ctx, setProfileImageToENS,
		arg.UserID,
		arg.ProfileID,
		arg.EnsSourceType,
		arg.WalletID,
		arg.EnsDomain,
		arg.EnsAvatarUri,
	)
	var i SetProfileImageToENSRow
	err := row.Scan(
		&i.ProfileImage.ID,
		&i.ProfileImage.UserID,
		&i.ProfileImage.TokenID,
		&i.ProfileImage.SourceType,
		&i.ProfileImage.Deleted,
		&i.ProfileImage.CreatedAt,
		&i.ProfileImage.LastUpdated,
		&i.ProfileImage.WalletID,
		&i.ProfileImage.EnsAvatarUri,
		&i.ProfileImage.EnsDomain,
	)
	return i, err
}

const setProfileImageToToken = `-- name: SetProfileImageToToken :exec
with new_image as (
    insert into profile_images (id, user_id, source_type, token_id, deleted, last_updated)
    values ($2, $1, $3, $4, false, now())
    on conflict (user_id) do update set token_id = excluded.token_id
        , source_type = excluded.source_type
        , deleted = excluded.deleted
        , last_updated = excluded.last_updated
    returning id
)
update users set profile_image_id = new_image.id from new_image where users.id = $1 and not deleted
`

type SetProfileImageToTokenParams struct {
	UserID          persist.DBID               `json:"user_id"`
	ProfileID       persist.DBID               `json:"profile_id"`
	TokenSourceType persist.ProfileImageSource `json:"token_source_type"`
	TokenID         persist.DBID               `json:"token_id"`
}

func (q *Queries) SetProfileImageToToken(ctx context.Context, arg SetProfileImageToTokenParams) error {
	_, err := q.db.Exec(ctx, setProfileImageToToken,
		arg.UserID,
		arg.ProfileID,
		arg.TokenSourceType,
		arg.TokenID,
	)
	return err
}

const unblockUserFromFeed = `-- name: UnblockUserFromFeed :exec
UPDATE feed_blocklist SET deleted = true WHERE user_id = $1
`

func (q *Queries) UnblockUserFromFeed(ctx context.Context, userID persist.DBID) error {
	_, err := q.db.Exec(ctx, unblockUserFromFeed, userID)
	return err
}

const updateCollectionGallery = `-- name: UpdateCollectionGallery :exec
update collections set gallery_id = $1, last_updated = now() where id = $2 and deleted = false
`

type UpdateCollectionGalleryParams struct {
	GalleryID persist.DBID `json:"gallery_id"`
	ID        persist.DBID `json:"id"`
}

func (q *Queries) UpdateCollectionGallery(ctx context.Context, arg UpdateCollectionGalleryParams) error {
	_, err := q.db.Exec(ctx, updateCollectionGallery, arg.GalleryID, arg.ID)
	return err
}

const updateCollectionTokens = `-- name: UpdateCollectionTokens :exec
update collections set nfts = $1, last_updated = now() where id = $2 and deleted = false
`

type UpdateCollectionTokensParams struct {
	Nfts persist.DBIDList `json:"nfts"`
	ID   persist.DBID     `json:"id"`
}

func (q *Queries) UpdateCollectionTokens(ctx context.Context, arg UpdateCollectionTokensParams) error {
	_, err := q.db.Exec(ctx, updateCollectionTokens, arg.Nfts, arg.ID)
	return err
}

const updateCollectionsInfo = `-- name: UpdateCollectionsInfo :exec
with updates as (
    select unnest($1::varchar[]) as id, unnest($2::varchar[]) as name, unnest($3::varchar[]) as collectors_note, unnest($4::jsonb[]) as layout, unnest($5::jsonb[]) as token_settings, unnest($6::bool[]) as hidden
)
update collections c set collectors_note = updates.collectors_note, layout = updates.layout, token_settings = updates.token_settings, hidden = updates.hidden, name = updates.name, last_updated = now(), version = 1 from updates where c.id = updates.id and c.deleted = false
`

type UpdateCollectionsInfoParams struct {
	Ids             []string       `json:"ids"`
	Names           []string       `json:"names"`
	CollectorsNotes []string       `json:"collectors_notes"`
	Layouts         []pgtype.JSONB `json:"layouts"`
	TokenSettings   []pgtype.JSONB `json:"token_settings"`
	Hidden          []bool         `json:"hidden"`
}

func (q *Queries) UpdateCollectionsInfo(ctx context.Context, arg UpdateCollectionsInfoParams) error {
	_, err := q.db.Exec(ctx, updateCollectionsInfo,
		arg.Ids,
		arg.Names,
		arg.CollectorsNotes,
		arg.Layouts,
		arg.TokenSettings,
		arg.Hidden,
	)
	return err
}

const updateEventCaptionByGroup = `-- name: UpdateEventCaptionByGroup :exec
update events set caption = $1 where group_id = $2 and deleted = false
`

type UpdateEventCaptionByGroupParams struct {
	Caption sql.NullString `json:"caption"`
	GroupID sql.NullString `json:"group_id"`
}

func (q *Queries) UpdateEventCaptionByGroup(ctx context.Context, arg UpdateEventCaptionByGroupParams) error {
	_, err := q.db.Exec(ctx, updateEventCaptionByGroup, arg.Caption, arg.GroupID)
	return err
}

const updateFeedEventCaptionByGroup = `-- name: UpdateFeedEventCaptionByGroup :one
UPDATE feed_events SET caption = (select caption from events where events.group_id = $1) WHERE group_id = $1 AND deleted = false returning id, version, owner_id, action, data, event_time, event_ids, deleted, last_updated, created_at, caption, group_id
`

func (q *Queries) UpdateFeedEventCaptionByGroup(ctx context.Context, groupID sql.NullString) (FeedEvent, error) {
	row := q.db.QueryRow(ctx, updateFeedEventCaptionByGroup, groupID)
	var i FeedEvent
	err := row.Scan(
		&i.ID,
		&i.Version,
		&i.OwnerID,
		&i.Action,
		&i.Data,
		&i.EventTime,
		&i.EventIds,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Caption,
		&i.GroupID,
	)
	return i, err
}

const updateGalleryCollections = `-- name: UpdateGalleryCollections :exec
update galleries set collections = $1, last_updated = now() where galleries.id = $2 and galleries.deleted = false and (select count(*) from collections c where c.id = any($1) and c.gallery_id = $2 and c.deleted = false) = cardinality($1)
`

type UpdateGalleryCollectionsParams struct {
	Collections persist.DBIDList `json:"collections"`
	GalleryID   persist.DBID     `json:"gallery_id"`
}

func (q *Queries) UpdateGalleryCollections(ctx context.Context, arg UpdateGalleryCollectionsParams) error {
	_, err := q.db.Exec(ctx, updateGalleryCollections, arg.Collections, arg.GalleryID)
	return err
}

const updateGalleryHidden = `-- name: UpdateGalleryHidden :one
update galleries set hidden = $1, last_updated = now() where id = $2 and deleted = false returning id, deleted, last_updated, created_at, version, owner_user_id, collections, name, description, hidden, position
`

type UpdateGalleryHiddenParams struct {
	Hidden bool         `json:"hidden"`
	ID     persist.DBID `json:"id"`
}

func (q *Queries) UpdateGalleryHidden(ctx context.Context, arg UpdateGalleryHiddenParams) (Gallery, error) {
	row := q.db.QueryRow(ctx, updateGalleryHidden, arg.Hidden, arg.ID)
	var i Gallery
	err := row.Scan(
		&i.ID,
		&i.Deleted,
		&i.LastUpdated,
		&i.CreatedAt,
		&i.Version,
		&i.OwnerUserID,
		&i.Collections,
		&i.Name,
		&i.Description,
		&i.Hidden,
		&i.Position,
	)
	return i, err
}

const updateGalleryInfo = `-- name: UpdateGalleryInfo :exec
update galleries set name = case when $1::bool then $2 else name end, description = case when $3::bool then $4 else description end, last_updated = now() where id = $5 and deleted = false
`

type UpdateGalleryInfoParams struct {
	NameSet        bool         `json:"name_set"`
	Name           string       `json:"name"`
	DescriptionSet bool         `json:"description_set"`
	Description    string       `json:"description"`
	ID             persist.DBID `json:"id"`
}

func (q *Queries) UpdateGalleryInfo(ctx context.Context, arg UpdateGalleryInfoParams) error {
	_, err := q.db.Exec(ctx, updateGalleryInfo,
		arg.NameSet,
		arg.Name,
		arg.DescriptionSet,
		arg.Description,
		arg.ID,
	)
	return err
}

const updateGalleryPositions = `-- name: UpdateGalleryPositions :exec
with updates as (
    select unnest($2::text[]) as id, unnest($3::text[]) as position
)
update galleries g set position = updates.position, last_updated = now() from updates where g.id = updates.id and deleted = false and g.owner_user_id = $1
`

type UpdateGalleryPositionsParams struct {
	OwnerUserID persist.DBID `json:"owner_user_id"`
	GalleryIds  []string     `json:"gallery_ids"`
	Positions   []string     `json:"positions"`
}

func (q *Queries) UpdateGalleryPositions(ctx context.Context, arg UpdateGalleryPositionsParams) error {
	_, err := q.db.Exec(ctx, updateGalleryPositions, arg.OwnerUserID, arg.GalleryIds, arg.Positions)
	return err
}

const updateNotification = `-- name: UpdateNotification :exec
UPDATE notifications SET data = $2, event_ids = event_ids || $3, amount = $4, last_updated = now(), seen = false WHERE id = $1 AND deleted = false AND NOT amount = $4
`

type UpdateNotificationParams struct {
	ID       persist.DBID             `json:"id"`
	Data     persist.NotificationData `json:"data"`
	EventIds persist.DBIDList         `json:"event_ids"`
	Amount   int32                    `json:"amount"`
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) error {
	_, err := q.db.Exec(ctx, updateNotification,
		arg.ID,
		arg.Data,
		arg.EventIds,
		arg.Amount,
	)
	return err
}

const updateNotificationSettingsByID = `-- name: UpdateNotificationSettingsByID :exec
UPDATE users SET notification_settings = $2 WHERE id = $1
`

type UpdateNotificationSettingsByIDParams struct {
	ID                   persist.DBID                     `json:"id"`
	NotificationSettings persist.UserNotificationSettings `json:"notification_settings"`
}

func (q *Queries) UpdateNotificationSettingsByID(ctx context.Context, arg UpdateNotificationSettingsByIDParams) error {
	_, err := q.db.Exec(ctx, updateNotificationSettingsByID, arg.ID, arg.NotificationSettings)
	return err
}

const updatePushTickets = `-- name: UpdatePushTickets :exec
with updates as (
    select unnest($1::text[]) as id, unnest($2::timestamptz[]) as check_after, unnest($3::int[]) as num_check_attempts, unnest($4::text[]) as status, unnest($5::bool[]) as deleted
)
update push_notification_tickets t set check_after = updates.check_after, num_check_attempts = updates.num_check_attempts, status = updates.status, deleted = updates.deleted from updates where t.id = updates.id and t.deleted = false
`

type UpdatePushTicketsParams struct {
	Ids              []string    `json:"ids"`
	CheckAfter       []time.Time `json:"check_after"`
	NumCheckAttempts []int32     `json:"num_check_attempts"`
	Status           []string    `json:"status"`
	Deleted          []bool      `json:"deleted"`
}

func (q *Queries) UpdatePushTickets(ctx context.Context, arg UpdatePushTicketsParams) error {
	_, err := q.db.Exec(ctx, updatePushTickets,
		arg.Ids,
		arg.CheckAfter,
		arg.NumCheckAttempts,
		arg.Status,
		arg.Deleted,
	)
	return err
}

const updateTokenCollectorsNoteByTokenDbidUserId = `-- name: UpdateTokenCollectorsNoteByTokenDbidUserId :exec
update tokens set collectors_note = $1, last_updated = now() where id = $2 and owner_user_id = $3
`

type UpdateTokenCollectorsNoteByTokenDbidUserIdParams struct {
	CollectorsNote sql.NullString `json:"collectors_note"`
	ID             persist.DBID   `json:"id"`
	OwnerUserID    persist.DBID   `json:"owner_user_id"`
}

func (q *Queries) UpdateTokenCollectorsNoteByTokenDbidUserId(ctx context.Context, arg UpdateTokenCollectorsNoteByTokenDbidUserIdParams) error {
	_, err := q.db.Exec(ctx, updateTokenCollectorsNoteByTokenDbidUserId, arg.CollectorsNote, arg.ID, arg.OwnerUserID)
	return err
}

const updateTokenMetadataFieldsByTokenIdentifiers = `-- name: UpdateTokenMetadataFieldsByTokenIdentifiers :one
update token_definitions
set name = $1,
    description = $2,
    last_updated = now()
where token_id = $3
    and contract_id = $4
    and chain = $5
    and deleted = false
returning id, created_at, last_updated, deleted, name, description, token_type, token_id, external_url, chain, is_provider_marked_spam, metadata, fallback_media, contract_address, contract_id, token_media_id
`

type UpdateTokenMetadataFieldsByTokenIdentifiersParams struct {
	Name        sql.NullString  `json:"name"`
	Description sql.NullString  `json:"description"`
	TokenID     persist.TokenID `json:"token_id"`
	ContractID  persist.DBID    `json:"contract_id"`
	Chain       persist.Chain   `json:"chain"`
}

func (q *Queries) UpdateTokenMetadataFieldsByTokenIdentifiers(ctx context.Context, arg UpdateTokenMetadataFieldsByTokenIdentifiersParams) (TokenDefinition, error) {
	row := q.db.QueryRow(ctx, updateTokenMetadataFieldsByTokenIdentifiers,
		arg.Name,
		arg.Description,
		arg.TokenID,
		arg.ContractID,
		arg.Chain,
	)
	var i TokenDefinition
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastUpdated,
		&i.Deleted,
		&i.Name,
		&i.Description,
		&i.TokenType,
		&i.TokenID,
		&i.ExternalUrl,
		&i.Chain,
		&i.IsProviderMarkedSpam,
		&i.Metadata,
		&i.FallbackMedia,
		&i.ContractAddress,
		&i.ContractID,
		&i.TokenMediaID,
	)
	return i, err
}

const updateTokensAsUserMarkedSpam = `-- name: UpdateTokensAsUserMarkedSpam :exec
update tokens set is_user_marked_spam = $1, last_updated = now() where owner_user_id = $2 and id = any($3) and deleted = false
`

type UpdateTokensAsUserMarkedSpamParams struct {
	IsUserMarkedSpam sql.NullBool     `json:"is_user_marked_spam"`
	OwnerUserID      persist.DBID     `json:"owner_user_id"`
	TokenIds         persist.DBIDList `json:"token_ids"`
}

func (q *Queries) UpdateTokensAsUserMarkedSpam(ctx context.Context, arg UpdateTokensAsUserMarkedSpamParams) error {
	_, err := q.db.Exec(ctx, updateTokensAsUserMarkedSpam, arg.IsUserMarkedSpam, arg.OwnerUserID, arg.TokenIds)
	return err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
with upsert_pii as (
    insert into pii.for_users (user_id, pii_email_address) values ($2, $3)
        on conflict (user_id) do update set pii_email_address = excluded.pii_email_address
),

upsert_metadata as (
    insert into dev_metadata_users (user_id, has_email_address) values ($2, ($3 is not null))
        on conflict (user_id) do update set has_email_address = excluded.has_email_address
)

update users set email_verified = $1 where users.id = $2
`

type UpdateUserEmailParams struct {
	EmailVerificationStatus int32         `json:"email_verification_status"`
	UserID                  persist.DBID  `json:"user_id"`
	EmailAddress            persist.Email `json:"email_address"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.EmailVerificationStatus, arg.UserID, arg.EmailAddress)
	return err
}

const updateUserEmailUnsubscriptions = `-- name: UpdateUserEmailUnsubscriptions :exec
UPDATE users SET email_unsubscriptions = $2 WHERE id = $1
`

type UpdateUserEmailUnsubscriptionsParams struct {
	ID                   persist.DBID                 `json:"id"`
	EmailUnsubscriptions persist.EmailUnsubscriptions `json:"email_unsubscriptions"`
}

func (q *Queries) UpdateUserEmailUnsubscriptions(ctx context.Context, arg UpdateUserEmailUnsubscriptionsParams) error {
	_, err := q.db.Exec(ctx, updateUserEmailUnsubscriptions, arg.ID, arg.EmailUnsubscriptions)
	return err
}

const updateUserExperience = `-- name: UpdateUserExperience :exec
update users set user_experiences = user_experiences || $1 where id = $2
`

type UpdateUserExperienceParams struct {
	Experience pgtype.JSONB `json:"experience"`
	UserID     persist.DBID `json:"user_id"`
}

func (q *Queries) UpdateUserExperience(ctx context.Context, arg UpdateUserExperienceParams) error {
	_, err := q.db.Exec(ctx, updateUserExperience, arg.Experience, arg.UserID)
	return err
}

const updateUserFeaturedGallery = `-- name: UpdateUserFeaturedGallery :exec
update users set featured_gallery = $1, last_updated = now() from galleries where users.id = $2 and galleries.id = $1 and galleries.owner_user_id = $2 and galleries.deleted = false
`

type UpdateUserFeaturedGalleryParams struct {
	GalleryID persist.DBID `json:"gallery_id"`
	UserID    persist.DBID `json:"user_id"`
}

func (q *Queries) UpdateUserFeaturedGallery(ctx context.Context, arg UpdateUserFeaturedGalleryParams) error {
	_, err := q.db.Exec(ctx, updateUserFeaturedGallery, arg.GalleryID, arg.UserID)
	return err
}

const updateUserPrimaryWallet = `-- name: UpdateUserPrimaryWallet :exec
update users set primary_wallet_id = $1 from wallets
    where users.id = $2 and wallets.id = $1
    and wallets.id = any(users.wallets) and wallets.deleted = false
`

type UpdateUserPrimaryWalletParams struct {
	WalletID persist.DBID `json:"wallet_id"`
	UserID   persist.DBID `json:"user_id"`
}

func (q *Queries) UpdateUserPrimaryWallet(ctx context.Context, arg UpdateUserPrimaryWalletParams) error {
	_, err := q.db.Exec(ctx, updateUserPrimaryWallet, arg.WalletID, arg.UserID)
	return err
}

const updateUserSocials = `-- name: UpdateUserSocials :exec
update pii.for_users set pii_socials = $1 where user_id = $2
`

type UpdateUserSocialsParams struct {
	Socials persist.Socials `json:"socials"`
	UserID  persist.DBID    `json:"user_id"`
}

func (q *Queries) UpdateUserSocials(ctx context.Context, arg UpdateUserSocialsParams) error {
	_, err := q.db.Exec(ctx, updateUserSocials, arg.Socials, arg.UserID)
	return err
}

const updateUserVerificationStatus = `-- name: UpdateUserVerificationStatus :exec
UPDATE users SET email_verified = $2 WHERE id = $1
`

type UpdateUserVerificationStatusParams struct {
	ID            persist.DBID                    `json:"id"`
	EmailVerified persist.EmailVerificationStatus `json:"email_verified"`
}

func (q *Queries) UpdateUserVerificationStatus(ctx context.Context, arg UpdateUserVerificationStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserVerificationStatus, arg.ID, arg.EmailVerified)
	return err
}

const upsertSession = `-- name: UpsertSession :one
insert into sessions (id, user_id,
                      created_at, created_with_user_agent, created_with_platform, created_with_os,
                      last_refreshed, last_user_agent, last_platform, last_os, current_refresh_id, active_until, invalidated, last_updated, deleted)
    values ($1, $2, now(), $3, $4, $5, now(), $3, $4, $5, $6, $7, false, now(), false)
    on conflict (id) where deleted = false do update set
        last_refreshed = case when sessions.invalidated then sessions.last_refreshed else excluded.last_refreshed end,
        last_user_agent = case when sessions.invalidated then sessions.last_user_agent else excluded.last_user_agent end,
        last_platform = case when sessions.invalidated then sessions.last_platform else excluded.last_platform end,
        last_os = case when sessions.invalidated then sessions.last_os else excluded.last_os end,
        current_refresh_id = case when sessions.invalidated then sessions.current_refresh_id else excluded.current_refresh_id end,
        last_updated = case when sessions.invalidated then sessions.last_updated else excluded.last_updated end,
        active_until = case when sessions.invalidated then sessions.active_until else greatest(sessions.active_until, excluded.active_until) end
    returning id, user_id, created_at, created_with_user_agent, created_with_platform, created_with_os, last_refreshed, last_user_agent, last_platform, last_os, current_refresh_id, active_until, invalidated, last_updated, deleted
`

type UpsertSessionParams struct {
	ID               persist.DBID `json:"id"`
	UserID           persist.DBID `json:"user_id"`
	UserAgent        string       `json:"user_agent"`
	Platform         string       `json:"platform"`
	Os               string       `json:"os"`
	CurrentRefreshID string       `json:"current_refresh_id"`
	ActiveUntil      time.Time    `json:"active_until"`
}

func (q *Queries) UpsertSession(ctx context.Context, arg UpsertSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, upsertSession,
		arg.ID,
		arg.UserID,
		arg.UserAgent,
		arg.Platform,
		arg.Os,
		arg.CurrentRefreshID,
		arg.ActiveUntil,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.CreatedWithUserAgent,
		&i.CreatedWithPlatform,
		&i.CreatedWithOs,
		&i.LastRefreshed,
		&i.LastUserAgent,
		&i.LastPlatform,
		&i.LastOs,
		&i.CurrentRefreshID,
		&i.ActiveUntil,
		&i.Invalidated,
		&i.LastUpdated,
		&i.Deleted,
	)
	return i, err
}

const upsertSocialOAuth = `-- name: UpsertSocialOAuth :exec
insert into pii.socials_auth (id, user_id, provider, access_token, refresh_token) values ($1, $2, $3, $4, $5) on conflict (user_id, provider) where deleted = false do update set access_token = $4, refresh_token = $5, last_updated = now()
`

type UpsertSocialOAuthParams struct {
	ID           persist.DBID           `json:"id"`
	UserID       persist.DBID           `json:"user_id"`
	Provider     persist.SocialProvider `json:"provider"`
	AccessToken  sql.NullString         `json:"access_token"`
	RefreshToken sql.NullString         `json:"refresh_token"`
}

func (q *Queries) UpsertSocialOAuth(ctx context.Context, arg UpsertSocialOAuthParams) error {
	_, err := q.db.Exec(ctx, upsertSocialOAuth,
		arg.ID,
		arg.UserID,
		arg.Provider,
		arg.AccessToken,
		arg.RefreshToken,
	)
	return err
}

const userHasDuplicateGalleryPositions = `-- name: UserHasDuplicateGalleryPositions :one
select exists(select position,count(*) from galleries where owner_user_id = $1 and deleted = false group by position having count(*) > 1)
`

func (q *Queries) UserHasDuplicateGalleryPositions(ctx context.Context, ownerUserID persist.DBID) (bool, error) {
	row := q.db.QueryRow(ctx, userHasDuplicateGalleryPositions, ownerUserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const userOwnsCollection = `-- name: UserOwnsCollection :one
select exists(select 1 from collections where id = $1 and owner_user_id = $2 and deleted = false)
`

type UserOwnsCollectionParams struct {
	ID          persist.DBID `json:"id"`
	OwnerUserID persist.DBID `json:"owner_user_id"`
}

func (q *Queries) UserOwnsCollection(ctx context.Context, arg UserOwnsCollectionParams) (bool, error) {
	row := q.db.QueryRow(ctx, userOwnsCollection, arg.ID, arg.OwnerUserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const userOwnsGallery = `-- name: UserOwnsGallery :one
select exists(select 1 from galleries where id = $1 and owner_user_id = $2 and deleted = false)
`

type UserOwnsGalleryParams struct {
	ID          persist.DBID `json:"id"`
	OwnerUserID persist.DBID `json:"owner_user_id"`
}

func (q *Queries) UserOwnsGallery(ctx context.Context, arg UserOwnsGalleryParams) (bool, error) {
	row := q.db.QueryRow(ctx, userOwnsGallery, arg.ID, arg.OwnerUserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
