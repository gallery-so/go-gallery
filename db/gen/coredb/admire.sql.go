// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: admire.sql

package coredb

import (
	"context"
	"database/sql"

	"github.com/mikeydub/go-gallery/service/persist"
)

const createAdmire = `-- name: CreateAdmire :one
INSERT INTO admires (id, feed_event_id, post_id, token_id, actor_id)
VALUES ($1, $3, $4, $5, $2)
ON CONFLICT (actor_id, token_id) WHERE deleted = false DO UPDATE SET last_updated = now()
RETURNING id
`

type CreateAdmireParams struct {
	ID        persist.DBID   `db:"id" json:"id"`
	ActorID   persist.DBID   `db:"actor_id" json:"actor_id"`
	FeedEvent sql.NullString `db:"feed_event" json:"feed_event"`
	Post      sql.NullString `db:"post" json:"post"`
	Token     sql.NullString `db:"token" json:"token"`
}

func (q *Queries) CreateAdmire(ctx context.Context, arg CreateAdmireParams) (persist.DBID, error) {
	row := q.db.QueryRow(ctx, createAdmire,
		arg.ID,
		arg.ActorID,
		arg.FeedEvent,
		arg.Post,
		arg.Token,
	)
	var id persist.DBID
	err := row.Scan(&id)
	return id, err
}

const deleteAdmireByID = `-- name: DeleteAdmireByID :exec
update admires set deleted = true where id = $1
`

func (q *Queries) DeleteAdmireByID(ctx context.Context, id persist.DBID) error {
	_, err := q.db.Exec(ctx, deleteAdmireByID, id)
	return err
}
