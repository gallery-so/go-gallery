// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graphql_test

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/mikeydub/go-gallery/service/persist"
)

type AuthMechanism struct {
	Eoa        *EoaAuth        `json:"eoa"`
	GnosisSafe *GnosisSafeAuth `json:"gnosisSafe"`
	Debug      *DebugAuth      `json:"debug"`
	MagicLink  *MagicLinkAuth  `json:"magicLink"`
}

// GetEoa returns AuthMechanism.Eoa, and is useful for accessing the field via an interface.
func (v *AuthMechanism) GetEoa() *EoaAuth { return v.Eoa }

// GetGnosisSafe returns AuthMechanism.GnosisSafe, and is useful for accessing the field via an interface.
func (v *AuthMechanism) GetGnosisSafe() *GnosisSafeAuth { return v.GnosisSafe }

// GetDebug returns AuthMechanism.Debug, and is useful for accessing the field via an interface.
func (v *AuthMechanism) GetDebug() *DebugAuth { return v.Debug }

// GetMagicLink returns AuthMechanism.MagicLink, and is useful for accessing the field via an interface.
func (v *AuthMechanism) GetMagicLink() *MagicLinkAuth { return v.MagicLink }

type Chain string

const (
	ChainEthereum Chain = "Ethereum"
	ChainArbitrum Chain = "Arbitrum"
	ChainPolygon  Chain = "Polygon"
	ChainOptimism Chain = "Optimism"
	ChainTezos    Chain = "Tezos"
	ChainPoap     Chain = "POAP"
)

type ChainAddressInput struct {
	Address string `json:"address"`
	Chain   Chain  `json:"chain"`
}

// GetAddress returns ChainAddressInput.Address, and is useful for accessing the field via an interface.
func (v *ChainAddressInput) GetAddress() string { return v.Address }

// GetChain returns ChainAddressInput.Chain, and is useful for accessing the field via an interface.
func (v *ChainAddressInput) GetChain() Chain { return v.Chain }

type ChainPubKeyInput struct {
	PubKey string `json:"pubKey"`
	Chain  Chain  `json:"chain"`
}

// GetPubKey returns ChainPubKeyInput.PubKey, and is useful for accessing the field via an interface.
func (v *ChainPubKeyInput) GetPubKey() string { return v.PubKey }

// GetChain returns ChainPubKeyInput.Chain, and is useful for accessing the field via an interface.
func (v *ChainPubKeyInput) GetChain() Chain { return v.Chain }

type CollectionLayoutInput struct {
	Sections      []int                          `json:"sections"`
	SectionLayout []CollectionSectionLayoutInput `json:"sectionLayout"`
}

// GetSections returns CollectionLayoutInput.Sections, and is useful for accessing the field via an interface.
func (v *CollectionLayoutInput) GetSections() []int { return v.Sections }

// GetSectionLayout returns CollectionLayoutInput.SectionLayout, and is useful for accessing the field via an interface.
func (v *CollectionLayoutInput) GetSectionLayout() []CollectionSectionLayoutInput {
	return v.SectionLayout
}

type CollectionSectionLayoutInput struct {
	Columns    int   `json:"columns"`
	Whitespace []int `json:"whitespace"`
}

// GetColumns returns CollectionSectionLayoutInput.Columns, and is useful for accessing the field via an interface.
func (v *CollectionSectionLayoutInput) GetColumns() int { return v.Columns }

// GetWhitespace returns CollectionSectionLayoutInput.Whitespace, and is useful for accessing the field via an interface.
func (v *CollectionSectionLayoutInput) GetWhitespace() []int { return v.Whitespace }

type CollectionTokenSettingsInput struct {
	TokenId    persist.DBID `json:"tokenId"`
	RenderLive bool         `json:"renderLive"`
}

// GetTokenId returns CollectionTokenSettingsInput.TokenId, and is useful for accessing the field via an interface.
func (v *CollectionTokenSettingsInput) GetTokenId() persist.DBID { return v.TokenId }

// GetRenderLive returns CollectionTokenSettingsInput.RenderLive, and is useful for accessing the field via an interface.
func (v *CollectionTokenSettingsInput) GetRenderLive() bool { return v.RenderLive }

type CreateCollectionInput struct {
	GalleryId      persist.DBID                   `json:"galleryId"`
	Name           string                         `json:"name"`
	CollectorsNote string                         `json:"collectorsNote"`
	Tokens         []persist.DBID                 `json:"tokens"`
	Layout         CollectionLayoutInput          `json:"layout"`
	TokenSettings  []CollectionTokenSettingsInput `json:"tokenSettings"`
	Caption        *string                        `json:"caption"`
}

// GetGalleryId returns CreateCollectionInput.GalleryId, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetGalleryId() persist.DBID { return v.GalleryId }

// GetName returns CreateCollectionInput.Name, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetName() string { return v.Name }

// GetCollectorsNote returns CreateCollectionInput.CollectorsNote, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetCollectorsNote() string { return v.CollectorsNote }

// GetTokens returns CreateCollectionInput.Tokens, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetTokens() []persist.DBID { return v.Tokens }

// GetLayout returns CreateCollectionInput.Layout, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetLayout() CollectionLayoutInput { return v.Layout }

// GetTokenSettings returns CreateCollectionInput.TokenSettings, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetTokenSettings() []CollectionTokenSettingsInput {
	return v.TokenSettings
}

// GetCaption returns CreateCollectionInput.Caption, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetCaption() *string { return v.Caption }

type CreateUserInput struct {
	Username           string  `json:"username"`
	Bio                *string `json:"bio"`
	Email              *string `json:"email"`
	GalleryName        *string `json:"galleryName"`
	GalleryDescription *string `json:"galleryDescription"`
	GalleryPosition    *string `json:"galleryPosition"`
}

// GetUsername returns CreateUserInput.Username, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetUsername() string { return v.Username }

// GetBio returns CreateUserInput.Bio, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetBio() *string { return v.Bio }

// GetEmail returns CreateUserInput.Email, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetEmail() *string { return v.Email }

// GetGalleryName returns CreateUserInput.GalleryName, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetGalleryName() *string { return v.GalleryName }

// GetGalleryDescription returns CreateUserInput.GalleryDescription, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetGalleryDescription() *string { return v.GalleryDescription }

// GetGalleryPosition returns CreateUserInput.GalleryPosition, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetGalleryPosition() *string { return v.GalleryPosition }

type DebugAuth struct {
	AsUsername     *string             `json:"asUsername"`
	UserId         *persist.DBID       `json:"userId"`
	ChainAddresses []ChainAddressInput `json:"chainAddresses"`
}

// GetAsUsername returns DebugAuth.AsUsername, and is useful for accessing the field via an interface.
func (v *DebugAuth) GetAsUsername() *string { return v.AsUsername }

// GetUserId returns DebugAuth.UserId, and is useful for accessing the field via an interface.
func (v *DebugAuth) GetUserId() *persist.DBID { return v.UserId }

// GetChainAddresses returns DebugAuth.ChainAddresses, and is useful for accessing the field via an interface.
func (v *DebugAuth) GetChainAddresses() []ChainAddressInput { return v.ChainAddresses }

type EoaAuth struct {
	ChainPubKey ChainPubKeyInput `json:"chainPubKey"`
	Nonce       string           `json:"nonce"`
	Signature   string           `json:"signature"`
}

// GetChainPubKey returns EoaAuth.ChainPubKey, and is useful for accessing the field via an interface.
func (v *EoaAuth) GetChainPubKey() ChainPubKeyInput { return v.ChainPubKey }

// GetNonce returns EoaAuth.Nonce, and is useful for accessing the field via an interface.
func (v *EoaAuth) GetNonce() string { return v.Nonce }

// GetSignature returns EoaAuth.Signature, and is useful for accessing the field via an interface.
func (v *EoaAuth) GetSignature() string { return v.Signature }

type GnosisSafeAuth struct {
	Address string `json:"address"`
	Nonce   string `json:"nonce"`
}

// GetAddress returns GnosisSafeAuth.Address, and is useful for accessing the field via an interface.
func (v *GnosisSafeAuth) GetAddress() string { return v.Address }

// GetNonce returns GnosisSafeAuth.Nonce, and is useful for accessing the field via an interface.
func (v *GnosisSafeAuth) GetNonce() string { return v.Nonce }

type MagicLinkAuth struct {
	Token string `json:"token"`
}

// GetToken returns MagicLinkAuth.Token, and is useful for accessing the field via an interface.
func (v *MagicLinkAuth) GetToken() string { return v.Token }

type ReportWindow string

const (
	ReportWindowLast7Days ReportWindow = "LAST_7_DAYS"
	ReportWindowAllTime   ReportWindow = "ALL_TIME"
)

type TrendingUsersInput struct {
	Report ReportWindow `json:"report"`
}

// GetReport returns TrendingUsersInput.Report, and is useful for accessing the field via an interface.
func (v *TrendingUsersInput) GetReport() ReportWindow { return v.Report }

// __addUserWalletMutationInput is used internally by genqlient
type __addUserWalletMutationInput struct {
	ChainAddress  ChainAddressInput `json:"chainAddress"`
	AuthMechanism AuthMechanism     `json:"authMechanism"`
}

// GetChainAddress returns __addUserWalletMutationInput.ChainAddress, and is useful for accessing the field via an interface.
func (v *__addUserWalletMutationInput) GetChainAddress() ChainAddressInput { return v.ChainAddress }

// GetAuthMechanism returns __addUserWalletMutationInput.AuthMechanism, and is useful for accessing the field via an interface.
func (v *__addUserWalletMutationInput) GetAuthMechanism() AuthMechanism { return v.AuthMechanism }

// __admireFeedEventMutationInput is used internally by genqlient
type __admireFeedEventMutationInput struct {
	FeedEventId persist.DBID `json:"feedEventId"`
}

// GetFeedEventId returns __admireFeedEventMutationInput.FeedEventId, and is useful for accessing the field via an interface.
func (v *__admireFeedEventMutationInput) GetFeedEventId() persist.DBID { return v.FeedEventId }

// __commentOnFeedEventMutationInput is used internally by genqlient
type __commentOnFeedEventMutationInput struct {
	FeedEventId persist.DBID `json:"feedEventId"`
	Comment     string       `json:"comment"`
}

// GetFeedEventId returns __commentOnFeedEventMutationInput.FeedEventId, and is useful for accessing the field via an interface.
func (v *__commentOnFeedEventMutationInput) GetFeedEventId() persist.DBID { return v.FeedEventId }

// GetComment returns __commentOnFeedEventMutationInput.Comment, and is useful for accessing the field via an interface.
func (v *__commentOnFeedEventMutationInput) GetComment() string { return v.Comment }

// __createCollectionMutationInput is used internally by genqlient
type __createCollectionMutationInput struct {
	Input CreateCollectionInput `json:"input"`
}

// GetInput returns __createCollectionMutationInput.Input, and is useful for accessing the field via an interface.
func (v *__createCollectionMutationInput) GetInput() CreateCollectionInput { return v.Input }

// __createUserMutationInput is used internally by genqlient
type __createUserMutationInput struct {
	AuthMechanism AuthMechanism   `json:"authMechanism"`
	Input         CreateUserInput `json:"input"`
}

// GetAuthMechanism returns __createUserMutationInput.AuthMechanism, and is useful for accessing the field via an interface.
func (v *__createUserMutationInput) GetAuthMechanism() AuthMechanism { return v.AuthMechanism }

// GetInput returns __createUserMutationInput.Input, and is useful for accessing the field via an interface.
func (v *__createUserMutationInput) GetInput() CreateUserInput { return v.Input }

// __getAuthNonceMutationInput is used internally by genqlient
type __getAuthNonceMutationInput struct {
	Input ChainAddressInput `json:"input"`
}

// GetInput returns __getAuthNonceMutationInput.Input, and is useful for accessing the field via an interface.
func (v *__getAuthNonceMutationInput) GetInput() ChainAddressInput { return v.Input }

// __globalFeedQueryInput is used internally by genqlient
type __globalFeedQueryInput struct {
	First *int `json:"first"`
}

// GetFirst returns __globalFeedQueryInput.First, and is useful for accessing the field via an interface.
func (v *__globalFeedQueryInput) GetFirst() *int { return v.First }

// __loginMutationInput is used internally by genqlient
type __loginMutationInput struct {
	AuthMechanism AuthMechanism `json:"authMechanism"`
}

// GetAuthMechanism returns __loginMutationInput.AuthMechanism, and is useful for accessing the field via an interface.
func (v *__loginMutationInput) GetAuthMechanism() AuthMechanism { return v.AuthMechanism }

// __removeUserWalletsMutationInput is used internally by genqlient
type __removeUserWalletsMutationInput struct {
	WalletIds []persist.DBID `json:"walletIds"`
}

// GetWalletIds returns __removeUserWalletsMutationInput.WalletIds, and is useful for accessing the field via an interface.
func (v *__removeUserWalletsMutationInput) GetWalletIds() []persist.DBID { return v.WalletIds }

// __syncTokensMutationInput is used internally by genqlient
type __syncTokensMutationInput struct {
	Chains []Chain `json:"chains"`
}

// GetChains returns __syncTokensMutationInput.Chains, and is useful for accessing the field via an interface.
func (v *__syncTokensMutationInput) GetChains() []Chain { return v.Chains }

// __trendingFeedQueryInput is used internally by genqlient
type __trendingFeedQueryInput struct {
	First *int `json:"first"`
}

// GetFirst returns __trendingFeedQueryInput.First, and is useful for accessing the field via an interface.
func (v *__trendingFeedQueryInput) GetFirst() *int { return v.First }

// __trendingUsersQueryInput is used internally by genqlient
type __trendingUsersQueryInput struct {
	Input TrendingUsersInput `json:"input"`
}

// GetInput returns __trendingUsersQueryInput.Input, and is useful for accessing the field via an interface.
func (v *__trendingUsersQueryInput) GetInput() TrendingUsersInput { return v.Input }

// __userByAddressQueryInput is used internally by genqlient
type __userByAddressQueryInput struct {
	Input ChainAddressInput `json:"input"`
}

// GetInput returns __userByAddressQueryInput.Input, and is useful for accessing the field via an interface.
func (v *__userByAddressQueryInput) GetInput() ChainAddressInput { return v.Input }

// __userByIdQueryInput is used internally by genqlient
type __userByIdQueryInput struct {
	Id persist.DBID `json:"id"`
}

// GetId returns __userByIdQueryInput.Id, and is useful for accessing the field via an interface.
func (v *__userByIdQueryInput) GetId() persist.DBID { return v.Id }

// __userByUsernameQueryInput is used internally by genqlient
type __userByUsernameQueryInput struct {
	User string `json:"user"`
}

// GetUser returns __userByUsernameQueryInput.User, and is useful for accessing the field via an interface.
func (v *__userByUsernameQueryInput) GetUser() string { return v.User }

// __viewGalleryMutationInput is used internally by genqlient
type __viewGalleryMutationInput struct {
	GalleryId persist.DBID `json:"galleryId"`
}

// GetGalleryId returns __viewGalleryMutationInput.GalleryId, and is useful for accessing the field via an interface.
func (v *__viewGalleryMutationInput) GetGalleryId() persist.DBID { return v.GalleryId }

// addUserWalletMutationAddUserWalletAddUserWalletPayload includes the requested fields of the GraphQL type AddUserWalletPayload.
type addUserWalletMutationAddUserWalletAddUserWalletPayload struct {
	Typename *string                                                       `json:"__typename"`
	Viewer   *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer `json:"viewer"`
}

// GetTypename returns addUserWalletMutationAddUserWalletAddUserWalletPayload.Typename, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayload) GetTypename() *string {
	return v.Typename
}

// GetViewer returns addUserWalletMutationAddUserWalletAddUserWalletPayload.Viewer, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayload) GetViewer() *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer {
	return v.Viewer
}

// addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError includes the requested fields of the GraphQL interface AddUserWalletPayloadOrError.
//
// addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError is implemented by the following types:
// addUserWalletMutationAddUserWalletAddUserWalletPayload
// addUserWalletMutationAddUserWalletErrAuthenticationFailed
// addUserWalletMutationAddUserWalletErrNotAuthorized
// addUserWalletMutationAddUserWalletErrInvalidInput
// addUserWalletMutationAddUserWalletErrAddressOwnedByUser
type addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError interface {
	implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *addUserWalletMutationAddUserWalletAddUserWalletPayload) implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError() {
}
func (v *addUserWalletMutationAddUserWalletErrAuthenticationFailed) implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError() {
}
func (v *addUserWalletMutationAddUserWalletErrNotAuthorized) implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError() {
}
func (v *addUserWalletMutationAddUserWalletErrInvalidInput) implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError() {
}
func (v *addUserWalletMutationAddUserWalletErrAddressOwnedByUser) implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError() {
}

func __unmarshaladdUserWalletMutationAddUserWalletAddUserWalletPayloadOrError(b []byte, v *addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddUserWalletPayload":
		*v = new(addUserWalletMutationAddUserWalletAddUserWalletPayload)
		return json.Unmarshal(b, *v)
	case "ErrAuthenticationFailed":
		*v = new(addUserWalletMutationAddUserWalletErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(addUserWalletMutationAddUserWalletErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(addUserWalletMutationAddUserWalletErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrAddressOwnedByUser":
		*v = new(addUserWalletMutationAddUserWalletErrAddressOwnedByUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AddUserWalletPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshaladdUserWalletMutationAddUserWalletAddUserWalletPayloadOrError(v *addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *addUserWalletMutationAddUserWalletAddUserWalletPayload:
		typename = "AddUserWalletPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*addUserWalletMutationAddUserWalletAddUserWalletPayload
		}{typename, v}
		return json.Marshal(result)
	case *addUserWalletMutationAddUserWalletErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*addUserWalletMutationAddUserWalletErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *addUserWalletMutationAddUserWalletErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*addUserWalletMutationAddUserWalletErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *addUserWalletMutationAddUserWalletErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*addUserWalletMutationAddUserWalletErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *addUserWalletMutationAddUserWalletErrAddressOwnedByUser:
		typename = "ErrAddressOwnedByUser"

		result := struct {
			TypeName string `json:"__typename"`
			*addUserWalletMutationAddUserWalletErrAddressOwnedByUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError: "%T"`, v)
	}
}

// addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer includes the requested fields of the GraphQL type Viewer.
type addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer struct {
	User *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUser `json:"user"`
}

// GetUser returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer) GetUser() *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUser {
	return v.User
}

// addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUser struct {
	Wallets []*addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWallet `json:"wallets"`
}

// GetWallets returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUser.Wallets, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUser) GetWallets() []*addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWallet {
	return v.Wallets
}

// addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWallet includes the requested fields of the GraphQL type Wallet.
type addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWallet struct {
	Dbid         persist.DBID                                                                                          `json:"dbid"`
	ChainAddress *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWalletChainAddress `json:"chainAddress"`
}

// GetDbid returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWallet.Dbid, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWallet) GetDbid() persist.DBID {
	return v.Dbid
}

// GetChainAddress returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWallet.ChainAddress, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWallet) GetChainAddress() *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWalletChainAddress {
	return v.ChainAddress
}

// addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWalletChainAddress includes the requested fields of the GraphQL type ChainAddress.
type addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWalletChainAddress struct {
	Address *string `json:"address"`
	Chain   *Chain  `json:"chain"`
}

// GetAddress returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWalletChainAddress.Address, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWalletChainAddress) GetAddress() *string {
	return v.Address
}

// GetChain returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWalletChainAddress.Chain, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserGalleryUserWalletsWalletChainAddress) GetChain() *Chain {
	return v.Chain
}

// addUserWalletMutationAddUserWalletErrAddressOwnedByUser includes the requested fields of the GraphQL type ErrAddressOwnedByUser.
type addUserWalletMutationAddUserWalletErrAddressOwnedByUser struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns addUserWalletMutationAddUserWalletErrAddressOwnedByUser.Typename, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrAddressOwnedByUser) GetTypename() *string {
	return v.Typename
}

// GetMessage returns addUserWalletMutationAddUserWalletErrAddressOwnedByUser.Message, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrAddressOwnedByUser) GetMessage() string {
	return v.Message
}

// addUserWalletMutationAddUserWalletErrAuthenticationFailed includes the requested fields of the GraphQL type ErrAuthenticationFailed.
type addUserWalletMutationAddUserWalletErrAuthenticationFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns addUserWalletMutationAddUserWalletErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrAuthenticationFailed) GetTypename() *string {
	return v.Typename
}

// GetMessage returns addUserWalletMutationAddUserWalletErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrAuthenticationFailed) GetMessage() string {
	return v.Message
}

// addUserWalletMutationAddUserWalletErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type addUserWalletMutationAddUserWalletErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns addUserWalletMutationAddUserWalletErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns addUserWalletMutationAddUserWalletErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrInvalidInput) GetMessage() string { return v.Message }

// addUserWalletMutationAddUserWalletErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type addUserWalletMutationAddUserWalletErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns addUserWalletMutationAddUserWalletErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrNotAuthorized) GetTypename() *string { return v.Typename }

// GetMessage returns addUserWalletMutationAddUserWalletErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrNotAuthorized) GetMessage() string { return v.Message }

// addUserWalletMutationResponse is returned by addUserWalletMutation on success.
type addUserWalletMutationResponse struct {
	AddUserWallet *addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError `json:"-"`
}

// GetAddUserWallet returns addUserWalletMutationResponse.AddUserWallet, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationResponse) GetAddUserWallet() *addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError {
	return v.AddUserWallet
}

func (v *addUserWalletMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addUserWalletMutationResponse
		AddUserWallet json.RawMessage `json:"addUserWallet"`
		graphql.NoUnmarshalJSON
	}
	firstPass.addUserWalletMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AddUserWallet
		src := firstPass.AddUserWallet
		if len(src) != 0 && string(src) != "null" {
			*dst = new(addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError)
			err = __unmarshaladdUserWalletMutationAddUserWalletAddUserWalletPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal addUserWalletMutationResponse.AddUserWallet: %w", err)
			}
		}
	}
	return nil
}

type __premarshaladdUserWalletMutationResponse struct {
	AddUserWallet json.RawMessage `json:"addUserWallet"`
}

func (v *addUserWalletMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addUserWalletMutationResponse) __premarshalJSON() (*__premarshaladdUserWalletMutationResponse, error) {
	var retval __premarshaladdUserWalletMutationResponse

	{

		dst := &retval.AddUserWallet
		src := v.AddUserWallet
		if src != nil {
			var err error
			*dst, err = __marshaladdUserWalletMutationAddUserWalletAddUserWalletPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal addUserWalletMutationResponse.AddUserWallet: %w", err)
			}
		}
	}
	return &retval, nil
}

// admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload includes the requested fields of the GraphQL type AdmireFeedEventPayload.
type admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload struct {
	Typename  *string                                                                `json:"__typename"`
	FeedEvent *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadFeedEvent `json:"feedEvent"`
}

// GetTypename returns admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload.Typename, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload) GetTypename() *string {
	return v.Typename
}

// GetFeedEvent returns admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload.FeedEvent, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload) GetFeedEvent() *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadFeedEvent {
	return v.FeedEvent
}

// admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadFeedEvent includes the requested fields of the GraphQL type FeedEvent.
type admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadFeedEvent struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadFeedEvent.Dbid, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadFeedEvent) GetDbid() persist.DBID {
	return v.Dbid
}

// admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError includes the requested fields of the GraphQL interface AdmireFeedEventPayloadOrError.
//
// admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError is implemented by the following types:
// admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload
// admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed
// admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound
// admireFeedEventMutationAdmireFeedEventErrInvalidInput
// admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists
type admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError interface {
	implementsGraphQLInterfaceadmireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload) implementsGraphQLInterfaceadmireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError() {
}
func (v *admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed) implementsGraphQLInterfaceadmireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError() {
}
func (v *admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound) implementsGraphQLInterfaceadmireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError() {
}
func (v *admireFeedEventMutationAdmireFeedEventErrInvalidInput) implementsGraphQLInterfaceadmireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError() {
}
func (v *admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists) implementsGraphQLInterfaceadmireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError() {
}

func __unmarshaladmireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError(b []byte, v *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AdmireFeedEventPayload":
		*v = new(admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload)
		return json.Unmarshal(b, *v)
	case "ErrAuthenticationFailed":
		*v = new(admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ErrFeedEventNotFound":
		*v = new(admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(admireFeedEventMutationAdmireFeedEventErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrAdmireAlreadyExists":
		*v = new(admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AdmireFeedEventPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshaladmireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError(v *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload:
		typename = "AdmireFeedEventPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayload
		}{typename, v}
		return json.Marshal(result)
	case *admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound:
		typename = "ErrFeedEventNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound
		}{typename, v}
		return json.Marshal(result)
	case *admireFeedEventMutationAdmireFeedEventErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*admireFeedEventMutationAdmireFeedEventErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists:
		typename = "ErrAdmireAlreadyExists"

		result := struct {
			TypeName string `json:"__typename"`
			*admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError: "%T"`, v)
	}
}

// admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists includes the requested fields of the GraphQL type ErrAdmireAlreadyExists.
type admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists.Typename, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists) GetTypename() *string {
	return v.Typename
}

// GetMessage returns admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists.Message, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventErrAdmireAlreadyExists) GetMessage() string {
	return v.Message
}

// admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed includes the requested fields of the GraphQL type ErrAuthenticationFailed.
type admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed) GetTypename() *string {
	return v.Typename
}

// GetMessage returns admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventErrAuthenticationFailed) GetMessage() string {
	return v.Message
}

// admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound includes the requested fields of the GraphQL type ErrFeedEventNotFound.
type admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound.Typename, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound) GetTypename() *string {
	return v.Typename
}

// GetMessage returns admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound.Message, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventErrFeedEventNotFound) GetMessage() string {
	return v.Message
}

// admireFeedEventMutationAdmireFeedEventErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type admireFeedEventMutationAdmireFeedEventErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns admireFeedEventMutationAdmireFeedEventErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns admireFeedEventMutationAdmireFeedEventErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationAdmireFeedEventErrInvalidInput) GetMessage() string { return v.Message }

// admireFeedEventMutationResponse is returned by admireFeedEventMutation on success.
type admireFeedEventMutationResponse struct {
	AdmireFeedEvent *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError `json:"-"`
}

// GetAdmireFeedEvent returns admireFeedEventMutationResponse.AdmireFeedEvent, and is useful for accessing the field via an interface.
func (v *admireFeedEventMutationResponse) GetAdmireFeedEvent() *admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError {
	return v.AdmireFeedEvent
}

func (v *admireFeedEventMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*admireFeedEventMutationResponse
		AdmireFeedEvent json.RawMessage `json:"admireFeedEvent"`
		graphql.NoUnmarshalJSON
	}
	firstPass.admireFeedEventMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AdmireFeedEvent
		src := firstPass.AdmireFeedEvent
		if len(src) != 0 && string(src) != "null" {
			*dst = new(admireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError)
			err = __unmarshaladmireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal admireFeedEventMutationResponse.AdmireFeedEvent: %w", err)
			}
		}
	}
	return nil
}

type __premarshaladmireFeedEventMutationResponse struct {
	AdmireFeedEvent json.RawMessage `json:"admireFeedEvent"`
}

func (v *admireFeedEventMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *admireFeedEventMutationResponse) __premarshalJSON() (*__premarshaladmireFeedEventMutationResponse, error) {
	var retval __premarshaladmireFeedEventMutationResponse

	{

		dst := &retval.AdmireFeedEvent
		src := v.AdmireFeedEvent
		if src != nil {
			var err error
			*dst, err = __marshaladmireFeedEventMutationAdmireFeedEventAdmireFeedEventPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal admireFeedEventMutationResponse.AdmireFeedEvent: %w", err)
			}
		}
	}
	return &retval, nil
}

// commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload includes the requested fields of the GraphQL type CommentOnFeedEventPayload.
type commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload struct {
	Typename  *string                                                                         `json:"__typename"`
	FeedEvent *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadFeedEvent `json:"feedEvent"`
}

// GetTypename returns commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload.Typename, and is useful for accessing the field via an interface.
func (v *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload) GetTypename() *string {
	return v.Typename
}

// GetFeedEvent returns commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload.FeedEvent, and is useful for accessing the field via an interface.
func (v *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload) GetFeedEvent() *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadFeedEvent {
	return v.FeedEvent
}

// commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadFeedEvent includes the requested fields of the GraphQL type FeedEvent.
type commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadFeedEvent struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadFeedEvent.Dbid, and is useful for accessing the field via an interface.
func (v *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadFeedEvent) GetDbid() persist.DBID {
	return v.Dbid
}

// commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError includes the requested fields of the GraphQL interface CommentOnFeedEventPayloadOrError.
//
// commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError is implemented by the following types:
// commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload
// commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed
// commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound
// commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput
type commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError interface {
	implementsGraphQLInterfacecommentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload) implementsGraphQLInterfacecommentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError() {
}
func (v *commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed) implementsGraphQLInterfacecommentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError() {
}
func (v *commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound) implementsGraphQLInterfacecommentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError() {
}
func (v *commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput) implementsGraphQLInterfacecommentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError() {
}

func __unmarshalcommentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError(b []byte, v *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CommentOnFeedEventPayload":
		*v = new(commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload)
		return json.Unmarshal(b, *v)
	case "ErrAuthenticationFailed":
		*v = new(commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ErrFeedEventNotFound":
		*v = new(commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CommentOnFeedEventPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalcommentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError(v *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload:
		typename = "CommentOnFeedEventPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayload
		}{typename, v}
		return json.Marshal(result)
	case *commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound:
		typename = "ErrFeedEventNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound
		}{typename, v}
		return json.Marshal(result)
	case *commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError: "%T"`, v)
	}
}

// commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed includes the requested fields of the GraphQL type ErrAuthenticationFailed.
type commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed) GetTypename() *string {
	return v.Typename
}

// GetMessage returns commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *commentOnFeedEventMutationCommentOnFeedEventErrAuthenticationFailed) GetMessage() string {
	return v.Message
}

// commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound includes the requested fields of the GraphQL type ErrFeedEventNotFound.
type commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound.Typename, and is useful for accessing the field via an interface.
func (v *commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound) GetTypename() *string {
	return v.Typename
}

// GetMessage returns commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound.Message, and is useful for accessing the field via an interface.
func (v *commentOnFeedEventMutationCommentOnFeedEventErrFeedEventNotFound) GetMessage() string {
	return v.Message
}

// commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *commentOnFeedEventMutationCommentOnFeedEventErrInvalidInput) GetMessage() string {
	return v.Message
}

// commentOnFeedEventMutationResponse is returned by commentOnFeedEventMutation on success.
type commentOnFeedEventMutationResponse struct {
	CommentOnFeedEvent *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError `json:"-"`
}

// GetCommentOnFeedEvent returns commentOnFeedEventMutationResponse.CommentOnFeedEvent, and is useful for accessing the field via an interface.
func (v *commentOnFeedEventMutationResponse) GetCommentOnFeedEvent() *commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError {
	return v.CommentOnFeedEvent
}

func (v *commentOnFeedEventMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*commentOnFeedEventMutationResponse
		CommentOnFeedEvent json.RawMessage `json:"commentOnFeedEvent"`
		graphql.NoUnmarshalJSON
	}
	firstPass.commentOnFeedEventMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CommentOnFeedEvent
		src := firstPass.CommentOnFeedEvent
		if len(src) != 0 && string(src) != "null" {
			*dst = new(commentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError)
			err = __unmarshalcommentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal commentOnFeedEventMutationResponse.CommentOnFeedEvent: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcommentOnFeedEventMutationResponse struct {
	CommentOnFeedEvent json.RawMessage `json:"commentOnFeedEvent"`
}

func (v *commentOnFeedEventMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *commentOnFeedEventMutationResponse) __premarshalJSON() (*__premarshalcommentOnFeedEventMutationResponse, error) {
	var retval __premarshalcommentOnFeedEventMutationResponse

	{

		dst := &retval.CommentOnFeedEvent
		src := v.CommentOnFeedEvent
		if src != nil {
			var err error
			*dst, err = __marshalcommentOnFeedEventMutationCommentOnFeedEventCommentOnFeedEventPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal commentOnFeedEventMutationResponse.CommentOnFeedEvent: %w", err)
			}
		}
	}
	return &retval, nil
}

// createCollectionMutationCreateCollectionCreateCollectionPayload includes the requested fields of the GraphQL type CreateCollectionPayload.
type createCollectionMutationCreateCollectionCreateCollectionPayload struct {
	Typename   *string                                                                    `json:"__typename"`
	Collection *createCollectionMutationCreateCollectionCreateCollectionPayloadCollection `json:"collection"`
}

// GetTypename returns createCollectionMutationCreateCollectionCreateCollectionPayload.Typename, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayload) GetTypename() *string {
	return v.Typename
}

// GetCollection returns createCollectionMutationCreateCollectionCreateCollectionPayload.Collection, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayload) GetCollection() *createCollectionMutationCreateCollectionCreateCollectionPayloadCollection {
	return v.Collection
}

// createCollectionMutationCreateCollectionCreateCollectionPayloadCollection includes the requested fields of the GraphQL type Collection.
type createCollectionMutationCreateCollectionCreateCollectionPayloadCollection struct {
	Dbid   persist.DBID                                                                                      `json:"dbid"`
	Name   *string                                                                                           `json:"name"`
	Tokens []*createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken `json:"tokens"`
}

// GetDbid returns createCollectionMutationCreateCollectionCreateCollectionPayloadCollection.Dbid, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayloadCollection) GetDbid() persist.DBID {
	return v.Dbid
}

// GetName returns createCollectionMutationCreateCollectionCreateCollectionPayloadCollection.Name, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayloadCollection) GetName() *string {
	return v.Name
}

// GetTokens returns createCollectionMutationCreateCollectionCreateCollectionPayloadCollection.Tokens, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayloadCollection) GetTokens() []*createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken {
	return v.Tokens
}

// createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken includes the requested fields of the GraphQL type CollectionToken.
type createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken struct {
	Token *createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken `json:"token"`
}

// GetToken returns createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken.Token, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken) GetToken() *createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken {
	return v.Token
}

// createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken includes the requested fields of the GraphQL type Token.
type createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken.Dbid, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken) GetDbid() persist.DBID {
	return v.Dbid
}

// createCollectionMutationCreateCollectionCreateCollectionPayloadOrError includes the requested fields of the GraphQL interface CreateCollectionPayloadOrError.
//
// createCollectionMutationCreateCollectionCreateCollectionPayloadOrError is implemented by the following types:
// createCollectionMutationCreateCollectionCreateCollectionPayload
// createCollectionMutationCreateCollectionErrNotAuthorized
// createCollectionMutationCreateCollectionErrInvalidInput
type createCollectionMutationCreateCollectionCreateCollectionPayloadOrError interface {
	implementsGraphQLInterfacecreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *createCollectionMutationCreateCollectionCreateCollectionPayload) implementsGraphQLInterfacecreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError() {
}
func (v *createCollectionMutationCreateCollectionErrNotAuthorized) implementsGraphQLInterfacecreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError() {
}
func (v *createCollectionMutationCreateCollectionErrInvalidInput) implementsGraphQLInterfacecreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError() {
}

func __unmarshalcreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError(b []byte, v *createCollectionMutationCreateCollectionCreateCollectionPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CreateCollectionPayload":
		*v = new(createCollectionMutationCreateCollectionCreateCollectionPayload)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(createCollectionMutationCreateCollectionErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(createCollectionMutationCreateCollectionErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CreateCollectionPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for createCollectionMutationCreateCollectionCreateCollectionPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalcreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError(v *createCollectionMutationCreateCollectionCreateCollectionPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *createCollectionMutationCreateCollectionCreateCollectionPayload:
		typename = "CreateCollectionPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*createCollectionMutationCreateCollectionCreateCollectionPayload
		}{typename, v}
		return json.Marshal(result)
	case *createCollectionMutationCreateCollectionErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*createCollectionMutationCreateCollectionErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *createCollectionMutationCreateCollectionErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*createCollectionMutationCreateCollectionErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for createCollectionMutationCreateCollectionCreateCollectionPayloadOrError: "%T"`, v)
	}
}

// createCollectionMutationCreateCollectionErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type createCollectionMutationCreateCollectionErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createCollectionMutationCreateCollectionErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns createCollectionMutationCreateCollectionErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionErrInvalidInput) GetMessage() string {
	return v.Message
}

// createCollectionMutationCreateCollectionErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type createCollectionMutationCreateCollectionErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createCollectionMutationCreateCollectionErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionErrNotAuthorized) GetTypename() *string {
	return v.Typename
}

// GetMessage returns createCollectionMutationCreateCollectionErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionErrNotAuthorized) GetMessage() string {
	return v.Message
}

// createCollectionMutationResponse is returned by createCollectionMutation on success.
type createCollectionMutationResponse struct {
	CreateCollection *createCollectionMutationCreateCollectionCreateCollectionPayloadOrError `json:"-"`
}

// GetCreateCollection returns createCollectionMutationResponse.CreateCollection, and is useful for accessing the field via an interface.
func (v *createCollectionMutationResponse) GetCreateCollection() *createCollectionMutationCreateCollectionCreateCollectionPayloadOrError {
	return v.CreateCollection
}

func (v *createCollectionMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createCollectionMutationResponse
		CreateCollection json.RawMessage `json:"createCollection"`
		graphql.NoUnmarshalJSON
	}
	firstPass.createCollectionMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateCollection
		src := firstPass.CreateCollection
		if len(src) != 0 && string(src) != "null" {
			*dst = new(createCollectionMutationCreateCollectionCreateCollectionPayloadOrError)
			err = __unmarshalcreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal createCollectionMutationResponse.CreateCollection: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcreateCollectionMutationResponse struct {
	CreateCollection json.RawMessage `json:"createCollection"`
}

func (v *createCollectionMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createCollectionMutationResponse) __premarshalJSON() (*__premarshalcreateCollectionMutationResponse, error) {
	var retval __premarshalcreateCollectionMutationResponse

	{

		dst := &retval.CreateCollection
		src := v.CreateCollection
		if src != nil {
			var err error
			*dst, err = __marshalcreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal createCollectionMutationResponse.CreateCollection: %w", err)
			}
		}
	}
	return &retval, nil
}

// createUserMutationCreateUserCreateUserPayload includes the requested fields of the GraphQL type CreateUserPayload.
type createUserMutationCreateUserCreateUserPayload struct {
	Typename *string                                              `json:"__typename"`
	Viewer   *createUserMutationCreateUserCreateUserPayloadViewer `json:"viewer"`
}

// GetTypename returns createUserMutationCreateUserCreateUserPayload.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayload) GetTypename() *string { return v.Typename }

// GetViewer returns createUserMutationCreateUserCreateUserPayload.Viewer, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayload) GetViewer() *createUserMutationCreateUserCreateUserPayloadViewer {
	return v.Viewer
}

// createUserMutationCreateUserCreateUserPayloadOrError includes the requested fields of the GraphQL interface CreateUserPayloadOrError.
//
// createUserMutationCreateUserCreateUserPayloadOrError is implemented by the following types:
// createUserMutationCreateUserCreateUserPayload
// createUserMutationCreateUserErrAuthenticationFailed
// createUserMutationCreateUserErrDoesNotOwnRequiredToken
// createUserMutationCreateUserErrUserAlreadyExists
// createUserMutationCreateUserErrUsernameNotAvailable
// createUserMutationCreateUserErrInvalidInput
type createUserMutationCreateUserCreateUserPayloadOrError interface {
	implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *createUserMutationCreateUserCreateUserPayload) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}
func (v *createUserMutationCreateUserErrAuthenticationFailed) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}
func (v *createUserMutationCreateUserErrDoesNotOwnRequiredToken) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}
func (v *createUserMutationCreateUserErrUserAlreadyExists) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}
func (v *createUserMutationCreateUserErrUsernameNotAvailable) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}
func (v *createUserMutationCreateUserErrInvalidInput) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}

func __unmarshalcreateUserMutationCreateUserCreateUserPayloadOrError(b []byte, v *createUserMutationCreateUserCreateUserPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CreateUserPayload":
		*v = new(createUserMutationCreateUserCreateUserPayload)
		return json.Unmarshal(b, *v)
	case "ErrAuthenticationFailed":
		*v = new(createUserMutationCreateUserErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ErrDoesNotOwnRequiredToken":
		*v = new(createUserMutationCreateUserErrDoesNotOwnRequiredToken)
		return json.Unmarshal(b, *v)
	case "ErrUserAlreadyExists":
		*v = new(createUserMutationCreateUserErrUserAlreadyExists)
		return json.Unmarshal(b, *v)
	case "ErrUsernameNotAvailable":
		*v = new(createUserMutationCreateUserErrUsernameNotAvailable)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(createUserMutationCreateUserErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CreateUserPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for createUserMutationCreateUserCreateUserPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalcreateUserMutationCreateUserCreateUserPayloadOrError(v *createUserMutationCreateUserCreateUserPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *createUserMutationCreateUserCreateUserPayload:
		typename = "CreateUserPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserCreateUserPayload
		}{typename, v}
		return json.Marshal(result)
	case *createUserMutationCreateUserErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *createUserMutationCreateUserErrDoesNotOwnRequiredToken:
		typename = "ErrDoesNotOwnRequiredToken"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserErrDoesNotOwnRequiredToken
		}{typename, v}
		return json.Marshal(result)
	case *createUserMutationCreateUserErrUserAlreadyExists:
		typename = "ErrUserAlreadyExists"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserErrUserAlreadyExists
		}{typename, v}
		return json.Marshal(result)
	case *createUserMutationCreateUserErrUsernameNotAvailable:
		typename = "ErrUsernameNotAvailable"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserErrUsernameNotAvailable
		}{typename, v}
		return json.Marshal(result)
	case *createUserMutationCreateUserErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for createUserMutationCreateUserCreateUserPayloadOrError: "%T"`, v)
	}
}

// createUserMutationCreateUserCreateUserPayloadViewer includes the requested fields of the GraphQL type Viewer.
type createUserMutationCreateUserCreateUserPayloadViewer struct {
	User *createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser `json:"user"`
}

// GetUser returns createUserMutationCreateUserCreateUserPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewer) GetUser() *createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser {
	return v.User
}

// createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser struct {
	Username  *string                                                                               `json:"username"`
	Dbid      persist.DBID                                                                          `json:"dbid"`
	Bio       *string                                                                               `json:"bio"`
	Galleries []*createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUserGalleriesGallery `json:"galleries"`
}

// GetUsername returns createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser) GetUsername() *string {
	return v.Username
}

// GetDbid returns createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser.Dbid, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser) GetDbid() persist.DBID {
	return v.Dbid
}

// GetBio returns createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser.Bio, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser) GetBio() *string {
	return v.Bio
}

// GetGalleries returns createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser.Galleries, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUser) GetGalleries() []*createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUserGalleriesGallery {
	return v.Galleries
}

// createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUserGalleriesGallery includes the requested fields of the GraphQL type Gallery.
type createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUserGalleriesGallery struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUserGalleriesGallery.Dbid, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewerUserGalleryUserGalleriesGallery) GetDbid() persist.DBID {
	return v.Dbid
}

// createUserMutationCreateUserErrAuthenticationFailed includes the requested fields of the GraphQL type ErrAuthenticationFailed.
type createUserMutationCreateUserErrAuthenticationFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createUserMutationCreateUserErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrAuthenticationFailed) GetTypename() *string {
	return v.Typename
}

// GetMessage returns createUserMutationCreateUserErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrAuthenticationFailed) GetMessage() string { return v.Message }

// createUserMutationCreateUserErrDoesNotOwnRequiredToken includes the requested fields of the GraphQL type ErrDoesNotOwnRequiredToken.
type createUserMutationCreateUserErrDoesNotOwnRequiredToken struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createUserMutationCreateUserErrDoesNotOwnRequiredToken.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrDoesNotOwnRequiredToken) GetTypename() *string {
	return v.Typename
}

// GetMessage returns createUserMutationCreateUserErrDoesNotOwnRequiredToken.Message, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrDoesNotOwnRequiredToken) GetMessage() string {
	return v.Message
}

// createUserMutationCreateUserErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type createUserMutationCreateUserErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createUserMutationCreateUserErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns createUserMutationCreateUserErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrInvalidInput) GetMessage() string { return v.Message }

// createUserMutationCreateUserErrUserAlreadyExists includes the requested fields of the GraphQL type ErrUserAlreadyExists.
type createUserMutationCreateUserErrUserAlreadyExists struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createUserMutationCreateUserErrUserAlreadyExists.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrUserAlreadyExists) GetTypename() *string { return v.Typename }

// GetMessage returns createUserMutationCreateUserErrUserAlreadyExists.Message, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrUserAlreadyExists) GetMessage() string { return v.Message }

// createUserMutationCreateUserErrUsernameNotAvailable includes the requested fields of the GraphQL type ErrUsernameNotAvailable.
type createUserMutationCreateUserErrUsernameNotAvailable struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createUserMutationCreateUserErrUsernameNotAvailable.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrUsernameNotAvailable) GetTypename() *string {
	return v.Typename
}

// GetMessage returns createUserMutationCreateUserErrUsernameNotAvailable.Message, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrUsernameNotAvailable) GetMessage() string { return v.Message }

// createUserMutationResponse is returned by createUserMutation on success.
type createUserMutationResponse struct {
	CreateUser *createUserMutationCreateUserCreateUserPayloadOrError `json:"-"`
}

// GetCreateUser returns createUserMutationResponse.CreateUser, and is useful for accessing the field via an interface.
func (v *createUserMutationResponse) GetCreateUser() *createUserMutationCreateUserCreateUserPayloadOrError {
	return v.CreateUser
}

func (v *createUserMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createUserMutationResponse
		CreateUser json.RawMessage `json:"createUser"`
		graphql.NoUnmarshalJSON
	}
	firstPass.createUserMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateUser
		src := firstPass.CreateUser
		if len(src) != 0 && string(src) != "null" {
			*dst = new(createUserMutationCreateUserCreateUserPayloadOrError)
			err = __unmarshalcreateUserMutationCreateUserCreateUserPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal createUserMutationResponse.CreateUser: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcreateUserMutationResponse struct {
	CreateUser json.RawMessage `json:"createUser"`
}

func (v *createUserMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createUserMutationResponse) __premarshalJSON() (*__premarshalcreateUserMutationResponse, error) {
	var retval __premarshalcreateUserMutationResponse

	{

		dst := &retval.CreateUser
		src := v.CreateUser
		if src != nil {
			var err error
			*dst, err = __marshalcreateUserMutationCreateUserCreateUserPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal createUserMutationResponse.CreateUser: %w", err)
			}
		}
	}
	return &retval, nil
}

// getAuthNonceMutationGetAuthNonce includes the requested fields of the GraphQL type AuthNonce.
type getAuthNonceMutationGetAuthNonce struct {
	Typename   *string `json:"__typename"`
	Nonce      *string `json:"nonce"`
	UserExists *bool   `json:"userExists"`
}

// GetTypename returns getAuthNonceMutationGetAuthNonce.Typename, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationGetAuthNonce) GetTypename() *string { return v.Typename }

// GetNonce returns getAuthNonceMutationGetAuthNonce.Nonce, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationGetAuthNonce) GetNonce() *string { return v.Nonce }

// GetUserExists returns getAuthNonceMutationGetAuthNonce.UserExists, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationGetAuthNonce) GetUserExists() *bool { return v.UserExists }

// getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken includes the requested fields of the GraphQL type ErrDoesNotOwnRequiredToken.
type getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken.Typename, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken) GetTypename() *string {
	return v.Typename
}

// GetMessage returns getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken.Message, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken) GetMessage() string {
	return v.Message
}

// getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError includes the requested fields of the GraphQL interface GetAuthNoncePayloadOrError.
//
// getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError is implemented by the following types:
// getAuthNonceMutationGetAuthNonce
// getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken
type getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError interface {
	implementsGraphQLInterfacegetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *getAuthNonceMutationGetAuthNonce) implementsGraphQLInterfacegetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError() {
}
func (v *getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken) implementsGraphQLInterfacegetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError() {
}

func __unmarshalgetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError(b []byte, v *getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AuthNonce":
		*v = new(getAuthNonceMutationGetAuthNonce)
		return json.Unmarshal(b, *v)
	case "ErrDoesNotOwnRequiredToken":
		*v = new(getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GetAuthNoncePayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalgetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError(v *getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getAuthNonceMutationGetAuthNonce:
		typename = "AuthNonce"

		result := struct {
			TypeName string `json:"__typename"`
			*getAuthNonceMutationGetAuthNonce
		}{typename, v}
		return json.Marshal(result)
	case *getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken:
		typename = "ErrDoesNotOwnRequiredToken"

		result := struct {
			TypeName string `json:"__typename"`
			*getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError: "%T"`, v)
	}
}

// getAuthNonceMutationResponse is returned by getAuthNonceMutation on success.
type getAuthNonceMutationResponse struct {
	GetAuthNonce *getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError `json:"-"`
}

// GetGetAuthNonce returns getAuthNonceMutationResponse.GetAuthNonce, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationResponse) GetGetAuthNonce() *getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError {
	return v.GetAuthNonce
}

func (v *getAuthNonceMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAuthNonceMutationResponse
		GetAuthNonce json.RawMessage `json:"getAuthNonce"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getAuthNonceMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetAuthNonce
		src := firstPass.GetAuthNonce
		if len(src) != 0 && string(src) != "null" {
			*dst = new(getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError)
			err = __unmarshalgetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal getAuthNonceMutationResponse.GetAuthNonce: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetAuthNonceMutationResponse struct {
	GetAuthNonce json.RawMessage `json:"getAuthNonce"`
}

func (v *getAuthNonceMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAuthNonceMutationResponse) __premarshalJSON() (*__premarshalgetAuthNonceMutationResponse, error) {
	var retval __premarshalgetAuthNonceMutationResponse

	{

		dst := &retval.GetAuthNonce
		src := v.GetAuthNonce
		if src != nil {
			var err error
			*dst, err = __marshalgetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal getAuthNonceMutationResponse.GetAuthNonce: %w", err)
			}
		}
	}
	return &retval, nil
}

// globalFeedQueryGlobalFeedFeedConnection includes the requested fields of the GraphQL type FeedConnection.
type globalFeedQueryGlobalFeedFeedConnection struct {
	Edges []*globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge `json:"edges"`
}

// GetEdges returns globalFeedQueryGlobalFeedFeedConnection.Edges, and is useful for accessing the field via an interface.
func (v *globalFeedQueryGlobalFeedFeedConnection) GetEdges() []*globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge {
	return v.Edges
}

// globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge includes the requested fields of the GraphQL type FeedEdge.
type globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge struct {
	Node *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError `json:"-"`
}

// GetNode returns globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge.Node, and is useful for accessing the field via an interface.
func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge) GetNode() *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError {
	return v.Node
}

func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError)
			err = __unmarshalglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge) __premarshalJSON() (*__premarshalglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge, error) {
	var retval __premarshalglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge

	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshalglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound includes the requested fields of the GraphQL type ErrFeedEventNotFound.
type globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound.Typename, and is useful for accessing the field via an interface.
func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound) GetTypename() *string {
	return v.Typename
}

// GetMessage returns globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound.Message, and is useful for accessing the field via an interface.
func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound) GetMessage() string {
	return v.Message
}

// globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction includes the requested fields of the GraphQL type ErrUnknownAction.
type globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction.Typename, and is useful for accessing the field via an interface.
func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction) GetTypename() *string {
	return v.Typename
}

// GetMessage returns globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction.Message, and is useful for accessing the field via an interface.
func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction) GetMessage() string {
	return v.Message
}

// globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent includes the requested fields of the GraphQL type FeedEvent.
type globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent struct {
	Typename *string      `json:"__typename"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetTypename returns globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent.Typename, and is useful for accessing the field via an interface.
func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent) GetTypename() *string {
	return v.Typename
}

// GetDbid returns globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent.Dbid, and is useful for accessing the field via an interface.
func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent) GetDbid() persist.DBID {
	return v.Dbid
}

// globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError includes the requested fields of the GraphQL interface FeedEventOrError.
//
// globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError is implemented by the following types:
// globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent
// globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound
// globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction
type globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError interface {
	implementsGraphQLInterfaceglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent) implementsGraphQLInterfaceglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError() {
}
func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound) implementsGraphQLInterfaceglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError() {
}
func (v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction) implementsGraphQLInterfaceglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError() {
}

func __unmarshalglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError(b []byte, v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "FeedEvent":
		*v = new(globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent)
		return json.Unmarshal(b, *v)
	case "ErrFeedEventNotFound":
		*v = new(globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound)
		return json.Unmarshal(b, *v)
	case "ErrUnknownAction":
		*v = new(globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing FeedEventOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError: "%v"`, tn.TypeName)
	}
}

func __marshalglobalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError(v *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent:
		typename = "FeedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent
		}{typename, v}
		return json.Marshal(result)
	case *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound:
		typename = "ErrFeedEventNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound
		}{typename, v}
		return json.Marshal(result)
	case *globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction:
		typename = "ErrUnknownAction"

		result := struct {
			TypeName string `json:"__typename"`
			*globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for globalFeedQueryGlobalFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError: "%T"`, v)
	}
}

// globalFeedQueryResponse is returned by globalFeedQuery on success.
type globalFeedQueryResponse struct {
	GlobalFeed *globalFeedQueryGlobalFeedFeedConnection `json:"globalFeed"`
}

// GetGlobalFeed returns globalFeedQueryResponse.GlobalFeed, and is useful for accessing the field via an interface.
func (v *globalFeedQueryResponse) GetGlobalFeed() *globalFeedQueryGlobalFeedFeedConnection {
	return v.GlobalFeed
}

// loginMutationLoginErrAuthenticationFailed includes the requested fields of the GraphQL type ErrAuthenticationFailed.
type loginMutationLoginErrAuthenticationFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns loginMutationLoginErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrAuthenticationFailed) GetTypename() *string { return v.Typename }

// GetMessage returns loginMutationLoginErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrAuthenticationFailed) GetMessage() string { return v.Message }

// loginMutationLoginErrDoesNotOwnRequiredToken includes the requested fields of the GraphQL type ErrDoesNotOwnRequiredToken.
type loginMutationLoginErrDoesNotOwnRequiredToken struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns loginMutationLoginErrDoesNotOwnRequiredToken.Typename, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrDoesNotOwnRequiredToken) GetTypename() *string { return v.Typename }

// GetMessage returns loginMutationLoginErrDoesNotOwnRequiredToken.Message, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrDoesNotOwnRequiredToken) GetMessage() string { return v.Message }

// loginMutationLoginErrUserNotFound includes the requested fields of the GraphQL type ErrUserNotFound.
type loginMutationLoginErrUserNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns loginMutationLoginErrUserNotFound.Typename, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrUserNotFound) GetTypename() *string { return v.Typename }

// GetMessage returns loginMutationLoginErrUserNotFound.Message, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrUserNotFound) GetMessage() string { return v.Message }

// loginMutationLoginLoginPayload includes the requested fields of the GraphQL type LoginPayload.
type loginMutationLoginLoginPayload struct {
	Typename *string                               `json:"__typename"`
	Viewer   *loginMutationLoginLoginPayloadViewer `json:"viewer"`
}

// GetTypename returns loginMutationLoginLoginPayload.Typename, and is useful for accessing the field via an interface.
func (v *loginMutationLoginLoginPayload) GetTypename() *string { return v.Typename }

// GetViewer returns loginMutationLoginLoginPayload.Viewer, and is useful for accessing the field via an interface.
func (v *loginMutationLoginLoginPayload) GetViewer() *loginMutationLoginLoginPayloadViewer {
	return v.Viewer
}

// loginMutationLoginLoginPayloadOrError includes the requested fields of the GraphQL interface LoginPayloadOrError.
//
// loginMutationLoginLoginPayloadOrError is implemented by the following types:
// loginMutationLoginLoginPayload
// loginMutationLoginErrUserNotFound
// loginMutationLoginErrAuthenticationFailed
// loginMutationLoginErrDoesNotOwnRequiredToken
type loginMutationLoginLoginPayloadOrError interface {
	implementsGraphQLInterfaceloginMutationLoginLoginPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *loginMutationLoginLoginPayload) implementsGraphQLInterfaceloginMutationLoginLoginPayloadOrError() {
}
func (v *loginMutationLoginErrUserNotFound) implementsGraphQLInterfaceloginMutationLoginLoginPayloadOrError() {
}
func (v *loginMutationLoginErrAuthenticationFailed) implementsGraphQLInterfaceloginMutationLoginLoginPayloadOrError() {
}
func (v *loginMutationLoginErrDoesNotOwnRequiredToken) implementsGraphQLInterfaceloginMutationLoginLoginPayloadOrError() {
}

func __unmarshalloginMutationLoginLoginPayloadOrError(b []byte, v *loginMutationLoginLoginPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "LoginPayload":
		*v = new(loginMutationLoginLoginPayload)
		return json.Unmarshal(b, *v)
	case "ErrUserNotFound":
		*v = new(loginMutationLoginErrUserNotFound)
		return json.Unmarshal(b, *v)
	case "ErrAuthenticationFailed":
		*v = new(loginMutationLoginErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ErrDoesNotOwnRequiredToken":
		*v = new(loginMutationLoginErrDoesNotOwnRequiredToken)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing LoginPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for loginMutationLoginLoginPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalloginMutationLoginLoginPayloadOrError(v *loginMutationLoginLoginPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *loginMutationLoginLoginPayload:
		typename = "LoginPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*loginMutationLoginLoginPayload
		}{typename, v}
		return json.Marshal(result)
	case *loginMutationLoginErrUserNotFound:
		typename = "ErrUserNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*loginMutationLoginErrUserNotFound
		}{typename, v}
		return json.Marshal(result)
	case *loginMutationLoginErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*loginMutationLoginErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *loginMutationLoginErrDoesNotOwnRequiredToken:
		typename = "ErrDoesNotOwnRequiredToken"

		result := struct {
			TypeName string `json:"__typename"`
			*loginMutationLoginErrDoesNotOwnRequiredToken
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for loginMutationLoginLoginPayloadOrError: "%T"`, v)
	}
}

// loginMutationLoginLoginPayloadViewer includes the requested fields of the GraphQL type Viewer.
type loginMutationLoginLoginPayloadViewer struct {
	User *loginMutationLoginLoginPayloadViewerUserGalleryUser `json:"user"`
}

// GetUser returns loginMutationLoginLoginPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *loginMutationLoginLoginPayloadViewer) GetUser() *loginMutationLoginLoginPayloadViewerUserGalleryUser {
	return v.User
}

// loginMutationLoginLoginPayloadViewerUserGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type loginMutationLoginLoginPayloadViewerUserGalleryUser struct {
	Username *string      `json:"username"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetUsername returns loginMutationLoginLoginPayloadViewerUserGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *loginMutationLoginLoginPayloadViewerUserGalleryUser) GetUsername() *string {
	return v.Username
}

// GetDbid returns loginMutationLoginLoginPayloadViewerUserGalleryUser.Dbid, and is useful for accessing the field via an interface.
func (v *loginMutationLoginLoginPayloadViewerUserGalleryUser) GetDbid() persist.DBID { return v.Dbid }

// loginMutationResponse is returned by loginMutation on success.
type loginMutationResponse struct {
	Login *loginMutationLoginLoginPayloadOrError `json:"-"`
}

// GetLogin returns loginMutationResponse.Login, and is useful for accessing the field via an interface.
func (v *loginMutationResponse) GetLogin() *loginMutationLoginLoginPayloadOrError { return v.Login }

func (v *loginMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*loginMutationResponse
		Login json.RawMessage `json:"login"`
		graphql.NoUnmarshalJSON
	}
	firstPass.loginMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Login
		src := firstPass.Login
		if len(src) != 0 && string(src) != "null" {
			*dst = new(loginMutationLoginLoginPayloadOrError)
			err = __unmarshalloginMutationLoginLoginPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal loginMutationResponse.Login: %w", err)
			}
		}
	}
	return nil
}

type __premarshalloginMutationResponse struct {
	Login json.RawMessage `json:"login"`
}

func (v *loginMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *loginMutationResponse) __premarshalJSON() (*__premarshalloginMutationResponse, error) {
	var retval __premarshalloginMutationResponse

	{

		dst := &retval.Login
		src := v.Login
		if src != nil {
			var err error
			*dst, err = __marshalloginMutationLoginLoginPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal loginMutationResponse.Login: %w", err)
			}
		}
	}
	return &retval, nil
}

// logoutMutationLogoutLogoutPayload includes the requested fields of the GraphQL type LogoutPayload.
type logoutMutationLogoutLogoutPayload struct {
	Viewer *logoutMutationLogoutLogoutPayloadViewer `json:"viewer"`
}

// GetViewer returns logoutMutationLogoutLogoutPayload.Viewer, and is useful for accessing the field via an interface.
func (v *logoutMutationLogoutLogoutPayload) GetViewer() *logoutMutationLogoutLogoutPayloadViewer {
	return v.Viewer
}

// logoutMutationLogoutLogoutPayloadViewer includes the requested fields of the GraphQL type Viewer.
type logoutMutationLogoutLogoutPayloadViewer struct {
	User *logoutMutationLogoutLogoutPayloadViewerUserGalleryUser `json:"user"`
}

// GetUser returns logoutMutationLogoutLogoutPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *logoutMutationLogoutLogoutPayloadViewer) GetUser() *logoutMutationLogoutLogoutPayloadViewerUserGalleryUser {
	return v.User
}

// logoutMutationLogoutLogoutPayloadViewerUserGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type logoutMutationLogoutLogoutPayloadViewerUserGalleryUser struct {
	Username *string      `json:"username"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetUsername returns logoutMutationLogoutLogoutPayloadViewerUserGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *logoutMutationLogoutLogoutPayloadViewerUserGalleryUser) GetUsername() *string {
	return v.Username
}

// GetDbid returns logoutMutationLogoutLogoutPayloadViewerUserGalleryUser.Dbid, and is useful for accessing the field via an interface.
func (v *logoutMutationLogoutLogoutPayloadViewerUserGalleryUser) GetDbid() persist.DBID {
	return v.Dbid
}

// logoutMutationResponse is returned by logoutMutation on success.
type logoutMutationResponse struct {
	Logout *logoutMutationLogoutLogoutPayload `json:"logout"`
}

// GetLogout returns logoutMutationResponse.Logout, and is useful for accessing the field via an interface.
func (v *logoutMutationResponse) GetLogout() *logoutMutationLogoutLogoutPayload { return v.Logout }

// removeUserWalletsMutationRemoveUserWalletsErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type removeUserWalletsMutationRemoveUserWalletsErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns removeUserWalletsMutationRemoveUserWalletsErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns removeUserWalletsMutationRemoveUserWalletsErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsErrInvalidInput) GetMessage() string {
	return v.Message
}

// removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized) GetTypename() *string {
	return v.Typename
}

// GetMessage returns removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized) GetMessage() string {
	return v.Message
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload includes the requested fields of the GraphQL type RemoveUserWalletsPayload.
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload struct {
	Typename *string                                                                   `json:"__typename"`
	Viewer   *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer `json:"viewer"`
}

// GetTypename returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload.Typename, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload) GetTypename() *string {
	return v.Typename
}

// GetViewer returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload.Viewer, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload) GetViewer() *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer {
	return v.Viewer
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError includes the requested fields of the GraphQL interface RemoveUserWalletsPayloadOrError.
//
// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError is implemented by the following types:
// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload
// removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized
// removeUserWalletsMutationRemoveUserWalletsErrInvalidInput
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError interface {
	implementsGraphQLInterfaceremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload) implementsGraphQLInterfaceremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError() {
}
func (v *removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized) implementsGraphQLInterfaceremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError() {
}
func (v *removeUserWalletsMutationRemoveUserWalletsErrInvalidInput) implementsGraphQLInterfaceremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError() {
}

func __unmarshalremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError(b []byte, v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "RemoveUserWalletsPayload":
		*v = new(removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(removeUserWalletsMutationRemoveUserWalletsErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RemoveUserWalletsPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError(v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload:
		typename = "RemoveUserWalletsPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload
		}{typename, v}
		return json.Marshal(result)
	case *removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *removeUserWalletsMutationRemoveUserWalletsErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*removeUserWalletsMutationRemoveUserWalletsErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError: "%T"`, v)
	}
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer includes the requested fields of the GraphQL type Viewer.
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer struct {
	User *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUser `json:"user"`
}

// GetUser returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer) GetUser() *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUser {
	return v.User
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUser struct {
	Wallets []*removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWallet `json:"wallets"`
}

// GetWallets returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUser.Wallets, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUser) GetWallets() []*removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWallet {
	return v.Wallets
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWallet includes the requested fields of the GraphQL type Wallet.
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWallet struct {
	Dbid         persist.DBID                                                                                                      `json:"dbid"`
	ChainAddress *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWalletChainAddress `json:"chainAddress"`
}

// GetDbid returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWallet.Dbid, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWallet) GetDbid() persist.DBID {
	return v.Dbid
}

// GetChainAddress returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWallet.ChainAddress, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWallet) GetChainAddress() *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWalletChainAddress {
	return v.ChainAddress
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWalletChainAddress includes the requested fields of the GraphQL type ChainAddress.
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWalletChainAddress struct {
	Address *string `json:"address"`
	Chain   *Chain  `json:"chain"`
}

// GetAddress returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWalletChainAddress.Address, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWalletChainAddress) GetAddress() *string {
	return v.Address
}

// GetChain returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWalletChainAddress.Chain, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserGalleryUserWalletsWalletChainAddress) GetChain() *Chain {
	return v.Chain
}

// removeUserWalletsMutationResponse is returned by removeUserWalletsMutation on success.
type removeUserWalletsMutationResponse struct {
	RemoveUserWallets *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError `json:"-"`
}

// GetRemoveUserWallets returns removeUserWalletsMutationResponse.RemoveUserWallets, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationResponse) GetRemoveUserWallets() *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError {
	return v.RemoveUserWallets
}

func (v *removeUserWalletsMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*removeUserWalletsMutationResponse
		RemoveUserWallets json.RawMessage `json:"removeUserWallets"`
		graphql.NoUnmarshalJSON
	}
	firstPass.removeUserWalletsMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.RemoveUserWallets
		src := firstPass.RemoveUserWallets
		if len(src) != 0 && string(src) != "null" {
			*dst = new(removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError)
			err = __unmarshalremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal removeUserWalletsMutationResponse.RemoveUserWallets: %w", err)
			}
		}
	}
	return nil
}

type __premarshalremoveUserWalletsMutationResponse struct {
	RemoveUserWallets json.RawMessage `json:"removeUserWallets"`
}

func (v *removeUserWalletsMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *removeUserWalletsMutationResponse) __premarshalJSON() (*__premarshalremoveUserWalletsMutationResponse, error) {
	var retval __premarshalremoveUserWalletsMutationResponse

	{

		dst := &retval.RemoveUserWallets
		src := v.RemoveUserWallets
		if src != nil {
			var err error
			*dst, err = __marshalremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal removeUserWalletsMutationResponse.RemoveUserWallets: %w", err)
			}
		}
	}
	return &retval, nil
}

// syncTokensMutationResponse is returned by syncTokensMutation on success.
type syncTokensMutationResponse struct {
	SyncTokens *syncTokensMutationSyncTokensSyncTokensPayloadOrError `json:"-"`
}

// GetSyncTokens returns syncTokensMutationResponse.SyncTokens, and is useful for accessing the field via an interface.
func (v *syncTokensMutationResponse) GetSyncTokens() *syncTokensMutationSyncTokensSyncTokensPayloadOrError {
	return v.SyncTokens
}

func (v *syncTokensMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*syncTokensMutationResponse
		SyncTokens json.RawMessage `json:"syncTokens"`
		graphql.NoUnmarshalJSON
	}
	firstPass.syncTokensMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SyncTokens
		src := firstPass.SyncTokens
		if len(src) != 0 && string(src) != "null" {
			*dst = new(syncTokensMutationSyncTokensSyncTokensPayloadOrError)
			err = __unmarshalsyncTokensMutationSyncTokensSyncTokensPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal syncTokensMutationResponse.SyncTokens: %w", err)
			}
		}
	}
	return nil
}

type __premarshalsyncTokensMutationResponse struct {
	SyncTokens json.RawMessage `json:"syncTokens"`
}

func (v *syncTokensMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *syncTokensMutationResponse) __premarshalJSON() (*__premarshalsyncTokensMutationResponse, error) {
	var retval __premarshalsyncTokensMutationResponse

	{

		dst := &retval.SyncTokens
		src := v.SyncTokens
		if src != nil {
			var err error
			*dst, err = __marshalsyncTokensMutationSyncTokensSyncTokensPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal syncTokensMutationResponse.SyncTokens: %w", err)
			}
		}
	}
	return &retval, nil
}

// syncTokensMutationSyncTokensErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type syncTokensMutationSyncTokensErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns syncTokensMutationSyncTokensErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensErrNotAuthorized) GetTypename() *string { return v.Typename }

// GetMessage returns syncTokensMutationSyncTokensErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensErrNotAuthorized) GetMessage() string { return v.Message }

// syncTokensMutationSyncTokensErrSyncFailed includes the requested fields of the GraphQL type ErrSyncFailed.
type syncTokensMutationSyncTokensErrSyncFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns syncTokensMutationSyncTokensErrSyncFailed.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensErrSyncFailed) GetTypename() *string { return v.Typename }

// GetMessage returns syncTokensMutationSyncTokensErrSyncFailed.Message, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensErrSyncFailed) GetMessage() string { return v.Message }

// syncTokensMutationSyncTokensSyncTokensPayload includes the requested fields of the GraphQL type SyncTokensPayload.
type syncTokensMutationSyncTokensSyncTokensPayload struct {
	Typename *string                                              `json:"__typename"`
	Viewer   *syncTokensMutationSyncTokensSyncTokensPayloadViewer `json:"viewer"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayload.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayload) GetTypename() *string { return v.Typename }

// GetViewer returns syncTokensMutationSyncTokensSyncTokensPayload.Viewer, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayload) GetViewer() *syncTokensMutationSyncTokensSyncTokensPayloadViewer {
	return v.Viewer
}

// syncTokensMutationSyncTokensSyncTokensPayloadOrError includes the requested fields of the GraphQL interface SyncTokensPayloadOrError.
//
// syncTokensMutationSyncTokensSyncTokensPayloadOrError is implemented by the following types:
// syncTokensMutationSyncTokensSyncTokensPayload
// syncTokensMutationSyncTokensErrNotAuthorized
// syncTokensMutationSyncTokensErrSyncFailed
type syncTokensMutationSyncTokensSyncTokensPayloadOrError interface {
	implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *syncTokensMutationSyncTokensSyncTokensPayload) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadOrError() {
}
func (v *syncTokensMutationSyncTokensErrNotAuthorized) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadOrError() {
}
func (v *syncTokensMutationSyncTokensErrSyncFailed) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadOrError() {
}

func __unmarshalsyncTokensMutationSyncTokensSyncTokensPayloadOrError(b []byte, v *syncTokensMutationSyncTokensSyncTokensPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "SyncTokensPayload":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayload)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(syncTokensMutationSyncTokensErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "ErrSyncFailed":
		*v = new(syncTokensMutationSyncTokensErrSyncFailed)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SyncTokensPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for syncTokensMutationSyncTokensSyncTokensPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalsyncTokensMutationSyncTokensSyncTokensPayloadOrError(v *syncTokensMutationSyncTokensSyncTokensPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *syncTokensMutationSyncTokensSyncTokensPayload:
		typename = "SyncTokensPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayload
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensErrSyncFailed:
		typename = "ErrSyncFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensErrSyncFailed
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for syncTokensMutationSyncTokensSyncTokensPayloadOrError: "%T"`, v)
	}
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewer includes the requested fields of the GraphQL type Viewer.
type syncTokensMutationSyncTokensSyncTokensPayloadViewer struct {
	User *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUser `json:"user"`
}

// GetUser returns syncTokensMutationSyncTokensSyncTokensPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewer) GetUser() *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUser {
	return v.User
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUser struct {
	Tokens []*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUserTokensToken `json:"tokens"`
}

// GetTokens returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUser.Tokens, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUser) GetTokens() []*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUserTokensToken {
	return v.Tokens
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUserTokensToken includes the requested fields of the GraphQL type Token.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUserTokensToken struct {
	Chain   *Chain       `json:"chain"`
	Dbid    persist.DBID `json:"dbid"`
	TokenId *string      `json:"tokenId"`
}

// GetChain returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUserTokensToken.Chain, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUserTokensToken) GetChain() *Chain {
	return v.Chain
}

// GetDbid returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUserTokensToken.Dbid, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUserTokensToken) GetDbid() persist.DBID {
	return v.Dbid
}

// GetTokenId returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUserTokensToken.TokenId, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserGalleryUserTokensToken) GetTokenId() *string {
	return v.TokenId
}

// trendingFeedQueryResponse is returned by trendingFeedQuery on success.
type trendingFeedQueryResponse struct {
	TrendingFeed *trendingFeedQueryTrendingFeedFeedConnection `json:"trendingFeed"`
}

// GetTrendingFeed returns trendingFeedQueryResponse.TrendingFeed, and is useful for accessing the field via an interface.
func (v *trendingFeedQueryResponse) GetTrendingFeed() *trendingFeedQueryTrendingFeedFeedConnection {
	return v.TrendingFeed
}

// trendingFeedQueryTrendingFeedFeedConnection includes the requested fields of the GraphQL type FeedConnection.
type trendingFeedQueryTrendingFeedFeedConnection struct {
	Edges []*trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge `json:"edges"`
}

// GetEdges returns trendingFeedQueryTrendingFeedFeedConnection.Edges, and is useful for accessing the field via an interface.
func (v *trendingFeedQueryTrendingFeedFeedConnection) GetEdges() []*trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge {
	return v.Edges
}

// trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge includes the requested fields of the GraphQL type FeedEdge.
type trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge struct {
	Node *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError `json:"-"`
}

// GetNode returns trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge.Node, and is useful for accessing the field via an interface.
func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge) GetNode() *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError {
	return v.Node
}

func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			*dst = new(trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError)
			err = __unmarshaltrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshaltrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge) __premarshalJSON() (*__premarshaltrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge, error) {
	var retval __premarshaltrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge

	{

		dst := &retval.Node
		src := v.Node
		if src != nil {
			var err error
			*dst, err = __marshaltrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdge.Node: %w", err)
			}
		}
	}
	return &retval, nil
}

// trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound includes the requested fields of the GraphQL type ErrFeedEventNotFound.
type trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound.Typename, and is useful for accessing the field via an interface.
func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound) GetTypename() *string {
	return v.Typename
}

// GetMessage returns trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound.Message, and is useful for accessing the field via an interface.
func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound) GetMessage() string {
	return v.Message
}

// trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction includes the requested fields of the GraphQL type ErrUnknownAction.
type trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction.Typename, and is useful for accessing the field via an interface.
func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction) GetTypename() *string {
	return v.Typename
}

// GetMessage returns trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction.Message, and is useful for accessing the field via an interface.
func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction) GetMessage() string {
	return v.Message
}

// trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent includes the requested fields of the GraphQL type FeedEvent.
type trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent struct {
	Typename *string      `json:"__typename"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetTypename returns trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent.Typename, and is useful for accessing the field via an interface.
func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent) GetTypename() *string {
	return v.Typename
}

// GetDbid returns trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent.Dbid, and is useful for accessing the field via an interface.
func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent) GetDbid() persist.DBID {
	return v.Dbid
}

// trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError includes the requested fields of the GraphQL interface FeedEventOrError.
//
// trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError is implemented by the following types:
// trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent
// trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound
// trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction
type trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError interface {
	implementsGraphQLInterfacetrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent) implementsGraphQLInterfacetrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError() {
}
func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound) implementsGraphQLInterfacetrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError() {
}
func (v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction) implementsGraphQLInterfacetrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError() {
}

func __unmarshaltrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError(b []byte, v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "FeedEvent":
		*v = new(trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent)
		return json.Unmarshal(b, *v)
	case "ErrFeedEventNotFound":
		*v = new(trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound)
		return json.Unmarshal(b, *v)
	case "ErrUnknownAction":
		*v = new(trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing FeedEventOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError: "%v"`, tn.TypeName)
	}
}

func __marshaltrendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError(v *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent:
		typename = "FeedEvent"

		result := struct {
			TypeName string `json:"__typename"`
			*trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEvent
		}{typename, v}
		return json.Marshal(result)
	case *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound:
		typename = "ErrFeedEventNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrFeedEventNotFound
		}{typename, v}
		return json.Marshal(result)
	case *trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction:
		typename = "ErrUnknownAction"

		result := struct {
			TypeName string `json:"__typename"`
			*trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeErrUnknownAction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for trendingFeedQueryTrendingFeedFeedConnectionEdgesFeedEdgeNodeFeedEventOrError: "%T"`, v)
	}
}

// trendingUsersQueryResponse is returned by trendingUsersQuery on success.
type trendingUsersQueryResponse struct {
	TrendingUsers *trendingUsersQueryTrendingUsersTrendingUsersPayloadOrError `json:"-"`
}

// GetTrendingUsers returns trendingUsersQueryResponse.TrendingUsers, and is useful for accessing the field via an interface.
func (v *trendingUsersQueryResponse) GetTrendingUsers() *trendingUsersQueryTrendingUsersTrendingUsersPayloadOrError {
	return v.TrendingUsers
}

func (v *trendingUsersQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*trendingUsersQueryResponse
		TrendingUsers json.RawMessage `json:"trendingUsers"`
		graphql.NoUnmarshalJSON
	}
	firstPass.trendingUsersQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.TrendingUsers
		src := firstPass.TrendingUsers
		if len(src) != 0 && string(src) != "null" {
			*dst = new(trendingUsersQueryTrendingUsersTrendingUsersPayloadOrError)
			err = __unmarshaltrendingUsersQueryTrendingUsersTrendingUsersPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal trendingUsersQueryResponse.TrendingUsers: %w", err)
			}
		}
	}
	return nil
}

type __premarshaltrendingUsersQueryResponse struct {
	TrendingUsers json.RawMessage `json:"trendingUsers"`
}

func (v *trendingUsersQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *trendingUsersQueryResponse) __premarshalJSON() (*__premarshaltrendingUsersQueryResponse, error) {
	var retval __premarshaltrendingUsersQueryResponse

	{

		dst := &retval.TrendingUsers
		src := v.TrendingUsers
		if src != nil {
			var err error
			*dst, err = __marshaltrendingUsersQueryTrendingUsersTrendingUsersPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal trendingUsersQueryResponse.TrendingUsers: %w", err)
			}
		}
	}
	return &retval, nil
}

// trendingUsersQueryTrendingUsersTrendingUsersPayload includes the requested fields of the GraphQL type TrendingUsersPayload.
type trendingUsersQueryTrendingUsersTrendingUsersPayload struct {
	Typename *string                                                               `json:"__typename"`
	Users    []trendingUsersQueryTrendingUsersTrendingUsersPayloadUsersGalleryUser `json:"users"`
}

// GetTypename returns trendingUsersQueryTrendingUsersTrendingUsersPayload.Typename, and is useful for accessing the field via an interface.
func (v *trendingUsersQueryTrendingUsersTrendingUsersPayload) GetTypename() *string {
	return v.Typename
}

// GetUsers returns trendingUsersQueryTrendingUsersTrendingUsersPayload.Users, and is useful for accessing the field via an interface.
func (v *trendingUsersQueryTrendingUsersTrendingUsersPayload) GetUsers() []trendingUsersQueryTrendingUsersTrendingUsersPayloadUsersGalleryUser {
	return v.Users
}

// trendingUsersQueryTrendingUsersTrendingUsersPayloadOrError includes the requested fields of the GraphQL interface TrendingUsersPayloadOrError.
//
// trendingUsersQueryTrendingUsersTrendingUsersPayloadOrError is implemented by the following types:
// trendingUsersQueryTrendingUsersTrendingUsersPayload
type trendingUsersQueryTrendingUsersTrendingUsersPayloadOrError interface {
	implementsGraphQLInterfacetrendingUsersQueryTrendingUsersTrendingUsersPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *trendingUsersQueryTrendingUsersTrendingUsersPayload) implementsGraphQLInterfacetrendingUsersQueryTrendingUsersTrendingUsersPayloadOrError() {
}

func __unmarshaltrendingUsersQueryTrendingUsersTrendingUsersPayloadOrError(b []byte, v *trendingUsersQueryTrendingUsersTrendingUsersPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "TrendingUsersPayload":
		*v = new(trendingUsersQueryTrendingUsersTrendingUsersPayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing TrendingUsersPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for trendingUsersQueryTrendingUsersTrendingUsersPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshaltrendingUsersQueryTrendingUsersTrendingUsersPayloadOrError(v *trendingUsersQueryTrendingUsersTrendingUsersPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *trendingUsersQueryTrendingUsersTrendingUsersPayload:
		typename = "TrendingUsersPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*trendingUsersQueryTrendingUsersTrendingUsersPayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for trendingUsersQueryTrendingUsersTrendingUsersPayloadOrError: "%T"`, v)
	}
}

// trendingUsersQueryTrendingUsersTrendingUsersPayloadUsersGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type trendingUsersQueryTrendingUsersTrendingUsersPayloadUsersGalleryUser struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns trendingUsersQueryTrendingUsersTrendingUsersPayloadUsersGalleryUser.Dbid, and is useful for accessing the field via an interface.
func (v *trendingUsersQueryTrendingUsersTrendingUsersPayloadUsersGalleryUser) GetDbid() persist.DBID {
	return v.Dbid
}

// userByAddressQueryResponse is returned by userByAddressQuery on success.
type userByAddressQueryResponse struct {
	UserByAddress *userByAddressQueryUserByAddressUserByAddressOrError `json:"-"`
}

// GetUserByAddress returns userByAddressQueryResponse.UserByAddress, and is useful for accessing the field via an interface.
func (v *userByAddressQueryResponse) GetUserByAddress() *userByAddressQueryUserByAddressUserByAddressOrError {
	return v.UserByAddress
}

func (v *userByAddressQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userByAddressQueryResponse
		UserByAddress json.RawMessage `json:"userByAddress"`
		graphql.NoUnmarshalJSON
	}
	firstPass.userByAddressQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UserByAddress
		src := firstPass.UserByAddress
		if len(src) != 0 && string(src) != "null" {
			*dst = new(userByAddressQueryUserByAddressUserByAddressOrError)
			err = __unmarshaluserByAddressQueryUserByAddressUserByAddressOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal userByAddressQueryResponse.UserByAddress: %w", err)
			}
		}
	}
	return nil
}

type __premarshaluserByAddressQueryResponse struct {
	UserByAddress json.RawMessage `json:"userByAddress"`
}

func (v *userByAddressQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userByAddressQueryResponse) __premarshalJSON() (*__premarshaluserByAddressQueryResponse, error) {
	var retval __premarshaluserByAddressQueryResponse

	{

		dst := &retval.UserByAddress
		src := v.UserByAddress
		if src != nil {
			var err error
			*dst, err = __marshaluserByAddressQueryUserByAddressUserByAddressOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal userByAddressQueryResponse.UserByAddress: %w", err)
			}
		}
	}
	return &retval, nil
}

// userByAddressQueryUserByAddressErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type userByAddressQueryUserByAddressErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByAddressQueryUserByAddressErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns userByAddressQueryUserByAddressErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressErrInvalidInput) GetMessage() string { return v.Message }

// userByAddressQueryUserByAddressErrUserNotFound includes the requested fields of the GraphQL type ErrUserNotFound.
type userByAddressQueryUserByAddressErrUserNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByAddressQueryUserByAddressErrUserNotFound.Typename, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressErrUserNotFound) GetTypename() *string { return v.Typename }

// GetMessage returns userByAddressQueryUserByAddressErrUserNotFound.Message, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressErrUserNotFound) GetMessage() string { return v.Message }

// userByAddressQueryUserByAddressGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type userByAddressQueryUserByAddressGalleryUser struct {
	Typename *string      `json:"__typename"`
	Username *string      `json:"username"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetTypename returns userByAddressQueryUserByAddressGalleryUser.Typename, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressGalleryUser) GetTypename() *string { return v.Typename }

// GetUsername returns userByAddressQueryUserByAddressGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressGalleryUser) GetUsername() *string { return v.Username }

// GetDbid returns userByAddressQueryUserByAddressGalleryUser.Dbid, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressGalleryUser) GetDbid() persist.DBID { return v.Dbid }

// userByAddressQueryUserByAddressUserByAddressOrError includes the requested fields of the GraphQL interface UserByAddressOrError.
//
// userByAddressQueryUserByAddressUserByAddressOrError is implemented by the following types:
// userByAddressQueryUserByAddressGalleryUser
// userByAddressQueryUserByAddressErrUserNotFound
// userByAddressQueryUserByAddressErrInvalidInput
type userByAddressQueryUserByAddressUserByAddressOrError interface {
	implementsGraphQLInterfaceuserByAddressQueryUserByAddressUserByAddressOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *userByAddressQueryUserByAddressGalleryUser) implementsGraphQLInterfaceuserByAddressQueryUserByAddressUserByAddressOrError() {
}
func (v *userByAddressQueryUserByAddressErrUserNotFound) implementsGraphQLInterfaceuserByAddressQueryUserByAddressUserByAddressOrError() {
}
func (v *userByAddressQueryUserByAddressErrInvalidInput) implementsGraphQLInterfaceuserByAddressQueryUserByAddressUserByAddressOrError() {
}

func __unmarshaluserByAddressQueryUserByAddressUserByAddressOrError(b []byte, v *userByAddressQueryUserByAddressUserByAddressOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "GalleryUser":
		*v = new(userByAddressQueryUserByAddressGalleryUser)
		return json.Unmarshal(b, *v)
	case "ErrUserNotFound":
		*v = new(userByAddressQueryUserByAddressErrUserNotFound)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(userByAddressQueryUserByAddressErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserByAddressOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for userByAddressQueryUserByAddressUserByAddressOrError: "%v"`, tn.TypeName)
	}
}

func __marshaluserByAddressQueryUserByAddressUserByAddressOrError(v *userByAddressQueryUserByAddressUserByAddressOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *userByAddressQueryUserByAddressGalleryUser:
		typename = "GalleryUser"

		result := struct {
			TypeName string `json:"__typename"`
			*userByAddressQueryUserByAddressGalleryUser
		}{typename, v}
		return json.Marshal(result)
	case *userByAddressQueryUserByAddressErrUserNotFound:
		typename = "ErrUserNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*userByAddressQueryUserByAddressErrUserNotFound
		}{typename, v}
		return json.Marshal(result)
	case *userByAddressQueryUserByAddressErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*userByAddressQueryUserByAddressErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for userByAddressQueryUserByAddressUserByAddressOrError: "%T"`, v)
	}
}

// userByIdQueryResponse is returned by userByIdQuery on success.
type userByIdQueryResponse struct {
	UserById *userByIdQueryUserByIdUserByIdOrError `json:"-"`
}

// GetUserById returns userByIdQueryResponse.UserById, and is useful for accessing the field via an interface.
func (v *userByIdQueryResponse) GetUserById() *userByIdQueryUserByIdUserByIdOrError {
	return v.UserById
}

func (v *userByIdQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userByIdQueryResponse
		UserById json.RawMessage `json:"userById"`
		graphql.NoUnmarshalJSON
	}
	firstPass.userByIdQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UserById
		src := firstPass.UserById
		if len(src) != 0 && string(src) != "null" {
			*dst = new(userByIdQueryUserByIdUserByIdOrError)
			err = __unmarshaluserByIdQueryUserByIdUserByIdOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal userByIdQueryResponse.UserById: %w", err)
			}
		}
	}
	return nil
}

type __premarshaluserByIdQueryResponse struct {
	UserById json.RawMessage `json:"userById"`
}

func (v *userByIdQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userByIdQueryResponse) __premarshalJSON() (*__premarshaluserByIdQueryResponse, error) {
	var retval __premarshaluserByIdQueryResponse

	{

		dst := &retval.UserById
		src := v.UserById
		if src != nil {
			var err error
			*dst, err = __marshaluserByIdQueryUserByIdUserByIdOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal userByIdQueryResponse.UserById: %w", err)
			}
		}
	}
	return &retval, nil
}

// userByIdQueryUserByIdErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type userByIdQueryUserByIdErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByIdQueryUserByIdErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns userByIdQueryUserByIdErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdErrInvalidInput) GetMessage() string { return v.Message }

// userByIdQueryUserByIdErrUserNotFound includes the requested fields of the GraphQL type ErrUserNotFound.
type userByIdQueryUserByIdErrUserNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByIdQueryUserByIdErrUserNotFound.Typename, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdErrUserNotFound) GetTypename() *string { return v.Typename }

// GetMessage returns userByIdQueryUserByIdErrUserNotFound.Message, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdErrUserNotFound) GetMessage() string { return v.Message }

// userByIdQueryUserByIdGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type userByIdQueryUserByIdGalleryUser struct {
	Typename *string      `json:"__typename"`
	Username *string      `json:"username"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetTypename returns userByIdQueryUserByIdGalleryUser.Typename, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdGalleryUser) GetTypename() *string { return v.Typename }

// GetUsername returns userByIdQueryUserByIdGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdGalleryUser) GetUsername() *string { return v.Username }

// GetDbid returns userByIdQueryUserByIdGalleryUser.Dbid, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdGalleryUser) GetDbid() persist.DBID { return v.Dbid }

// userByIdQueryUserByIdUserByIdOrError includes the requested fields of the GraphQL interface UserByIdOrError.
//
// userByIdQueryUserByIdUserByIdOrError is implemented by the following types:
// userByIdQueryUserByIdGalleryUser
// userByIdQueryUserByIdErrUserNotFound
// userByIdQueryUserByIdErrInvalidInput
type userByIdQueryUserByIdUserByIdOrError interface {
	implementsGraphQLInterfaceuserByIdQueryUserByIdUserByIdOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *userByIdQueryUserByIdGalleryUser) implementsGraphQLInterfaceuserByIdQueryUserByIdUserByIdOrError() {
}
func (v *userByIdQueryUserByIdErrUserNotFound) implementsGraphQLInterfaceuserByIdQueryUserByIdUserByIdOrError() {
}
func (v *userByIdQueryUserByIdErrInvalidInput) implementsGraphQLInterfaceuserByIdQueryUserByIdUserByIdOrError() {
}

func __unmarshaluserByIdQueryUserByIdUserByIdOrError(b []byte, v *userByIdQueryUserByIdUserByIdOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "GalleryUser":
		*v = new(userByIdQueryUserByIdGalleryUser)
		return json.Unmarshal(b, *v)
	case "ErrUserNotFound":
		*v = new(userByIdQueryUserByIdErrUserNotFound)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(userByIdQueryUserByIdErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserByIdOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for userByIdQueryUserByIdUserByIdOrError: "%v"`, tn.TypeName)
	}
}

func __marshaluserByIdQueryUserByIdUserByIdOrError(v *userByIdQueryUserByIdUserByIdOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *userByIdQueryUserByIdGalleryUser:
		typename = "GalleryUser"

		result := struct {
			TypeName string `json:"__typename"`
			*userByIdQueryUserByIdGalleryUser
		}{typename, v}
		return json.Marshal(result)
	case *userByIdQueryUserByIdErrUserNotFound:
		typename = "ErrUserNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*userByIdQueryUserByIdErrUserNotFound
		}{typename, v}
		return json.Marshal(result)
	case *userByIdQueryUserByIdErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*userByIdQueryUserByIdErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for userByIdQueryUserByIdUserByIdOrError: "%T"`, v)
	}
}

// userByUsernameQueryResponse is returned by userByUsernameQuery on success.
type userByUsernameQueryResponse struct {
	UserByUsername *userByUsernameQueryUserByUsernameUserByUsernameOrError `json:"-"`
}

// GetUserByUsername returns userByUsernameQueryResponse.UserByUsername, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryResponse) GetUserByUsername() *userByUsernameQueryUserByUsernameUserByUsernameOrError {
	return v.UserByUsername
}

func (v *userByUsernameQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userByUsernameQueryResponse
		UserByUsername json.RawMessage `json:"userByUsername"`
		graphql.NoUnmarshalJSON
	}
	firstPass.userByUsernameQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UserByUsername
		src := firstPass.UserByUsername
		if len(src) != 0 && string(src) != "null" {
			*dst = new(userByUsernameQueryUserByUsernameUserByUsernameOrError)
			err = __unmarshaluserByUsernameQueryUserByUsernameUserByUsernameOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal userByUsernameQueryResponse.UserByUsername: %w", err)
			}
		}
	}
	return nil
}

type __premarshaluserByUsernameQueryResponse struct {
	UserByUsername json.RawMessage `json:"userByUsername"`
}

func (v *userByUsernameQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userByUsernameQueryResponse) __premarshalJSON() (*__premarshaluserByUsernameQueryResponse, error) {
	var retval __premarshaluserByUsernameQueryResponse

	{

		dst := &retval.UserByUsername
		src := v.UserByUsername
		if src != nil {
			var err error
			*dst, err = __marshaluserByUsernameQueryUserByUsernameUserByUsernameOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal userByUsernameQueryResponse.UserByUsername: %w", err)
			}
		}
	}
	return &retval, nil
}

// userByUsernameQueryUserByUsernameErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type userByUsernameQueryUserByUsernameErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByUsernameQueryUserByUsernameErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns userByUsernameQueryUserByUsernameErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameErrInvalidInput) GetMessage() string { return v.Message }

// userByUsernameQueryUserByUsernameErrUserNotFound includes the requested fields of the GraphQL type ErrUserNotFound.
type userByUsernameQueryUserByUsernameErrUserNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByUsernameQueryUserByUsernameErrUserNotFound.Typename, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameErrUserNotFound) GetTypename() *string { return v.Typename }

// GetMessage returns userByUsernameQueryUserByUsernameErrUserNotFound.Message, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameErrUserNotFound) GetMessage() string { return v.Message }

// userByUsernameQueryUserByUsernameGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type userByUsernameQueryUserByUsernameGalleryUser struct {
	Typename *string      `json:"__typename"`
	Username *string      `json:"username"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetTypename returns userByUsernameQueryUserByUsernameGalleryUser.Typename, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameGalleryUser) GetTypename() *string { return v.Typename }

// GetUsername returns userByUsernameQueryUserByUsernameGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameGalleryUser) GetUsername() *string { return v.Username }

// GetDbid returns userByUsernameQueryUserByUsernameGalleryUser.Dbid, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameGalleryUser) GetDbid() persist.DBID { return v.Dbid }

// userByUsernameQueryUserByUsernameUserByUsernameOrError includes the requested fields of the GraphQL interface UserByUsernameOrError.
//
// userByUsernameQueryUserByUsernameUserByUsernameOrError is implemented by the following types:
// userByUsernameQueryUserByUsernameGalleryUser
// userByUsernameQueryUserByUsernameErrUserNotFound
// userByUsernameQueryUserByUsernameErrInvalidInput
type userByUsernameQueryUserByUsernameUserByUsernameOrError interface {
	implementsGraphQLInterfaceuserByUsernameQueryUserByUsernameUserByUsernameOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *userByUsernameQueryUserByUsernameGalleryUser) implementsGraphQLInterfaceuserByUsernameQueryUserByUsernameUserByUsernameOrError() {
}
func (v *userByUsernameQueryUserByUsernameErrUserNotFound) implementsGraphQLInterfaceuserByUsernameQueryUserByUsernameUserByUsernameOrError() {
}
func (v *userByUsernameQueryUserByUsernameErrInvalidInput) implementsGraphQLInterfaceuserByUsernameQueryUserByUsernameUserByUsernameOrError() {
}

func __unmarshaluserByUsernameQueryUserByUsernameUserByUsernameOrError(b []byte, v *userByUsernameQueryUserByUsernameUserByUsernameOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "GalleryUser":
		*v = new(userByUsernameQueryUserByUsernameGalleryUser)
		return json.Unmarshal(b, *v)
	case "ErrUserNotFound":
		*v = new(userByUsernameQueryUserByUsernameErrUserNotFound)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(userByUsernameQueryUserByUsernameErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserByUsernameOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for userByUsernameQueryUserByUsernameUserByUsernameOrError: "%v"`, tn.TypeName)
	}
}

func __marshaluserByUsernameQueryUserByUsernameUserByUsernameOrError(v *userByUsernameQueryUserByUsernameUserByUsernameOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *userByUsernameQueryUserByUsernameGalleryUser:
		typename = "GalleryUser"

		result := struct {
			TypeName string `json:"__typename"`
			*userByUsernameQueryUserByUsernameGalleryUser
		}{typename, v}
		return json.Marshal(result)
	case *userByUsernameQueryUserByUsernameErrUserNotFound:
		typename = "ErrUserNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*userByUsernameQueryUserByUsernameErrUserNotFound
		}{typename, v}
		return json.Marshal(result)
	case *userByUsernameQueryUserByUsernameErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*userByUsernameQueryUserByUsernameErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for userByUsernameQueryUserByUsernameUserByUsernameOrError: "%T"`, v)
	}
}

// viewGalleryMutationResponse is returned by viewGalleryMutation on success.
type viewGalleryMutationResponse struct {
	ViewGallery *viewGalleryMutationViewGalleryViewGalleryPayloadOrError `json:"-"`
}

// GetViewGallery returns viewGalleryMutationResponse.ViewGallery, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationResponse) GetViewGallery() *viewGalleryMutationViewGalleryViewGalleryPayloadOrError {
	return v.ViewGallery
}

func (v *viewGalleryMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*viewGalleryMutationResponse
		ViewGallery json.RawMessage `json:"viewGallery"`
		graphql.NoUnmarshalJSON
	}
	firstPass.viewGalleryMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ViewGallery
		src := firstPass.ViewGallery
		if len(src) != 0 && string(src) != "null" {
			*dst = new(viewGalleryMutationViewGalleryViewGalleryPayloadOrError)
			err = __unmarshalviewGalleryMutationViewGalleryViewGalleryPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal viewGalleryMutationResponse.ViewGallery: %w", err)
			}
		}
	}
	return nil
}

type __premarshalviewGalleryMutationResponse struct {
	ViewGallery json.RawMessage `json:"viewGallery"`
}

func (v *viewGalleryMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *viewGalleryMutationResponse) __premarshalJSON() (*__premarshalviewGalleryMutationResponse, error) {
	var retval __premarshalviewGalleryMutationResponse

	{

		dst := &retval.ViewGallery
		src := v.ViewGallery
		if src != nil {
			var err error
			*dst, err = __marshalviewGalleryMutationViewGalleryViewGalleryPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal viewGalleryMutationResponse.ViewGallery: %w", err)
			}
		}
	}
	return &retval, nil
}

// viewGalleryMutationViewGalleryErrAuthenticationFailed includes the requested fields of the GraphQL type ErrAuthenticationFailed.
type viewGalleryMutationViewGalleryErrAuthenticationFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns viewGalleryMutationViewGalleryErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationViewGalleryErrAuthenticationFailed) GetTypename() *string {
	return v.Typename
}

// GetMessage returns viewGalleryMutationViewGalleryErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationViewGalleryErrAuthenticationFailed) GetMessage() string { return v.Message }

// viewGalleryMutationViewGalleryViewGalleryPayload includes the requested fields of the GraphQL type ViewGalleryPayload.
type viewGalleryMutationViewGalleryViewGalleryPayload struct {
	Typename *string                                                  `json:"__typename"`
	Gallery  *viewGalleryMutationViewGalleryViewGalleryPayloadGallery `json:"gallery"`
}

// GetTypename returns viewGalleryMutationViewGalleryViewGalleryPayload.Typename, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationViewGalleryViewGalleryPayload) GetTypename() *string { return v.Typename }

// GetGallery returns viewGalleryMutationViewGalleryViewGalleryPayload.Gallery, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationViewGalleryViewGalleryPayload) GetGallery() *viewGalleryMutationViewGalleryViewGalleryPayloadGallery {
	return v.Gallery
}

// viewGalleryMutationViewGalleryViewGalleryPayloadGallery includes the requested fields of the GraphQL type Gallery.
type viewGalleryMutationViewGalleryViewGalleryPayloadGallery struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns viewGalleryMutationViewGalleryViewGalleryPayloadGallery.Dbid, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationViewGalleryViewGalleryPayloadGallery) GetDbid() persist.DBID {
	return v.Dbid
}

// viewGalleryMutationViewGalleryViewGalleryPayloadOrError includes the requested fields of the GraphQL interface ViewGalleryPayloadOrError.
//
// viewGalleryMutationViewGalleryViewGalleryPayloadOrError is implemented by the following types:
// viewGalleryMutationViewGalleryViewGalleryPayload
// viewGalleryMutationViewGalleryErrAuthenticationFailed
type viewGalleryMutationViewGalleryViewGalleryPayloadOrError interface {
	implementsGraphQLInterfaceviewGalleryMutationViewGalleryViewGalleryPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *viewGalleryMutationViewGalleryViewGalleryPayload) implementsGraphQLInterfaceviewGalleryMutationViewGalleryViewGalleryPayloadOrError() {
}
func (v *viewGalleryMutationViewGalleryErrAuthenticationFailed) implementsGraphQLInterfaceviewGalleryMutationViewGalleryViewGalleryPayloadOrError() {
}

func __unmarshalviewGalleryMutationViewGalleryViewGalleryPayloadOrError(b []byte, v *viewGalleryMutationViewGalleryViewGalleryPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ViewGalleryPayload":
		*v = new(viewGalleryMutationViewGalleryViewGalleryPayload)
		return json.Unmarshal(b, *v)
	case "ErrAuthenticationFailed":
		*v = new(viewGalleryMutationViewGalleryErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ViewGalleryPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for viewGalleryMutationViewGalleryViewGalleryPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalviewGalleryMutationViewGalleryViewGalleryPayloadOrError(v *viewGalleryMutationViewGalleryViewGalleryPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *viewGalleryMutationViewGalleryViewGalleryPayload:
		typename = "ViewGalleryPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*viewGalleryMutationViewGalleryViewGalleryPayload
		}{typename, v}
		return json.Marshal(result)
	case *viewGalleryMutationViewGalleryErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*viewGalleryMutationViewGalleryErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for viewGalleryMutationViewGalleryViewGalleryPayloadOrError: "%T"`, v)
	}
}

// viewerQueryResponse is returned by viewerQuery on success.
type viewerQueryResponse struct {
	Viewer *viewerQueryViewerViewerOrError `json:"-"`
}

// GetViewer returns viewerQueryResponse.Viewer, and is useful for accessing the field via an interface.
func (v *viewerQueryResponse) GetViewer() *viewerQueryViewerViewerOrError { return v.Viewer }

func (v *viewerQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*viewerQueryResponse
		Viewer json.RawMessage `json:"viewer"`
		graphql.NoUnmarshalJSON
	}
	firstPass.viewerQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Viewer
		src := firstPass.Viewer
		if len(src) != 0 && string(src) != "null" {
			*dst = new(viewerQueryViewerViewerOrError)
			err = __unmarshalviewerQueryViewerViewerOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal viewerQueryResponse.Viewer: %w", err)
			}
		}
	}
	return nil
}

type __premarshalviewerQueryResponse struct {
	Viewer json.RawMessage `json:"viewer"`
}

func (v *viewerQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *viewerQueryResponse) __premarshalJSON() (*__premarshalviewerQueryResponse, error) {
	var retval __premarshalviewerQueryResponse

	{

		dst := &retval.Viewer
		src := v.Viewer
		if src != nil {
			var err error
			*dst, err = __marshalviewerQueryViewerViewerOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal viewerQueryResponse.Viewer: %w", err)
			}
		}
	}
	return &retval, nil
}

// viewerQueryViewer includes the requested fields of the GraphQL type Viewer.
type viewerQueryViewer struct {
	Typename *string                           `json:"__typename"`
	User     *viewerQueryViewerUserGalleryUser `json:"user"`
}

// GetTypename returns viewerQueryViewer.Typename, and is useful for accessing the field via an interface.
func (v *viewerQueryViewer) GetTypename() *string { return v.Typename }

// GetUser returns viewerQueryViewer.User, and is useful for accessing the field via an interface.
func (v *viewerQueryViewer) GetUser() *viewerQueryViewerUserGalleryUser { return v.User }

// viewerQueryViewerErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type viewerQueryViewerErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns viewerQueryViewerErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerErrNotAuthorized) GetTypename() *string { return v.Typename }

// GetMessage returns viewerQueryViewerErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerErrNotAuthorized) GetMessage() string { return v.Message }

// viewerQueryViewerUserGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type viewerQueryViewerUserGalleryUser struct {
	Username *string      `json:"username"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetUsername returns viewerQueryViewerUserGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerUserGalleryUser) GetUsername() *string { return v.Username }

// GetDbid returns viewerQueryViewerUserGalleryUser.Dbid, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerUserGalleryUser) GetDbid() persist.DBID { return v.Dbid }

// viewerQueryViewerViewerOrError includes the requested fields of the GraphQL interface ViewerOrError.
//
// viewerQueryViewerViewerOrError is implemented by the following types:
// viewerQueryViewer
// viewerQueryViewerErrNotAuthorized
type viewerQueryViewerViewerOrError interface {
	implementsGraphQLInterfaceviewerQueryViewerViewerOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *viewerQueryViewer) implementsGraphQLInterfaceviewerQueryViewerViewerOrError() {}
func (v *viewerQueryViewerErrNotAuthorized) implementsGraphQLInterfaceviewerQueryViewerViewerOrError() {
}

func __unmarshalviewerQueryViewerViewerOrError(b []byte, v *viewerQueryViewerViewerOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Viewer":
		*v = new(viewerQueryViewer)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(viewerQueryViewerErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ViewerOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for viewerQueryViewerViewerOrError: "%v"`, tn.TypeName)
	}
}

func __marshalviewerQueryViewerViewerOrError(v *viewerQueryViewerViewerOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *viewerQueryViewer:
		typename = "Viewer"

		result := struct {
			TypeName string `json:"__typename"`
			*viewerQueryViewer
		}{typename, v}
		return json.Marshal(result)
	case *viewerQueryViewerErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*viewerQueryViewerErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for viewerQueryViewerViewerOrError: "%T"`, v)
	}
}

func addUserWalletMutation(
	ctx context.Context,
	client graphql.Client,
	chainAddress ChainAddressInput,
	authMechanism AuthMechanism,
) (*addUserWalletMutationResponse, error) {
	req := &graphql.Request{
		OpName: "addUserWalletMutation",
		Query: `
mutation addUserWalletMutation ($chainAddress: ChainAddressInput!, $authMechanism: AuthMechanism!) {
	addUserWallet(chainAddress: $chainAddress, authMechanism: $authMechanism) {
		__typename
		... on Error {
			__typename
			message
		}
		... on AddUserWalletPayload {
			viewer {
				user {
					wallets {
						dbid
						chainAddress {
							address
							chain
						}
					}
				}
			}
		}
	}
}
`,
		Variables: &__addUserWalletMutationInput{
			ChainAddress:  chainAddress,
			AuthMechanism: authMechanism,
		},
	}
	var err error

	var data addUserWalletMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func admireFeedEventMutation(
	ctx context.Context,
	client graphql.Client,
	feedEventId persist.DBID,
) (*admireFeedEventMutationResponse, error) {
	req := &graphql.Request{
		OpName: "admireFeedEventMutation",
		Query: `
mutation admireFeedEventMutation ($feedEventId: DBID!) {
	admireFeedEvent(feedEventId: $feedEventId) {
		__typename
		... on Error {
			__typename
			message
		}
		... on AdmireFeedEventPayload {
			feedEvent {
				dbid
			}
		}
	}
}
`,
		Variables: &__admireFeedEventMutationInput{
			FeedEventId: feedEventId,
		},
	}
	var err error

	var data admireFeedEventMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func commentOnFeedEventMutation(
	ctx context.Context,
	client graphql.Client,
	feedEventId persist.DBID,
	comment string,
) (*commentOnFeedEventMutationResponse, error) {
	req := &graphql.Request{
		OpName: "commentOnFeedEventMutation",
		Query: `
mutation commentOnFeedEventMutation ($feedEventId: DBID!, $comment: String!) {
	commentOnFeedEvent(feedEventId: $feedEventId, comment: $comment) {
		__typename
		... on Error {
			__typename
			message
		}
		... on CommentOnFeedEventPayload {
			feedEvent {
				dbid
			}
		}
	}
}
`,
		Variables: &__commentOnFeedEventMutationInput{
			FeedEventId: feedEventId,
			Comment:     comment,
		},
	}
	var err error

	var data commentOnFeedEventMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createCollectionMutation(
	ctx context.Context,
	client graphql.Client,
	input CreateCollectionInput,
) (*createCollectionMutationResponse, error) {
	req := &graphql.Request{
		OpName: "createCollectionMutation",
		Query: `
mutation createCollectionMutation ($input: CreateCollectionInput!) {
	createCollection(input: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on CreateCollectionPayload {
			collection {
				dbid
				name
				tokens {
					token {
						dbid
					}
				}
			}
		}
	}
}
`,
		Variables: &__createCollectionMutationInput{
			Input: input,
		},
	}
	var err error

	var data createCollectionMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createUserMutation(
	ctx context.Context,
	client graphql.Client,
	authMechanism AuthMechanism,
	input CreateUserInput,
) (*createUserMutationResponse, error) {
	req := &graphql.Request{
		OpName: "createUserMutation",
		Query: `
mutation createUserMutation ($authMechanism: AuthMechanism!, $input: CreateUserInput!) {
	createUser(authMechanism: $authMechanism, input: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on CreateUserPayload {
			viewer {
				user {
					username
					dbid
					bio
					galleries {
						dbid
					}
				}
			}
		}
	}
}
`,
		Variables: &__createUserMutationInput{
			AuthMechanism: authMechanism,
			Input:         input,
		},
	}
	var err error

	var data createUserMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getAuthNonceMutation(
	ctx context.Context,
	client graphql.Client,
	input ChainAddressInput,
) (*getAuthNonceMutationResponse, error) {
	req := &graphql.Request{
		OpName: "getAuthNonceMutation",
		Query: `
mutation getAuthNonceMutation ($input: ChainAddressInput!) {
	getAuthNonce(chainAddress: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on AuthNonce {
			nonce
			userExists
		}
	}
}
`,
		Variables: &__getAuthNonceMutationInput{
			Input: input,
		},
	}
	var err error

	var data getAuthNonceMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func globalFeedQuery(
	ctx context.Context,
	client graphql.Client,
	first *int,
) (*globalFeedQueryResponse, error) {
	req := &graphql.Request{
		OpName: "globalFeedQuery",
		Query: `
query globalFeedQuery ($first: Int) {
	globalFeed(first: $first) {
		edges {
			node {
				__typename
				... on Error {
					__typename
					message
				}
				... on FeedEvent {
					dbid
				}
			}
		}
	}
}
`,
		Variables: &__globalFeedQueryInput{
			First: first,
		},
	}
	var err error

	var data globalFeedQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func loginMutation(
	ctx context.Context,
	client graphql.Client,
	authMechanism AuthMechanism,
) (*loginMutationResponse, error) {
	req := &graphql.Request{
		OpName: "loginMutation",
		Query: `
mutation loginMutation ($authMechanism: AuthMechanism!) {
	login(authMechanism: $authMechanism) {
		__typename
		... on Error {
			__typename
			message
		}
		... on LoginPayload {
			viewer {
				user {
					username
					dbid
				}
			}
		}
	}
}
`,
		Variables: &__loginMutationInput{
			AuthMechanism: authMechanism,
		},
	}
	var err error

	var data loginMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func logoutMutation(
	ctx context.Context,
	client graphql.Client,
) (*logoutMutationResponse, error) {
	req := &graphql.Request{
		OpName: "logoutMutation",
		Query: `
mutation logoutMutation {
	logout {
		viewer {
			user {
				username
				dbid
			}
		}
	}
}
`,
	}
	var err error

	var data logoutMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func removeUserWalletsMutation(
	ctx context.Context,
	client graphql.Client,
	walletIds []persist.DBID,
) (*removeUserWalletsMutationResponse, error) {
	req := &graphql.Request{
		OpName: "removeUserWalletsMutation",
		Query: `
mutation removeUserWalletsMutation ($walletIds: [DBID!]!) {
	removeUserWallets(walletIds: $walletIds) {
		__typename
		... on Error {
			__typename
			message
		}
		... on RemoveUserWalletsPayload {
			viewer {
				user {
					wallets {
						dbid
						chainAddress {
							address
							chain
						}
					}
				}
			}
		}
	}
}
`,
		Variables: &__removeUserWalletsMutationInput{
			WalletIds: walletIds,
		},
	}
	var err error

	var data removeUserWalletsMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func syncTokensMutation(
	ctx context.Context,
	client graphql.Client,
	chains []Chain,
) (*syncTokensMutationResponse, error) {
	req := &graphql.Request{
		OpName: "syncTokensMutation",
		Query: `
mutation syncTokensMutation ($chains: [Chain!]) {
	syncTokens(chains: $chains) {
		__typename
		... on Error {
			__typename
			message
		}
		... on SyncTokensPayload {
			viewer {
				user {
					tokens {
						chain
						dbid
						tokenId
					}
				}
			}
		}
	}
}
`,
		Variables: &__syncTokensMutationInput{
			Chains: chains,
		},
	}
	var err error

	var data syncTokensMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func trendingFeedQuery(
	ctx context.Context,
	client graphql.Client,
	first *int,
) (*trendingFeedQueryResponse, error) {
	req := &graphql.Request{
		OpName: "trendingFeedQuery",
		Query: `
query trendingFeedQuery ($first: Int) {
	trendingFeed(first: $first) {
		edges {
			node {
				__typename
				... on Error {
					__typename
					message
				}
				... on FeedEvent {
					dbid
				}
			}
		}
	}
}
`,
		Variables: &__trendingFeedQueryInput{
			First: first,
		},
	}
	var err error

	var data trendingFeedQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func trendingUsersQuery(
	ctx context.Context,
	client graphql.Client,
	input TrendingUsersInput,
) (*trendingUsersQueryResponse, error) {
	req := &graphql.Request{
		OpName: "trendingUsersQuery",
		Query: `
query trendingUsersQuery ($input: TrendingUsersInput!) {
	trendingUsers(input: $input) {
		__typename
		... on TrendingUsersPayload {
			users {
				dbid
			}
		}
	}
}
`,
		Variables: &__trendingUsersQueryInput{
			Input: input,
		},
	}
	var err error

	var data trendingUsersQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func userByAddressQuery(
	ctx context.Context,
	client graphql.Client,
	input ChainAddressInput,
) (*userByAddressQueryResponse, error) {
	req := &graphql.Request{
		OpName: "userByAddressQuery",
		Query: `
query userByAddressQuery ($input: ChainAddressInput!) {
	userByAddress(chainAddress: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on GalleryUser {
			username
			dbid
		}
	}
}
`,
		Variables: &__userByAddressQueryInput{
			Input: input,
		},
	}
	var err error

	var data userByAddressQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func userByIdQuery(
	ctx context.Context,
	client graphql.Client,
	id persist.DBID,
) (*userByIdQueryResponse, error) {
	req := &graphql.Request{
		OpName: "userByIdQuery",
		Query: `
query userByIdQuery ($id: DBID!) {
	userById(id: $id) {
		__typename
		... on Error {
			__typename
			message
		}
		... on GalleryUser {
			username
			dbid
		}
	}
}
`,
		Variables: &__userByIdQueryInput{
			Id: id,
		},
	}
	var err error

	var data userByIdQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func userByUsernameQuery(
	ctx context.Context,
	client graphql.Client,
	user string,
) (*userByUsernameQueryResponse, error) {
	req := &graphql.Request{
		OpName: "userByUsernameQuery",
		Query: `
query userByUsernameQuery ($user: String!) {
	userByUsername(username: $user) {
		__typename
		... on Error {
			__typename
			message
		}
		... on GalleryUser {
			username
			dbid
		}
	}
}
`,
		Variables: &__userByUsernameQueryInput{
			User: user,
		},
	}
	var err error

	var data userByUsernameQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func viewGalleryMutation(
	ctx context.Context,
	client graphql.Client,
	galleryId persist.DBID,
) (*viewGalleryMutationResponse, error) {
	req := &graphql.Request{
		OpName: "viewGalleryMutation",
		Query: `
mutation viewGalleryMutation ($galleryId: DBID!) {
	viewGallery(galleryId: $galleryId) {
		__typename
		... on Error {
			__typename
			message
		}
		... on ViewGalleryPayload {
			gallery {
				dbid
			}
		}
	}
}
`,
		Variables: &__viewGalleryMutationInput{
			GalleryId: galleryId,
		},
	}
	var err error

	var data viewGalleryMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func viewerQuery(
	ctx context.Context,
	client graphql.Client,
) (*viewerQueryResponse, error) {
	req := &graphql.Request{
		OpName: "viewerQuery",
		Query: `
query viewerQuery {
	viewer {
		__typename
		... on Error {
			__typename
			message
		}
		... on Viewer {
			user {
				username
				dbid
			}
		}
	}
}
`,
	}
	var err error

	var data viewerQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
