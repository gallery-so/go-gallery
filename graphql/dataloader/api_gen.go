// Code generated by github.com/mikeydub/go-gallery/cmd/dataloaders, DO NOT EDIT.

package dataloader

import (
	"context"
	"time"

	"github.com/jackc/pgx/v4"

	"github.com/mikeydub/go-gallery/service/persist"

	"github.com/mikeydub/go-gallery/db/gen/coredb"
)

type Loaders struct {
	CountAdmiresByCommentIDBatch                         *CountAdmiresByCommentIDBatch
	CountAdmiresByFeedEventIDBatch                       *CountAdmiresByFeedEventIDBatch
	CountAdmiresByPostIDBatch                            *CountAdmiresByPostIDBatch
	CountAdmiresByTokenIDBatch                           *CountAdmiresByTokenIDBatch
	CountCommentsByFeedEventIDBatch                      *CountCommentsByFeedEventIDBatch
	CountCommentsByPostIDBatch                           *CountCommentsByPostIDBatch
	CountInteractionsByFeedEventIDBatch                  *CountInteractionsByFeedEventIDBatch
	CountInteractionsByPostIDBatch                       *CountInteractionsByPostIDBatch
	CountRepliesByCommentIDBatch                         *CountRepliesByCommentIDBatch
	GetAdmireByActorIDAndCommentID                       *GetAdmireByActorIDAndCommentID
	GetAdmireByActorIDAndFeedEventID                     *GetAdmireByActorIDAndFeedEventID
	GetAdmireByActorIDAndPostID                          *GetAdmireByActorIDAndPostID
	GetAdmireByActorIDAndTokenID                         *GetAdmireByActorIDAndTokenID
	GetAdmireByAdmireIDBatch                             *GetAdmireByAdmireIDBatch
	GetAdmiresByActorIDBatch                             *GetAdmiresByActorIDBatch
	GetChildContractsByParentIDBatchPaginate             *GetChildContractsByParentIDBatchPaginate
	GetCollectionByIdBatch                               *GetCollectionByIdBatch
	GetCollectionsByGalleryIdBatch                       *GetCollectionsByGalleryIdBatch
	GetCommentByCommentIDBatch                           *GetCommentByCommentIDBatch
	GetCommunitiesByTokenDefinitionID                    *GetCommunitiesByTokenDefinitionID
	GetCommunityByID                                     *GetCommunityByID
	GetCommunityByKey                                    *GetCommunityByKey
	GetContractByChainAddressBatch                       *GetContractByChainAddressBatch
	GetContractsDisplayedByUserIDBatch                   *GetContractsDisplayedByUserIDBatch
	GetCreatedContractsBatchPaginate                     *GetCreatedContractsBatchPaginate
	GetCreatorsByCommunityID                             *GetCreatorsByCommunityID
	GetEventByIdBatch                                    *GetEventByIdBatch
	GetFollowersByUserIdBatch                            *GetFollowersByUserIdBatch
	GetFollowingByUserIdBatch                            *GetFollowingByUserIdBatch
	GetGalleriesByUserIdBatch                            *GetGalleriesByUserIdBatch
	GetGalleryByCollectionIdBatch                        *GetGalleryByCollectionIdBatch
	GetGalleryByIdBatch                                  *GetGalleryByIdBatch
	GetGalleryTokenMediasByGalleryIDBatch                *GetGalleryTokenMediasByGalleryIDBatch
	GetMediaByMediaIdIgnoringStatusBatch                 *GetMediaByMediaIdIgnoringStatusBatch
	GetMembershipByMembershipIdBatch                     *GetMembershipByMembershipIdBatch
	GetMentionsByCommentID                               *GetMentionsByCommentID
	GetMentionsByPostID                                  *GetMentionsByPostID
	GetNewTokensByFeedEventIdBatch                       *GetNewTokensByFeedEventIdBatch
	GetNotificationByIDBatch                             *GetNotificationByIDBatch
	GetOwnersByContractIdBatchPaginate                   *GetOwnersByContractIdBatchPaginate
	GetPostByIdBatch                                     *GetPostByIdBatch
	GetPostsByIdsPaginateBatch                           *GetPostsByIdsPaginateBatch
	GetProfileImageByIdBatch                             *GetProfileImageByIdBatch
	GetSharedContractsBatchPaginate                      *GetSharedContractsBatchPaginate
	GetSharedFollowersBatchPaginate                      *GetSharedFollowersBatchPaginate
	GetTokenByIdBatch                                    *GetTokenByIdBatch
	GetTokenByIdIgnoreDisplayableBatch                   *GetTokenByIdIgnoreDisplayableBatch
	GetTokenByUserTokenIdentifiersBatch                  *GetTokenByUserTokenIdentifiersBatch
	GetTokenByUserTokenIdentifiersIgnoreDisplayableBatch *GetTokenByUserTokenIdentifiersIgnoreDisplayableBatch
	GetTokenDefinitionByIdBatch                          *GetTokenDefinitionByIdBatch
	GetTokensByCollectionIdBatch                         *GetTokensByCollectionIdBatch
	GetTokensByUserIdBatch                               *GetTokensByUserIdBatch
	GetTokensByWalletIdsBatch                            *GetTokensByWalletIdsBatch
	GetUserByAddressAndL1Batch                           *GetUserByAddressAndL1Batch
	GetUserByIdBatch                                     *GetUserByIdBatch
	GetUserByUsernameBatch                               *GetUserByUsernameBatch
	GetUserNotificationsBatch                            *GetUserNotificationsBatch
	GetUsersByPositionPaginateBatch                      *GetUsersByPositionPaginateBatch
	GetUsersByPositionPersonalizedBatch                  *GetUsersByPositionPersonalizedBatch
	GetUsersWithTraitBatch                               *GetUsersWithTraitBatch
	GetVisibleCollectionsByIDsPaginateBatch              *GetVisibleCollectionsByIDsPaginateBatch
	GetWalletByIDBatch                                   *GetWalletByIDBatch
	GetWalletsByUserIDBatch                              *GetWalletsByUserIDBatch
	PaginateAdmiresByCommentIDBatch                      *PaginateAdmiresByCommentIDBatch
	PaginateAdmiresByFeedEventIDBatch                    *PaginateAdmiresByFeedEventIDBatch
	PaginateAdmiresByPostIDBatch                         *PaginateAdmiresByPostIDBatch
	PaginateAdmiresByTokenIDBatch                        *PaginateAdmiresByTokenIDBatch
	PaginateCommentsByFeedEventIDBatch                   *PaginateCommentsByFeedEventIDBatch
	PaginateCommentsByPostIDBatch                        *PaginateCommentsByPostIDBatch
	PaginateHoldersByCommunityID                         *PaginateHoldersByCommunityID
	PaginateInteractionsByFeedEventIDBatch               *PaginateInteractionsByFeedEventIDBatch
	PaginateInteractionsByPostIDBatch                    *PaginateInteractionsByPostIDBatch
	PaginatePostsByCommunityID                           *PaginatePostsByCommunityID
	PaginatePostsByContractID                            *PaginatePostsByContractID
	PaginateRepliesByCommentIDBatch                      *PaginateRepliesByCommentIDBatch
	PaginateTokensByCommunityID                          *PaginateTokensByCommunityID
	GetContractCreatorsByIds                             *GetContractCreatorsByIds
	GetContractsByIDs                                    *GetContractsByIDs
}

func NewLoaders(ctx context.Context, q *coredb.Queries, disableCaching bool, preFetchHook PreFetchHook, postFetchHook PostFetchHook) *Loaders {
	loaders := &Loaders{}

	loaders.CountAdmiresByCommentIDBatch = newCountAdmiresByCommentIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadCountAdmiresByCommentIDBatch(q), preFetchHook, postFetchHook)
	loaders.CountAdmiresByFeedEventIDBatch = newCountAdmiresByFeedEventIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadCountAdmiresByFeedEventIDBatch(q), preFetchHook, postFetchHook)
	loaders.CountAdmiresByPostIDBatch = newCountAdmiresByPostIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadCountAdmiresByPostIDBatch(q), preFetchHook, postFetchHook)
	loaders.CountAdmiresByTokenIDBatch = newCountAdmiresByTokenIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadCountAdmiresByTokenIDBatch(q), preFetchHook, postFetchHook)
	loaders.CountCommentsByFeedEventIDBatch = newCountCommentsByFeedEventIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadCountCommentsByFeedEventIDBatch(q), preFetchHook, postFetchHook)
	loaders.CountCommentsByPostIDBatch = newCountCommentsByPostIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadCountCommentsByPostIDBatch(q), preFetchHook, postFetchHook)
	loaders.CountInteractionsByFeedEventIDBatch = newCountInteractionsByFeedEventIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadCountInteractionsByFeedEventIDBatch(q), preFetchHook, postFetchHook)
	loaders.CountInteractionsByPostIDBatch = newCountInteractionsByPostIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadCountInteractionsByPostIDBatch(q), preFetchHook, postFetchHook)
	loaders.CountRepliesByCommentIDBatch = newCountRepliesByCommentIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadCountRepliesByCommentIDBatch(q), preFetchHook, postFetchHook)
	loaders.GetAdmireByActorIDAndCommentID = newGetAdmireByActorIDAndCommentID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetAdmireByActorIDAndCommentID(q), preFetchHook, postFetchHook)
	loaders.GetAdmireByActorIDAndFeedEventID = newGetAdmireByActorIDAndFeedEventID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetAdmireByActorIDAndFeedEventID(q), preFetchHook, postFetchHook)
	loaders.GetAdmireByActorIDAndPostID = newGetAdmireByActorIDAndPostID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetAdmireByActorIDAndPostID(q), preFetchHook, postFetchHook)
	loaders.GetAdmireByActorIDAndTokenID = newGetAdmireByActorIDAndTokenID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetAdmireByActorIDAndTokenID(q), preFetchHook, postFetchHook)
	loaders.GetAdmireByAdmireIDBatch = newGetAdmireByAdmireIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetAdmireByAdmireIDBatch(q), preFetchHook, postFetchHook)
	loaders.GetAdmiresByActorIDBatch = newGetAdmiresByActorIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetAdmiresByActorIDBatch(q), preFetchHook, postFetchHook)
	loaders.GetChildContractsByParentIDBatchPaginate = newGetChildContractsByParentIDBatchPaginate(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetChildContractsByParentIDBatchPaginate(q), preFetchHook, postFetchHook)
	loaders.GetCollectionByIdBatch = newGetCollectionByIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetCollectionByIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetCollectionsByGalleryIdBatch = newGetCollectionsByGalleryIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetCollectionsByGalleryIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetCommentByCommentIDBatch = newGetCommentByCommentIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetCommentByCommentIDBatch(q), preFetchHook, postFetchHook)
	loaders.GetCommunitiesByTokenDefinitionID = newGetCommunitiesByTokenDefinitionID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetCommunitiesByTokenDefinitionID(q), preFetchHook, postFetchHook)
	loaders.GetCommunityByID = newGetCommunityByID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetCommunityByID(q), preFetchHook, postFetchHook)
	loaders.GetCommunityByKey = newGetCommunityByKey(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetCommunityByKey(q), preFetchHook, postFetchHook)
	loaders.GetContractByChainAddressBatch = newGetContractByChainAddressBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetContractByChainAddressBatch(q), preFetchHook, postFetchHook)
	loaders.GetContractsDisplayedByUserIDBatch = newGetContractsDisplayedByUserIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetContractsDisplayedByUserIDBatch(q), preFetchHook, postFetchHook)
	loaders.GetCreatedContractsBatchPaginate = newGetCreatedContractsBatchPaginate(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetCreatedContractsBatchPaginate(q), preFetchHook, postFetchHook)
	loaders.GetCreatorsByCommunityID = newGetCreatorsByCommunityID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetCreatorsByCommunityID(q), preFetchHook, postFetchHook)
	loaders.GetEventByIdBatch = newGetEventByIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetEventByIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetFollowersByUserIdBatch = newGetFollowersByUserIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetFollowersByUserIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetFollowingByUserIdBatch = newGetFollowingByUserIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetFollowingByUserIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetGalleriesByUserIdBatch = newGetGalleriesByUserIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetGalleriesByUserIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetGalleryByCollectionIdBatch = newGetGalleryByCollectionIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetGalleryByCollectionIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetGalleryByIdBatch = newGetGalleryByIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetGalleryByIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetGalleryTokenMediasByGalleryIDBatch = newGetGalleryTokenMediasByGalleryIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetGalleryTokenMediasByGalleryIDBatch(q), preFetchHook, postFetchHook)
	loaders.GetMediaByMediaIdIgnoringStatusBatch = newGetMediaByMediaIdIgnoringStatusBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetMediaByMediaIdIgnoringStatusBatch(q), preFetchHook, postFetchHook)
	loaders.GetMembershipByMembershipIdBatch = newGetMembershipByMembershipIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetMembershipByMembershipIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetMentionsByCommentID = newGetMentionsByCommentID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetMentionsByCommentID(q), preFetchHook, postFetchHook)
	loaders.GetMentionsByPostID = newGetMentionsByPostID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetMentionsByPostID(q), preFetchHook, postFetchHook)
	loaders.GetNewTokensByFeedEventIdBatch = newGetNewTokensByFeedEventIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetNewTokensByFeedEventIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetNotificationByIDBatch = newGetNotificationByIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetNotificationByIDBatch(q), preFetchHook, postFetchHook)
	loaders.GetOwnersByContractIdBatchPaginate = newGetOwnersByContractIdBatchPaginate(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetOwnersByContractIdBatchPaginate(q), preFetchHook, postFetchHook)
	loaders.GetPostByIdBatch = newGetPostByIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetPostByIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetPostsByIdsPaginateBatch = newGetPostsByIdsPaginateBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetPostsByIdsPaginateBatch(q), preFetchHook, postFetchHook)
	loaders.GetProfileImageByIdBatch = newGetProfileImageByIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetProfileImageByIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetSharedContractsBatchPaginate = newGetSharedContractsBatchPaginate(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetSharedContractsBatchPaginate(q), preFetchHook, postFetchHook)
	loaders.GetSharedFollowersBatchPaginate = newGetSharedFollowersBatchPaginate(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetSharedFollowersBatchPaginate(q), preFetchHook, postFetchHook)
	loaders.GetTokenByIdBatch = newGetTokenByIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetTokenByIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetTokenByIdIgnoreDisplayableBatch = newGetTokenByIdIgnoreDisplayableBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetTokenByIdIgnoreDisplayableBatch(q), preFetchHook, postFetchHook)
	loaders.GetTokenByUserTokenIdentifiersBatch = newGetTokenByUserTokenIdentifiersBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetTokenByUserTokenIdentifiersBatch(q), preFetchHook, postFetchHook)
	loaders.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatch = newGetTokenByUserTokenIdentifiersIgnoreDisplayableBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetTokenByUserTokenIdentifiersIgnoreDisplayableBatch(q), preFetchHook, postFetchHook)
	loaders.GetTokenDefinitionByIdBatch = newGetTokenDefinitionByIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetTokenDefinitionByIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetTokensByCollectionIdBatch = newGetTokensByCollectionIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetTokensByCollectionIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetTokensByUserIdBatch = newGetTokensByUserIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetTokensByUserIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetTokensByWalletIdsBatch = newGetTokensByWalletIdsBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetTokensByWalletIdsBatch(q), preFetchHook, postFetchHook)
	loaders.GetUserByAddressAndL1Batch = newGetUserByAddressAndL1Batch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetUserByAddressAndL1Batch(q), preFetchHook, postFetchHook)
	loaders.GetUserByIdBatch = newGetUserByIdBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetUserByIdBatch(q), preFetchHook, postFetchHook)
	loaders.GetUserByUsernameBatch = newGetUserByUsernameBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetUserByUsernameBatch(q), preFetchHook, postFetchHook)
	loaders.GetUserNotificationsBatch = newGetUserNotificationsBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetUserNotificationsBatch(q), preFetchHook, postFetchHook)
	loaders.GetUsersByPositionPaginateBatch = newGetUsersByPositionPaginateBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetUsersByPositionPaginateBatch(q), preFetchHook, postFetchHook)
	loaders.GetUsersByPositionPersonalizedBatch = newGetUsersByPositionPersonalizedBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetUsersByPositionPersonalizedBatch(q), preFetchHook, postFetchHook)
	loaders.GetUsersWithTraitBatch = newGetUsersWithTraitBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetUsersWithTraitBatch(q), preFetchHook, postFetchHook)
	loaders.GetVisibleCollectionsByIDsPaginateBatch = newGetVisibleCollectionsByIDsPaginateBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetVisibleCollectionsByIDsPaginateBatch(q), preFetchHook, postFetchHook)
	loaders.GetWalletByIDBatch = newGetWalletByIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetWalletByIDBatch(q), preFetchHook, postFetchHook)
	loaders.GetWalletsByUserIDBatch = newGetWalletsByUserIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetWalletsByUserIDBatch(q), preFetchHook, postFetchHook)
	loaders.PaginateAdmiresByCommentIDBatch = newPaginateAdmiresByCommentIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateAdmiresByCommentIDBatch(q), preFetchHook, postFetchHook)
	loaders.PaginateAdmiresByFeedEventIDBatch = newPaginateAdmiresByFeedEventIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateAdmiresByFeedEventIDBatch(q), preFetchHook, postFetchHook)
	loaders.PaginateAdmiresByPostIDBatch = newPaginateAdmiresByPostIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateAdmiresByPostIDBatch(q), preFetchHook, postFetchHook)
	loaders.PaginateAdmiresByTokenIDBatch = newPaginateAdmiresByTokenIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateAdmiresByTokenIDBatch(q), preFetchHook, postFetchHook)
	loaders.PaginateCommentsByFeedEventIDBatch = newPaginateCommentsByFeedEventIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateCommentsByFeedEventIDBatch(q), preFetchHook, postFetchHook)
	loaders.PaginateCommentsByPostIDBatch = newPaginateCommentsByPostIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateCommentsByPostIDBatch(q), preFetchHook, postFetchHook)
	loaders.PaginateHoldersByCommunityID = newPaginateHoldersByCommunityID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateHoldersByCommunityID(q), preFetchHook, postFetchHook)
	loaders.PaginateInteractionsByFeedEventIDBatch = newPaginateInteractionsByFeedEventIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateInteractionsByFeedEventIDBatch(q), preFetchHook, postFetchHook)
	loaders.PaginateInteractionsByPostIDBatch = newPaginateInteractionsByPostIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateInteractionsByPostIDBatch(q), preFetchHook, postFetchHook)
	loaders.PaginatePostsByCommunityID = newPaginatePostsByCommunityID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginatePostsByCommunityID(q), preFetchHook, postFetchHook)
	loaders.PaginatePostsByContractID = newPaginatePostsByContractID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginatePostsByContractID(q), preFetchHook, postFetchHook)
	loaders.PaginateRepliesByCommentIDBatch = newPaginateRepliesByCommentIDBatch(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateRepliesByCommentIDBatch(q), preFetchHook, postFetchHook)
	loaders.PaginateTokensByCommunityID = newPaginateTokensByCommunityID(ctx, 100, time.Duration(2000000), !disableCaching, true, loadPaginateTokensByCommunityID(q), preFetchHook, postFetchHook)
	loaders.GetContractCreatorsByIds = newGetContractCreatorsByIds(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetContractCreatorsByIds(q), preFetchHook, postFetchHook)
	loaders.GetContractsByIDs = newGetContractsByIDs(ctx, 100, time.Duration(2000000), !disableCaching, true, loadGetContractsByIDs(q), preFetchHook, postFetchHook)

	loaders.GetAdmireByActorIDAndCommentID.RegisterResultSubscriber(func(result coredb.Admire) {
		loaders.GetAdmireByAdmireIDBatch.Prime(loaders.GetAdmireByAdmireIDBatch.getKeyForResult(result), result)
	})
	loaders.GetAdmireByActorIDAndFeedEventID.RegisterResultSubscriber(func(result coredb.Admire) {
		loaders.GetAdmireByAdmireIDBatch.Prime(loaders.GetAdmireByAdmireIDBatch.getKeyForResult(result), result)
	})
	loaders.GetAdmireByActorIDAndPostID.RegisterResultSubscriber(func(result coredb.Admire) {
		loaders.GetAdmireByAdmireIDBatch.Prime(loaders.GetAdmireByAdmireIDBatch.getKeyForResult(result), result)
	})
	loaders.GetAdmireByActorIDAndTokenID.RegisterResultSubscriber(func(result coredb.Admire) {
		loaders.GetAdmireByAdmireIDBatch.Prime(loaders.GetAdmireByAdmireIDBatch.getKeyForResult(result), result)
	})
	loaders.GetAdmiresByActorIDBatch.RegisterResultSubscriber(func(result []coredb.Admire) {
		for _, entry := range result {
			loaders.GetAdmireByAdmireIDBatch.Prime(loaders.GetAdmireByAdmireIDBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginateAdmiresByCommentIDBatch.RegisterResultSubscriber(func(result []coredb.Admire) {
		for _, entry := range result {
			loaders.GetAdmireByAdmireIDBatch.Prime(loaders.GetAdmireByAdmireIDBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginateAdmiresByFeedEventIDBatch.RegisterResultSubscriber(func(result []coredb.Admire) {
		for _, entry := range result {
			loaders.GetAdmireByAdmireIDBatch.Prime(loaders.GetAdmireByAdmireIDBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginateAdmiresByPostIDBatch.RegisterResultSubscriber(func(result []coredb.Admire) {
		for _, entry := range result {
			loaders.GetAdmireByAdmireIDBatch.Prime(loaders.GetAdmireByAdmireIDBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginateAdmiresByTokenIDBatch.RegisterResultSubscriber(func(result []coredb.Admire) {
		for _, entry := range result {
			loaders.GetAdmireByAdmireIDBatch.Prime(loaders.GetAdmireByAdmireIDBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetCollectionsByGalleryIdBatch.RegisterResultSubscriber(func(result []coredb.Collection) {
		for _, entry := range result {
			loaders.GetCollectionByIdBatch.Prime(loaders.GetCollectionByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetVisibleCollectionsByIDsPaginateBatch.RegisterResultSubscriber(func(result []coredb.Collection) {
		for _, entry := range result {
			loaders.GetCollectionByIdBatch.Prime(loaders.GetCollectionByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginateCommentsByFeedEventIDBatch.RegisterResultSubscriber(func(result []coredb.Comment) {
		for _, entry := range result {
			loaders.GetCommentByCommentIDBatch.Prime(loaders.GetCommentByCommentIDBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginateCommentsByPostIDBatch.RegisterResultSubscriber(func(result []coredb.Comment) {
		for _, entry := range result {
			loaders.GetCommentByCommentIDBatch.Prime(loaders.GetCommentByCommentIDBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginateRepliesByCommentIDBatch.RegisterResultSubscriber(func(result []coredb.Comment) {
		for _, entry := range result {
			loaders.GetCommentByCommentIDBatch.Prime(loaders.GetCommentByCommentIDBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetCommunitiesByTokenDefinitionID.RegisterResultSubscriber(func(result []coredb.Community) {
		for _, entry := range result {
			loaders.GetCommunityByID.Prime(loaders.GetCommunityByID.getKeyForResult(entry), entry)
		}
	})
	loaders.GetCommunityByKey.RegisterResultSubscriber(func(result coredb.Community) {
		loaders.GetCommunityByID.Prime(loaders.GetCommunityByID.getKeyForResult(result), result)
	})
	loaders.GetChildContractsByParentIDBatchPaginate.RegisterResultSubscriber(func(result []coredb.Contract) {
		for _, entry := range result {
			loaders.GetContractByChainAddressBatch.Prime(loaders.GetContractByChainAddressBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetContractsDisplayedByUserIDBatch.RegisterResultSubscriber(func(result []coredb.Contract) {
		for _, entry := range result {
			loaders.GetContractByChainAddressBatch.Prime(loaders.GetContractByChainAddressBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetCreatedContractsBatchPaginate.RegisterResultSubscriber(func(result []coredb.Contract) {
		for _, entry := range result {
			loaders.GetContractByChainAddressBatch.Prime(loaders.GetContractByChainAddressBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetSharedContractsBatchPaginate.RegisterResultSubscriber(func(result []coredb.GetSharedContractsBatchPaginateRow) {
		for _, entry := range result {
			loaders.GetContractByChainAddressBatch.Prime(loaders.GetContractByChainAddressBatch.getKeyForResult(entry.Contract), entry.Contract)
		}
	})
	loaders.GetTokenByUserTokenIdentifiersBatch.RegisterResultSubscriber(func(result coredb.GetTokenByUserTokenIdentifiersBatchRow) {
		loaders.GetContractByChainAddressBatch.Prime(loaders.GetContractByChainAddressBatch.getKeyForResult(result.Contract), result.Contract)
	})
	loaders.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatch.RegisterResultSubscriber(func(result coredb.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatchRow) {
		loaders.GetContractByChainAddressBatch.Prime(loaders.GetContractByChainAddressBatch.getKeyForResult(result.Contract), result.Contract)
	})
	loaders.GetTokensByUserIdBatch.RegisterResultSubscriber(func(result []coredb.GetTokensByUserIdBatchRow) {
		for _, entry := range result {
			loaders.GetContractByChainAddressBatch.Prime(loaders.GetContractByChainAddressBatch.getKeyForResult(entry.Contract), entry.Contract)
		}
	})
	loaders.PaginateTokensByCommunityID.RegisterResultSubscriber(func(result []coredb.PaginateTokensByCommunityIDRow) {
		for _, entry := range result {
			loaders.GetContractByChainAddressBatch.Prime(loaders.GetContractByChainAddressBatch.getKeyForResult(entry.Contract), entry.Contract)
		}
	})
	loaders.GetContractsByIDs.RegisterResultSubscriber(func(result coredb.Contract) {
		loaders.GetContractByChainAddressBatch.Prime(loaders.GetContractByChainAddressBatch.getKeyForResult(result), result)
	})
	loaders.GetGalleriesByUserIdBatch.RegisterResultSubscriber(func(result []coredb.Gallery) {
		for _, entry := range result {
			loaders.GetGalleryByCollectionIdBatch.Prime(loaders.GetGalleryByCollectionIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetGalleriesByUserIdBatch.RegisterResultSubscriber(func(result []coredb.Gallery) {
		for _, entry := range result {
			for _, key := range loaders.GetGalleryByCollectionIdBatch.getKeysForResult(entry) {
				loaders.GetGalleryByCollectionIdBatch.Prime(key, entry)
			}
		}
	})
	loaders.GetGalleryByIdBatch.RegisterResultSubscriber(func(result coredb.Gallery) {
		loaders.GetGalleryByCollectionIdBatch.Prime(loaders.GetGalleryByCollectionIdBatch.getKeyForResult(result), result)
	})
	loaders.GetGalleryByIdBatch.RegisterResultSubscriber(func(result coredb.Gallery) {
		for _, key := range loaders.GetGalleryByCollectionIdBatch.getKeysForResult(result) {
			loaders.GetGalleryByCollectionIdBatch.Prime(key, result)
		}
	})
	loaders.GetGalleriesByUserIdBatch.RegisterResultSubscriber(func(result []coredb.Gallery) {
		for _, entry := range result {
			loaders.GetGalleryByIdBatch.Prime(loaders.GetGalleryByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetGalleryByCollectionIdBatch.RegisterResultSubscriber(func(result coredb.Gallery) {
		loaders.GetGalleryByIdBatch.Prime(loaders.GetGalleryByIdBatch.getKeyForResult(result), result)
	})
	loaders.GetGalleryTokenMediasByGalleryIDBatch.RegisterResultSubscriber(func(result []coredb.TokenMedia) {
		for _, entry := range result {
			loaders.GetMediaByMediaIdIgnoringStatusBatch.Prime(loaders.GetMediaByMediaIdIgnoringStatusBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetTokenByIdIgnoreDisplayableBatch.RegisterResultSubscriber(func(result coredb.GetTokenByIdIgnoreDisplayableBatchRow) {
		loaders.GetMediaByMediaIdIgnoringStatusBatch.Prime(loaders.GetMediaByMediaIdIgnoringStatusBatch.getKeyForResult(result.TokenMedia), result.TokenMedia)
	})
	loaders.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatch.RegisterResultSubscriber(func(result coredb.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatchRow) {
		loaders.GetMediaByMediaIdIgnoringStatusBatch.Prime(loaders.GetMediaByMediaIdIgnoringStatusBatch.getKeyForResult(result.TokenMedia), result.TokenMedia)
	})
	loaders.GetUserNotificationsBatch.RegisterResultSubscriber(func(result []coredb.Notification) {
		for _, entry := range result {
			loaders.GetNotificationByIDBatch.Prime(loaders.GetNotificationByIDBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetPostsByIdsPaginateBatch.RegisterResultSubscriber(func(result []coredb.Post) {
		for _, entry := range result {
			loaders.GetPostByIdBatch.Prime(loaders.GetPostByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginatePostsByCommunityID.RegisterResultSubscriber(func(result []coredb.Post) {
		for _, entry := range result {
			loaders.GetPostByIdBatch.Prime(loaders.GetPostByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginatePostsByContractID.RegisterResultSubscriber(func(result []coredb.Post) {
		for _, entry := range result {
			loaders.GetPostByIdBatch.Prime(loaders.GetPostByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetTokenByIdBatch.RegisterResultSubscriber(func(result coredb.GetTokenByIdBatchRow) {
		loaders.GetTokenDefinitionByIdBatch.Prime(loaders.GetTokenDefinitionByIdBatch.getKeyForResult(result.TokenDefinition), result.TokenDefinition)
	})
	loaders.GetTokenByIdIgnoreDisplayableBatch.RegisterResultSubscriber(func(result coredb.GetTokenByIdIgnoreDisplayableBatchRow) {
		loaders.GetTokenDefinitionByIdBatch.Prime(loaders.GetTokenDefinitionByIdBatch.getKeyForResult(result.TokenDefinition), result.TokenDefinition)
	})
	loaders.GetTokenByUserTokenIdentifiersBatch.RegisterResultSubscriber(func(result coredb.GetTokenByUserTokenIdentifiersBatchRow) {
		loaders.GetTokenDefinitionByIdBatch.Prime(loaders.GetTokenDefinitionByIdBatch.getKeyForResult(result.TokenDefinition), result.TokenDefinition)
	})
	loaders.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatch.RegisterResultSubscriber(func(result coredb.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatchRow) {
		loaders.GetTokenDefinitionByIdBatch.Prime(loaders.GetTokenDefinitionByIdBatch.getKeyForResult(result.TokenDefinition), result.TokenDefinition)
	})
	loaders.GetTokensByUserIdBatch.RegisterResultSubscriber(func(result []coredb.GetTokensByUserIdBatchRow) {
		for _, entry := range result {
			loaders.GetTokenDefinitionByIdBatch.Prime(loaders.GetTokenDefinitionByIdBatch.getKeyForResult(entry.TokenDefinition), entry.TokenDefinition)
		}
	})
	loaders.PaginateTokensByCommunityID.RegisterResultSubscriber(func(result []coredb.PaginateTokensByCommunityIDRow) {
		for _, entry := range result {
			loaders.GetTokenDefinitionByIdBatch.Prime(loaders.GetTokenDefinitionByIdBatch.getKeyForResult(entry.TokenDefinition), entry.TokenDefinition)
		}
	})
	loaders.GetFollowersByUserIdBatch.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByIdBatch.Prime(loaders.GetUserByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetFollowingByUserIdBatch.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByIdBatch.Prime(loaders.GetUserByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetOwnersByContractIdBatchPaginate.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByIdBatch.Prime(loaders.GetUserByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetSharedFollowersBatchPaginate.RegisterResultSubscriber(func(result []coredb.GetSharedFollowersBatchPaginateRow) {
		for _, entry := range result {
			loaders.GetUserByIdBatch.Prime(loaders.GetUserByIdBatch.getKeyForResult(entry.User), entry.User)
		}
	})
	loaders.GetUserByAddressAndL1Batch.RegisterResultSubscriber(func(result coredb.User) {
		loaders.GetUserByIdBatch.Prime(loaders.GetUserByIdBatch.getKeyForResult(result), result)
	})
	loaders.GetUserByUsernameBatch.RegisterResultSubscriber(func(result coredb.User) {
		loaders.GetUserByIdBatch.Prime(loaders.GetUserByIdBatch.getKeyForResult(result), result)
	})
	loaders.GetUsersByPositionPaginateBatch.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByIdBatch.Prime(loaders.GetUserByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetUsersByPositionPersonalizedBatch.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByIdBatch.Prime(loaders.GetUserByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetUsersWithTraitBatch.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByIdBatch.Prime(loaders.GetUserByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginateHoldersByCommunityID.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByIdBatch.Prime(loaders.GetUserByIdBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetFollowersByUserIdBatch.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByUsernameBatch.Prime(loaders.GetUserByUsernameBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetFollowingByUserIdBatch.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByUsernameBatch.Prime(loaders.GetUserByUsernameBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetOwnersByContractIdBatchPaginate.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByUsernameBatch.Prime(loaders.GetUserByUsernameBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetSharedFollowersBatchPaginate.RegisterResultSubscriber(func(result []coredb.GetSharedFollowersBatchPaginateRow) {
		for _, entry := range result {
			loaders.GetUserByUsernameBatch.Prime(loaders.GetUserByUsernameBatch.getKeyForResult(entry.User), entry.User)
		}
	})
	loaders.GetUserByAddressAndL1Batch.RegisterResultSubscriber(func(result coredb.User) {
		loaders.GetUserByUsernameBatch.Prime(loaders.GetUserByUsernameBatch.getKeyForResult(result), result)
	})
	loaders.GetUserByIdBatch.RegisterResultSubscriber(func(result coredb.User) {
		loaders.GetUserByUsernameBatch.Prime(loaders.GetUserByUsernameBatch.getKeyForResult(result), result)
	})
	loaders.GetUsersByPositionPaginateBatch.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByUsernameBatch.Prime(loaders.GetUserByUsernameBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetUsersByPositionPersonalizedBatch.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByUsernameBatch.Prime(loaders.GetUserByUsernameBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetUsersWithTraitBatch.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByUsernameBatch.Prime(loaders.GetUserByUsernameBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.PaginateHoldersByCommunityID.RegisterResultSubscriber(func(result []coredb.User) {
		for _, entry := range result {
			loaders.GetUserByUsernameBatch.Prime(loaders.GetUserByUsernameBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetWalletsByUserIDBatch.RegisterResultSubscriber(func(result []coredb.Wallet) {
		for _, entry := range result {
			loaders.GetWalletByIDBatch.Prime(loaders.GetWalletByIDBatch.getKeyForResult(entry), entry)
		}
	})
	loaders.GetChildContractsByParentIDBatchPaginate.RegisterResultSubscriber(func(result []coredb.Contract) {
		for _, entry := range result {
			loaders.GetContractsByIDs.Prime(loaders.GetContractsByIDs.getKeyForResult(entry), entry)
		}
	})
	loaders.GetContractByChainAddressBatch.RegisterResultSubscriber(func(result coredb.Contract) {
		loaders.GetContractsByIDs.Prime(loaders.GetContractsByIDs.getKeyForResult(result), result)
	})
	loaders.GetContractsDisplayedByUserIDBatch.RegisterResultSubscriber(func(result []coredb.Contract) {
		for _, entry := range result {
			loaders.GetContractsByIDs.Prime(loaders.GetContractsByIDs.getKeyForResult(entry), entry)
		}
	})
	loaders.GetCreatedContractsBatchPaginate.RegisterResultSubscriber(func(result []coredb.Contract) {
		for _, entry := range result {
			loaders.GetContractsByIDs.Prime(loaders.GetContractsByIDs.getKeyForResult(entry), entry)
		}
	})
	loaders.GetSharedContractsBatchPaginate.RegisterResultSubscriber(func(result []coredb.GetSharedContractsBatchPaginateRow) {
		for _, entry := range result {
			loaders.GetContractsByIDs.Prime(loaders.GetContractsByIDs.getKeyForResult(entry.Contract), entry.Contract)
		}
	})
	loaders.GetTokenByUserTokenIdentifiersBatch.RegisterResultSubscriber(func(result coredb.GetTokenByUserTokenIdentifiersBatchRow) {
		loaders.GetContractsByIDs.Prime(loaders.GetContractsByIDs.getKeyForResult(result.Contract), result.Contract)
	})
	loaders.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatch.RegisterResultSubscriber(func(result coredb.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatchRow) {
		loaders.GetContractsByIDs.Prime(loaders.GetContractsByIDs.getKeyForResult(result.Contract), result.Contract)
	})
	loaders.GetTokensByUserIdBatch.RegisterResultSubscriber(func(result []coredb.GetTokensByUserIdBatchRow) {
		for _, entry := range result {
			loaders.GetContractsByIDs.Prime(loaders.GetContractsByIDs.getKeyForResult(entry.Contract), entry.Contract)
		}
	})
	loaders.PaginateTokensByCommunityID.RegisterResultSubscriber(func(result []coredb.PaginateTokensByCommunityIDRow) {
		for _, entry := range result {
			loaders.GetContractsByIDs.Prime(loaders.GetContractsByIDs.getKeyForResult(entry.Contract), entry.Contract)
		}
	})

	return loaders
}

func loadCountAdmiresByCommentIDBatch(q *coredb.Queries) func(context.Context, *CountAdmiresByCommentIDBatch, []persist.DBID) ([]int64, []error) {
	return func(ctx context.Context, d *CountAdmiresByCommentIDBatch, params []persist.DBID) ([]int64, []error) {
		results := make([]int64, len(params))
		errors := make([]error, len(params))

		b := q.CountAdmiresByCommentIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r int64, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadCountAdmiresByFeedEventIDBatch(q *coredb.Queries) func(context.Context, *CountAdmiresByFeedEventIDBatch, []persist.DBID) ([]int64, []error) {
	return func(ctx context.Context, d *CountAdmiresByFeedEventIDBatch, params []persist.DBID) ([]int64, []error) {
		results := make([]int64, len(params))
		errors := make([]error, len(params))

		b := q.CountAdmiresByFeedEventIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r int64, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadCountAdmiresByPostIDBatch(q *coredb.Queries) func(context.Context, *CountAdmiresByPostIDBatch, []persist.DBID) ([]int64, []error) {
	return func(ctx context.Context, d *CountAdmiresByPostIDBatch, params []persist.DBID) ([]int64, []error) {
		results := make([]int64, len(params))
		errors := make([]error, len(params))

		b := q.CountAdmiresByPostIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r int64, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadCountAdmiresByTokenIDBatch(q *coredb.Queries) func(context.Context, *CountAdmiresByTokenIDBatch, []persist.DBID) ([]int64, []error) {
	return func(ctx context.Context, d *CountAdmiresByTokenIDBatch, params []persist.DBID) ([]int64, []error) {
		results := make([]int64, len(params))
		errors := make([]error, len(params))

		b := q.CountAdmiresByTokenIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r int64, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadCountCommentsByFeedEventIDBatch(q *coredb.Queries) func(context.Context, *CountCommentsByFeedEventIDBatch, []persist.DBID) ([]int64, []error) {
	return func(ctx context.Context, d *CountCommentsByFeedEventIDBatch, params []persist.DBID) ([]int64, []error) {
		results := make([]int64, len(params))
		errors := make([]error, len(params))

		b := q.CountCommentsByFeedEventIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r int64, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadCountCommentsByPostIDBatch(q *coredb.Queries) func(context.Context, *CountCommentsByPostIDBatch, []persist.DBID) ([]int64, []error) {
	return func(ctx context.Context, d *CountCommentsByPostIDBatch, params []persist.DBID) ([]int64, []error) {
		results := make([]int64, len(params))
		errors := make([]error, len(params))

		b := q.CountCommentsByPostIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r int64, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadCountInteractionsByFeedEventIDBatch(q *coredb.Queries) func(context.Context, *CountInteractionsByFeedEventIDBatch, []coredb.CountInteractionsByFeedEventIDBatchParams) ([][]coredb.CountInteractionsByFeedEventIDBatchRow, []error) {
	return func(ctx context.Context, d *CountInteractionsByFeedEventIDBatch, params []coredb.CountInteractionsByFeedEventIDBatchParams) ([][]coredb.CountInteractionsByFeedEventIDBatchRow, []error) {
		results := make([][]coredb.CountInteractionsByFeedEventIDBatchRow, len(params))
		errors := make([]error, len(params))

		b := q.CountInteractionsByFeedEventIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.CountInteractionsByFeedEventIDBatchRow, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadCountInteractionsByPostIDBatch(q *coredb.Queries) func(context.Context, *CountInteractionsByPostIDBatch, []coredb.CountInteractionsByPostIDBatchParams) ([][]coredb.CountInteractionsByPostIDBatchRow, []error) {
	return func(ctx context.Context, d *CountInteractionsByPostIDBatch, params []coredb.CountInteractionsByPostIDBatchParams) ([][]coredb.CountInteractionsByPostIDBatchRow, []error) {
		results := make([][]coredb.CountInteractionsByPostIDBatchRow, len(params))
		errors := make([]error, len(params))

		b := q.CountInteractionsByPostIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.CountInteractionsByPostIDBatchRow, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadCountRepliesByCommentIDBatch(q *coredb.Queries) func(context.Context, *CountRepliesByCommentIDBatch, []persist.DBID) ([]int64, []error) {
	return func(ctx context.Context, d *CountRepliesByCommentIDBatch, params []persist.DBID) ([]int64, []error) {
		results := make([]int64, len(params))
		errors := make([]error, len(params))

		b := q.CountRepliesByCommentIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r int64, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetAdmireByActorIDAndCommentID(q *coredb.Queries) func(context.Context, *GetAdmireByActorIDAndCommentID, []coredb.GetAdmireByActorIDAndCommentIDParams) ([]coredb.Admire, []error) {
	return func(ctx context.Context, d *GetAdmireByActorIDAndCommentID, params []coredb.GetAdmireByActorIDAndCommentIDParams) ([]coredb.Admire, []error) {
		results := make([]coredb.Admire, len(params))
		errors := make([]error, len(params))

		b := q.GetAdmireByActorIDAndCommentID(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Admire, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetAdmireByActorIDAndFeedEventID(q *coredb.Queries) func(context.Context, *GetAdmireByActorIDAndFeedEventID, []coredb.GetAdmireByActorIDAndFeedEventIDParams) ([]coredb.Admire, []error) {
	return func(ctx context.Context, d *GetAdmireByActorIDAndFeedEventID, params []coredb.GetAdmireByActorIDAndFeedEventIDParams) ([]coredb.Admire, []error) {
		results := make([]coredb.Admire, len(params))
		errors := make([]error, len(params))

		b := q.GetAdmireByActorIDAndFeedEventID(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Admire, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetAdmireByActorIDAndPostID(q *coredb.Queries) func(context.Context, *GetAdmireByActorIDAndPostID, []coredb.GetAdmireByActorIDAndPostIDParams) ([]coredb.Admire, []error) {
	return func(ctx context.Context, d *GetAdmireByActorIDAndPostID, params []coredb.GetAdmireByActorIDAndPostIDParams) ([]coredb.Admire, []error) {
		results := make([]coredb.Admire, len(params))
		errors := make([]error, len(params))

		b := q.GetAdmireByActorIDAndPostID(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Admire, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetAdmireByActorIDAndTokenID(q *coredb.Queries) func(context.Context, *GetAdmireByActorIDAndTokenID, []coredb.GetAdmireByActorIDAndTokenIDParams) ([]coredb.Admire, []error) {
	return func(ctx context.Context, d *GetAdmireByActorIDAndTokenID, params []coredb.GetAdmireByActorIDAndTokenIDParams) ([]coredb.Admire, []error) {
		results := make([]coredb.Admire, len(params))
		errors := make([]error, len(params))

		b := q.GetAdmireByActorIDAndTokenID(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Admire, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetAdmireByAdmireIDBatch(q *coredb.Queries) func(context.Context, *GetAdmireByAdmireIDBatch, []persist.DBID) ([]coredb.Admire, []error) {
	return func(ctx context.Context, d *GetAdmireByAdmireIDBatch, params []persist.DBID) ([]coredb.Admire, []error) {
		results := make([]coredb.Admire, len(params))
		errors := make([]error, len(params))

		b := q.GetAdmireByAdmireIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Admire, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetAdmiresByActorIDBatch(q *coredb.Queries) func(context.Context, *GetAdmiresByActorIDBatch, []persist.DBID) ([][]coredb.Admire, []error) {
	return func(ctx context.Context, d *GetAdmiresByActorIDBatch, params []persist.DBID) ([][]coredb.Admire, []error) {
		results := make([][]coredb.Admire, len(params))
		errors := make([]error, len(params))

		b := q.GetAdmiresByActorIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Admire, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetChildContractsByParentIDBatchPaginate(q *coredb.Queries) func(context.Context, *GetChildContractsByParentIDBatchPaginate, []coredb.GetChildContractsByParentIDBatchPaginateParams) ([][]coredb.Contract, []error) {
	return func(ctx context.Context, d *GetChildContractsByParentIDBatchPaginate, params []coredb.GetChildContractsByParentIDBatchPaginateParams) ([][]coredb.Contract, []error) {
		results := make([][]coredb.Contract, len(params))
		errors := make([]error, len(params))

		b := q.GetChildContractsByParentIDBatchPaginate(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Contract, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetCollectionByIdBatch(q *coredb.Queries) func(context.Context, *GetCollectionByIdBatch, []persist.DBID) ([]coredb.Collection, []error) {
	return func(ctx context.Context, d *GetCollectionByIdBatch, params []persist.DBID) ([]coredb.Collection, []error) {
		results := make([]coredb.Collection, len(params))
		errors := make([]error, len(params))

		b := q.GetCollectionByIdBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Collection, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetCollectionsByGalleryIdBatch(q *coredb.Queries) func(context.Context, *GetCollectionsByGalleryIdBatch, []persist.DBID) ([][]coredb.Collection, []error) {
	return func(ctx context.Context, d *GetCollectionsByGalleryIdBatch, params []persist.DBID) ([][]coredb.Collection, []error) {
		results := make([][]coredb.Collection, len(params))
		errors := make([]error, len(params))

		b := q.GetCollectionsByGalleryIdBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Collection, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetCommentByCommentIDBatch(q *coredb.Queries) func(context.Context, *GetCommentByCommentIDBatch, []persist.DBID) ([]coredb.Comment, []error) {
	return func(ctx context.Context, d *GetCommentByCommentIDBatch, params []persist.DBID) ([]coredb.Comment, []error) {
		results := make([]coredb.Comment, len(params))
		errors := make([]error, len(params))

		b := q.GetCommentByCommentIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Comment, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetCommunitiesByTokenDefinitionID(q *coredb.Queries) func(context.Context, *GetCommunitiesByTokenDefinitionID, []persist.DBID) ([][]coredb.Community, []error) {
	return func(ctx context.Context, d *GetCommunitiesByTokenDefinitionID, params []persist.DBID) ([][]coredb.Community, []error) {
		results := make([][]coredb.Community, len(params))
		errors := make([]error, len(params))

		b := q.GetCommunitiesByTokenDefinitionID(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Community, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetCommunityByID(q *coredb.Queries) func(context.Context, *GetCommunityByID, []persist.DBID) ([]coredb.Community, []error) {
	return func(ctx context.Context, d *GetCommunityByID, params []persist.DBID) ([]coredb.Community, []error) {
		results := make([]coredb.Community, len(params))
		errors := make([]error, len(params))

		b := q.GetCommunityByID(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Community, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetCommunityByKey(q *coredb.Queries) func(context.Context, *GetCommunityByKey, []coredb.GetCommunityByKeyParams) ([]coredb.Community, []error) {
	return func(ctx context.Context, d *GetCommunityByKey, params []coredb.GetCommunityByKeyParams) ([]coredb.Community, []error) {
		results := make([]coredb.Community, len(params))
		errors := make([]error, len(params))

		b := q.GetCommunityByKey(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Community, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetContractByChainAddressBatch(q *coredb.Queries) func(context.Context, *GetContractByChainAddressBatch, []coredb.GetContractByChainAddressBatchParams) ([]coredb.Contract, []error) {
	return func(ctx context.Context, d *GetContractByChainAddressBatch, params []coredb.GetContractByChainAddressBatchParams) ([]coredb.Contract, []error) {
		results := make([]coredb.Contract, len(params))
		errors := make([]error, len(params))

		b := q.GetContractByChainAddressBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Contract, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetContractsDisplayedByUserIDBatch(q *coredb.Queries) func(context.Context, *GetContractsDisplayedByUserIDBatch, []persist.DBID) ([][]coredb.Contract, []error) {
	return func(ctx context.Context, d *GetContractsDisplayedByUserIDBatch, params []persist.DBID) ([][]coredb.Contract, []error) {
		results := make([][]coredb.Contract, len(params))
		errors := make([]error, len(params))

		b := q.GetContractsDisplayedByUserIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Contract, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetCreatedContractsBatchPaginate(q *coredb.Queries) func(context.Context, *GetCreatedContractsBatchPaginate, []coredb.GetCreatedContractsBatchPaginateParams) ([][]coredb.Contract, []error) {
	return func(ctx context.Context, d *GetCreatedContractsBatchPaginate, params []coredb.GetCreatedContractsBatchPaginateParams) ([][]coredb.Contract, []error) {
		results := make([][]coredb.Contract, len(params))
		errors := make([]error, len(params))

		b := q.GetCreatedContractsBatchPaginate(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Contract, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetCreatorsByCommunityID(q *coredb.Queries) func(context.Context, *GetCreatorsByCommunityID, []persist.DBID) ([][]coredb.GetCreatorsByCommunityIDRow, []error) {
	return func(ctx context.Context, d *GetCreatorsByCommunityID, params []persist.DBID) ([][]coredb.GetCreatorsByCommunityIDRow, []error) {
		results := make([][]coredb.GetCreatorsByCommunityIDRow, len(params))
		errors := make([]error, len(params))

		b := q.GetCreatorsByCommunityID(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.GetCreatorsByCommunityIDRow, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetEventByIdBatch(q *coredb.Queries) func(context.Context, *GetEventByIdBatch, []persist.DBID) ([]coredb.FeedEvent, []error) {
	return func(ctx context.Context, d *GetEventByIdBatch, params []persist.DBID) ([]coredb.FeedEvent, []error) {
		results := make([]coredb.FeedEvent, len(params))
		errors := make([]error, len(params))

		b := q.GetEventByIdBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.FeedEvent, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetFollowersByUserIdBatch(q *coredb.Queries) func(context.Context, *GetFollowersByUserIdBatch, []persist.DBID) ([][]coredb.User, []error) {
	return func(ctx context.Context, d *GetFollowersByUserIdBatch, params []persist.DBID) ([][]coredb.User, []error) {
		results := make([][]coredb.User, len(params))
		errors := make([]error, len(params))

		b := q.GetFollowersByUserIdBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.User, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetFollowingByUserIdBatch(q *coredb.Queries) func(context.Context, *GetFollowingByUserIdBatch, []persist.DBID) ([][]coredb.User, []error) {
	return func(ctx context.Context, d *GetFollowingByUserIdBatch, params []persist.DBID) ([][]coredb.User, []error) {
		results := make([][]coredb.User, len(params))
		errors := make([]error, len(params))

		b := q.GetFollowingByUserIdBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.User, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetGalleriesByUserIdBatch(q *coredb.Queries) func(context.Context, *GetGalleriesByUserIdBatch, []persist.DBID) ([][]coredb.Gallery, []error) {
	return func(ctx context.Context, d *GetGalleriesByUserIdBatch, params []persist.DBID) ([][]coredb.Gallery, []error) {
		results := make([][]coredb.Gallery, len(params))
		errors := make([]error, len(params))

		b := q.GetGalleriesByUserIdBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Gallery, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetGalleryByCollectionIdBatch(q *coredb.Queries) func(context.Context, *GetGalleryByCollectionIdBatch, []persist.DBID) ([]coredb.Gallery, []error) {
	return func(ctx context.Context, d *GetGalleryByCollectionIdBatch, params []persist.DBID) ([]coredb.Gallery, []error) {
		results := make([]coredb.Gallery, len(params))
		errors := make([]error, len(params))

		b := q.GetGalleryByCollectionIdBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Gallery, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetGalleryByIdBatch(q *coredb.Queries) func(context.Context, *GetGalleryByIdBatch, []persist.DBID) ([]coredb.Gallery, []error) {
	return func(ctx context.Context, d *GetGalleryByIdBatch, params []persist.DBID) ([]coredb.Gallery, []error) {
		results := make([]coredb.Gallery, len(params))
		errors := make([]error, len(params))

		b := q.GetGalleryByIdBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Gallery, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetGalleryTokenMediasByGalleryIDBatch(q *coredb.Queries) func(context.Context, *GetGalleryTokenMediasByGalleryIDBatch, []persist.DBID) ([][]coredb.TokenMedia, []error) {
	return func(ctx context.Context, d *GetGalleryTokenMediasByGalleryIDBatch, params []persist.DBID) ([][]coredb.TokenMedia, []error) {
		results := make([][]coredb.TokenMedia, len(params))
		errors := make([]error, len(params))

		b := q.GetGalleryTokenMediasByGalleryIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.TokenMedia, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetMediaByMediaIdIgnoringStatusBatch(q *coredb.Queries) func(context.Context, *GetMediaByMediaIdIgnoringStatusBatch, []persist.DBID) ([]coredb.TokenMedia, []error) {
	return func(ctx context.Context, d *GetMediaByMediaIdIgnoringStatusBatch, params []persist.DBID) ([]coredb.TokenMedia, []error) {
		results := make([]coredb.TokenMedia, len(params))
		errors := make([]error, len(params))

		b := q.GetMediaByMediaIdIgnoringStatusBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.TokenMedia, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetMembershipByMembershipIdBatch(q *coredb.Queries) func(context.Context, *GetMembershipByMembershipIdBatch, []persist.DBID) ([]coredb.Membership, []error) {
	return func(ctx context.Context, d *GetMembershipByMembershipIdBatch, params []persist.DBID) ([]coredb.Membership, []error) {
		results := make([]coredb.Membership, len(params))
		errors := make([]error, len(params))

		b := q.GetMembershipByMembershipIdBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Membership, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetMentionsByCommentID(q *coredb.Queries) func(context.Context, *GetMentionsByCommentID, []persist.DBID) ([][]coredb.Mention, []error) {
	return func(ctx context.Context, d *GetMentionsByCommentID, params []persist.DBID) ([][]coredb.Mention, []error) {
		results := make([][]coredb.Mention, len(params))
		errors := make([]error, len(params))

		b := q.GetMentionsByCommentID(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Mention, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetMentionsByPostID(q *coredb.Queries) func(context.Context, *GetMentionsByPostID, []persist.DBID) ([][]coredb.Mention, []error) {
	return func(ctx context.Context, d *GetMentionsByPostID, params []persist.DBID) ([][]coredb.Mention, []error) {
		results := make([][]coredb.Mention, len(params))
		errors := make([]error, len(params))

		b := q.GetMentionsByPostID(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Mention, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetNewTokensByFeedEventIdBatch(q *coredb.Queries) func(context.Context, *GetNewTokensByFeedEventIdBatch, []persist.DBID) ([][]coredb.Token, []error) {
	return func(ctx context.Context, d *GetNewTokensByFeedEventIdBatch, params []persist.DBID) ([][]coredb.Token, []error) {
		results := make([][]coredb.Token, len(params))
		errors := make([]error, len(params))

		b := q.GetNewTokensByFeedEventIdBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Token, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetNotificationByIDBatch(q *coredb.Queries) func(context.Context, *GetNotificationByIDBatch, []persist.DBID) ([]coredb.Notification, []error) {
	return func(ctx context.Context, d *GetNotificationByIDBatch, params []persist.DBID) ([]coredb.Notification, []error) {
		results := make([]coredb.Notification, len(params))
		errors := make([]error, len(params))

		b := q.GetNotificationByIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Notification, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetOwnersByContractIdBatchPaginate(q *coredb.Queries) func(context.Context, *GetOwnersByContractIdBatchPaginate, []coredb.GetOwnersByContractIdBatchPaginateParams) ([][]coredb.User, []error) {
	return func(ctx context.Context, d *GetOwnersByContractIdBatchPaginate, params []coredb.GetOwnersByContractIdBatchPaginateParams) ([][]coredb.User, []error) {
		results := make([][]coredb.User, len(params))
		errors := make([]error, len(params))

		b := q.GetOwnersByContractIdBatchPaginate(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.User, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetPostByIdBatch(q *coredb.Queries) func(context.Context, *GetPostByIdBatch, []persist.DBID) ([]coredb.Post, []error) {
	return func(ctx context.Context, d *GetPostByIdBatch, params []persist.DBID) ([]coredb.Post, []error) {
		results := make([]coredb.Post, len(params))
		errors := make([]error, len(params))

		b := q.GetPostByIdBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Post, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetPostsByIdsPaginateBatch(q *coredb.Queries) func(context.Context, *GetPostsByIdsPaginateBatch, []coredb.GetPostsByIdsPaginateBatchParams) ([][]coredb.Post, []error) {
	return func(ctx context.Context, d *GetPostsByIdsPaginateBatch, params []coredb.GetPostsByIdsPaginateBatchParams) ([][]coredb.Post, []error) {
		results := make([][]coredb.Post, len(params))
		errors := make([]error, len(params))

		b := q.GetPostsByIdsPaginateBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Post, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetProfileImageByIdBatch(q *coredb.Queries) func(context.Context, *GetProfileImageByIdBatch, []coredb.GetProfileImageByIdBatchParams) ([]coredb.ProfileImage, []error) {
	return func(ctx context.Context, d *GetProfileImageByIdBatch, params []coredb.GetProfileImageByIdBatchParams) ([]coredb.ProfileImage, []error) {
		results := make([]coredb.ProfileImage, len(params))
		errors := make([]error, len(params))

		b := q.GetProfileImageByIdBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.ProfileImage, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetSharedContractsBatchPaginate(q *coredb.Queries) func(context.Context, *GetSharedContractsBatchPaginate, []coredb.GetSharedContractsBatchPaginateParams) ([][]coredb.GetSharedContractsBatchPaginateRow, []error) {
	return func(ctx context.Context, d *GetSharedContractsBatchPaginate, params []coredb.GetSharedContractsBatchPaginateParams) ([][]coredb.GetSharedContractsBatchPaginateRow, []error) {
		results := make([][]coredb.GetSharedContractsBatchPaginateRow, len(params))
		errors := make([]error, len(params))

		b := q.GetSharedContractsBatchPaginate(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.GetSharedContractsBatchPaginateRow, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetSharedFollowersBatchPaginate(q *coredb.Queries) func(context.Context, *GetSharedFollowersBatchPaginate, []coredb.GetSharedFollowersBatchPaginateParams) ([][]coredb.GetSharedFollowersBatchPaginateRow, []error) {
	return func(ctx context.Context, d *GetSharedFollowersBatchPaginate, params []coredb.GetSharedFollowersBatchPaginateParams) ([][]coredb.GetSharedFollowersBatchPaginateRow, []error) {
		results := make([][]coredb.GetSharedFollowersBatchPaginateRow, len(params))
		errors := make([]error, len(params))

		b := q.GetSharedFollowersBatchPaginate(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.GetSharedFollowersBatchPaginateRow, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetTokenByIdBatch(q *coredb.Queries) func(context.Context, *GetTokenByIdBatch, []persist.DBID) ([]coredb.GetTokenByIdBatchRow, []error) {
	return func(ctx context.Context, d *GetTokenByIdBatch, params []persist.DBID) ([]coredb.GetTokenByIdBatchRow, []error) {
		results := make([]coredb.GetTokenByIdBatchRow, len(params))
		errors := make([]error, len(params))

		b := q.GetTokenByIdBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.GetTokenByIdBatchRow, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetTokenByIdIgnoreDisplayableBatch(q *coredb.Queries) func(context.Context, *GetTokenByIdIgnoreDisplayableBatch, []persist.DBID) ([]coredb.GetTokenByIdIgnoreDisplayableBatchRow, []error) {
	return func(ctx context.Context, d *GetTokenByIdIgnoreDisplayableBatch, params []persist.DBID) ([]coredb.GetTokenByIdIgnoreDisplayableBatchRow, []error) {
		results := make([]coredb.GetTokenByIdIgnoreDisplayableBatchRow, len(params))
		errors := make([]error, len(params))

		b := q.GetTokenByIdIgnoreDisplayableBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.GetTokenByIdIgnoreDisplayableBatchRow, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetTokenByUserTokenIdentifiersBatch(q *coredb.Queries) func(context.Context, *GetTokenByUserTokenIdentifiersBatch, []coredb.GetTokenByUserTokenIdentifiersBatchParams) ([]coredb.GetTokenByUserTokenIdentifiersBatchRow, []error) {
	return func(ctx context.Context, d *GetTokenByUserTokenIdentifiersBatch, params []coredb.GetTokenByUserTokenIdentifiersBatchParams) ([]coredb.GetTokenByUserTokenIdentifiersBatchRow, []error) {
		results := make([]coredb.GetTokenByUserTokenIdentifiersBatchRow, len(params))
		errors := make([]error, len(params))

		b := q.GetTokenByUserTokenIdentifiersBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.GetTokenByUserTokenIdentifiersBatchRow, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetTokenByUserTokenIdentifiersIgnoreDisplayableBatch(q *coredb.Queries) func(context.Context, *GetTokenByUserTokenIdentifiersIgnoreDisplayableBatch, []coredb.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatchParams) ([]coredb.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatchRow, []error) {
	return func(ctx context.Context, d *GetTokenByUserTokenIdentifiersIgnoreDisplayableBatch, params []coredb.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatchParams) ([]coredb.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatchRow, []error) {
		results := make([]coredb.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatchRow, len(params))
		errors := make([]error, len(params))

		b := q.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.GetTokenByUserTokenIdentifiersIgnoreDisplayableBatchRow, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetTokenDefinitionByIdBatch(q *coredb.Queries) func(context.Context, *GetTokenDefinitionByIdBatch, []persist.DBID) ([]coredb.TokenDefinition, []error) {
	return func(ctx context.Context, d *GetTokenDefinitionByIdBatch, params []persist.DBID) ([]coredb.TokenDefinition, []error) {
		results := make([]coredb.TokenDefinition, len(params))
		errors := make([]error, len(params))

		b := q.GetTokenDefinitionByIdBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.TokenDefinition, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetTokensByCollectionIdBatch(q *coredb.Queries) func(context.Context, *GetTokensByCollectionIdBatch, []coredb.GetTokensByCollectionIdBatchParams) ([][]coredb.Token, []error) {
	return func(ctx context.Context, d *GetTokensByCollectionIdBatch, params []coredb.GetTokensByCollectionIdBatchParams) ([][]coredb.Token, []error) {
		results := make([][]coredb.Token, len(params))
		errors := make([]error, len(params))

		b := q.GetTokensByCollectionIdBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Token, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetTokensByUserIdBatch(q *coredb.Queries) func(context.Context, *GetTokensByUserIdBatch, []coredb.GetTokensByUserIdBatchParams) ([][]coredb.GetTokensByUserIdBatchRow, []error) {
	return func(ctx context.Context, d *GetTokensByUserIdBatch, params []coredb.GetTokensByUserIdBatchParams) ([][]coredb.GetTokensByUserIdBatchRow, []error) {
		results := make([][]coredb.GetTokensByUserIdBatchRow, len(params))
		errors := make([]error, len(params))

		b := q.GetTokensByUserIdBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.GetTokensByUserIdBatchRow, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetTokensByWalletIdsBatch(q *coredb.Queries) func(context.Context, *GetTokensByWalletIdsBatch, []persist.DBIDList) ([][]coredb.GetTokensByWalletIdsBatchRow, []error) {
	return func(ctx context.Context, d *GetTokensByWalletIdsBatch, params []persist.DBIDList) ([][]coredb.GetTokensByWalletIdsBatchRow, []error) {
		results := make([][]coredb.GetTokensByWalletIdsBatchRow, len(params))
		errors := make([]error, len(params))

		b := q.GetTokensByWalletIdsBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.GetTokensByWalletIdsBatchRow, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetUserByAddressAndL1Batch(q *coredb.Queries) func(context.Context, *GetUserByAddressAndL1Batch, []coredb.GetUserByAddressAndL1BatchParams) ([]coredb.User, []error) {
	return func(ctx context.Context, d *GetUserByAddressAndL1Batch, params []coredb.GetUserByAddressAndL1BatchParams) ([]coredb.User, []error) {
		results := make([]coredb.User, len(params))
		errors := make([]error, len(params))

		b := q.GetUserByAddressAndL1Batch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.User, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetUserByIdBatch(q *coredb.Queries) func(context.Context, *GetUserByIdBatch, []persist.DBID) ([]coredb.User, []error) {
	return func(ctx context.Context, d *GetUserByIdBatch, params []persist.DBID) ([]coredb.User, []error) {
		results := make([]coredb.User, len(params))
		errors := make([]error, len(params))

		b := q.GetUserByIdBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.User, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetUserByUsernameBatch(q *coredb.Queries) func(context.Context, *GetUserByUsernameBatch, []string) ([]coredb.User, []error) {
	return func(ctx context.Context, d *GetUserByUsernameBatch, params []string) ([]coredb.User, []error) {
		results := make([]coredb.User, len(params))
		errors := make([]error, len(params))

		b := q.GetUserByUsernameBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.User, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetUserNotificationsBatch(q *coredb.Queries) func(context.Context, *GetUserNotificationsBatch, []coredb.GetUserNotificationsBatchParams) ([][]coredb.Notification, []error) {
	return func(ctx context.Context, d *GetUserNotificationsBatch, params []coredb.GetUserNotificationsBatchParams) ([][]coredb.Notification, []error) {
		results := make([][]coredb.Notification, len(params))
		errors := make([]error, len(params))

		b := q.GetUserNotificationsBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Notification, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetUsersByPositionPaginateBatch(q *coredb.Queries) func(context.Context, *GetUsersByPositionPaginateBatch, []coredb.GetUsersByPositionPaginateBatchParams) ([][]coredb.User, []error) {
	return func(ctx context.Context, d *GetUsersByPositionPaginateBatch, params []coredb.GetUsersByPositionPaginateBatchParams) ([][]coredb.User, []error) {
		results := make([][]coredb.User, len(params))
		errors := make([]error, len(params))

		b := q.GetUsersByPositionPaginateBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.User, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetUsersByPositionPersonalizedBatch(q *coredb.Queries) func(context.Context, *GetUsersByPositionPersonalizedBatch, []coredb.GetUsersByPositionPersonalizedBatchParams) ([][]coredb.User, []error) {
	return func(ctx context.Context, d *GetUsersByPositionPersonalizedBatch, params []coredb.GetUsersByPositionPersonalizedBatchParams) ([][]coredb.User, []error) {
		results := make([][]coredb.User, len(params))
		errors := make([]error, len(params))

		b := q.GetUsersByPositionPersonalizedBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.User, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetUsersWithTraitBatch(q *coredb.Queries) func(context.Context, *GetUsersWithTraitBatch, []string) ([][]coredb.User, []error) {
	return func(ctx context.Context, d *GetUsersWithTraitBatch, params []string) ([][]coredb.User, []error) {
		results := make([][]coredb.User, len(params))
		errors := make([]error, len(params))

		b := q.GetUsersWithTraitBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.User, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetVisibleCollectionsByIDsPaginateBatch(q *coredb.Queries) func(context.Context, *GetVisibleCollectionsByIDsPaginateBatch, []coredb.GetVisibleCollectionsByIDsPaginateBatchParams) ([][]coredb.Collection, []error) {
	return func(ctx context.Context, d *GetVisibleCollectionsByIDsPaginateBatch, params []coredb.GetVisibleCollectionsByIDsPaginateBatchParams) ([][]coredb.Collection, []error) {
		results := make([][]coredb.Collection, len(params))
		errors := make([]error, len(params))

		b := q.GetVisibleCollectionsByIDsPaginateBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Collection, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetWalletByIDBatch(q *coredb.Queries) func(context.Context, *GetWalletByIDBatch, []persist.DBID) ([]coredb.Wallet, []error) {
	return func(ctx context.Context, d *GetWalletByIDBatch, params []persist.DBID) ([]coredb.Wallet, []error) {
		results := make([]coredb.Wallet, len(params))
		errors := make([]error, len(params))

		b := q.GetWalletByIDBatch(ctx, params)
		defer b.Close()

		b.QueryRow(func(i int, r coredb.Wallet, err error) {
			results[i], errors[i] = r, err
			if errors[i] == pgx.ErrNoRows {
				errors[i] = d.getNotFoundError(params[i])
			}
		})

		return results, errors
	}
}

func loadGetWalletsByUserIDBatch(q *coredb.Queries) func(context.Context, *GetWalletsByUserIDBatch, []persist.DBID) ([][]coredb.Wallet, []error) {
	return func(ctx context.Context, d *GetWalletsByUserIDBatch, params []persist.DBID) ([][]coredb.Wallet, []error) {
		results := make([][]coredb.Wallet, len(params))
		errors := make([]error, len(params))

		b := q.GetWalletsByUserIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Wallet, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateAdmiresByCommentIDBatch(q *coredb.Queries) func(context.Context, *PaginateAdmiresByCommentIDBatch, []coredb.PaginateAdmiresByCommentIDBatchParams) ([][]coredb.Admire, []error) {
	return func(ctx context.Context, d *PaginateAdmiresByCommentIDBatch, params []coredb.PaginateAdmiresByCommentIDBatchParams) ([][]coredb.Admire, []error) {
		results := make([][]coredb.Admire, len(params))
		errors := make([]error, len(params))

		b := q.PaginateAdmiresByCommentIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Admire, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateAdmiresByFeedEventIDBatch(q *coredb.Queries) func(context.Context, *PaginateAdmiresByFeedEventIDBatch, []coredb.PaginateAdmiresByFeedEventIDBatchParams) ([][]coredb.Admire, []error) {
	return func(ctx context.Context, d *PaginateAdmiresByFeedEventIDBatch, params []coredb.PaginateAdmiresByFeedEventIDBatchParams) ([][]coredb.Admire, []error) {
		results := make([][]coredb.Admire, len(params))
		errors := make([]error, len(params))

		b := q.PaginateAdmiresByFeedEventIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Admire, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateAdmiresByPostIDBatch(q *coredb.Queries) func(context.Context, *PaginateAdmiresByPostIDBatch, []coredb.PaginateAdmiresByPostIDBatchParams) ([][]coredb.Admire, []error) {
	return func(ctx context.Context, d *PaginateAdmiresByPostIDBatch, params []coredb.PaginateAdmiresByPostIDBatchParams) ([][]coredb.Admire, []error) {
		results := make([][]coredb.Admire, len(params))
		errors := make([]error, len(params))

		b := q.PaginateAdmiresByPostIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Admire, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateAdmiresByTokenIDBatch(q *coredb.Queries) func(context.Context, *PaginateAdmiresByTokenIDBatch, []coredb.PaginateAdmiresByTokenIDBatchParams) ([][]coredb.Admire, []error) {
	return func(ctx context.Context, d *PaginateAdmiresByTokenIDBatch, params []coredb.PaginateAdmiresByTokenIDBatchParams) ([][]coredb.Admire, []error) {
		results := make([][]coredb.Admire, len(params))
		errors := make([]error, len(params))

		b := q.PaginateAdmiresByTokenIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Admire, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateCommentsByFeedEventIDBatch(q *coredb.Queries) func(context.Context, *PaginateCommentsByFeedEventIDBatch, []coredb.PaginateCommentsByFeedEventIDBatchParams) ([][]coredb.Comment, []error) {
	return func(ctx context.Context, d *PaginateCommentsByFeedEventIDBatch, params []coredb.PaginateCommentsByFeedEventIDBatchParams) ([][]coredb.Comment, []error) {
		results := make([][]coredb.Comment, len(params))
		errors := make([]error, len(params))

		b := q.PaginateCommentsByFeedEventIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Comment, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateCommentsByPostIDBatch(q *coredb.Queries) func(context.Context, *PaginateCommentsByPostIDBatch, []coredb.PaginateCommentsByPostIDBatchParams) ([][]coredb.Comment, []error) {
	return func(ctx context.Context, d *PaginateCommentsByPostIDBatch, params []coredb.PaginateCommentsByPostIDBatchParams) ([][]coredb.Comment, []error) {
		results := make([][]coredb.Comment, len(params))
		errors := make([]error, len(params))

		b := q.PaginateCommentsByPostIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Comment, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateHoldersByCommunityID(q *coredb.Queries) func(context.Context, *PaginateHoldersByCommunityID, []coredb.PaginateHoldersByCommunityIDParams) ([][]coredb.User, []error) {
	return func(ctx context.Context, d *PaginateHoldersByCommunityID, params []coredb.PaginateHoldersByCommunityIDParams) ([][]coredb.User, []error) {
		results := make([][]coredb.User, len(params))
		errors := make([]error, len(params))

		b := q.PaginateHoldersByCommunityID(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.User, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateInteractionsByFeedEventIDBatch(q *coredb.Queries) func(context.Context, *PaginateInteractionsByFeedEventIDBatch, []coredb.PaginateInteractionsByFeedEventIDBatchParams) ([][]coredb.PaginateInteractionsByFeedEventIDBatchRow, []error) {
	return func(ctx context.Context, d *PaginateInteractionsByFeedEventIDBatch, params []coredb.PaginateInteractionsByFeedEventIDBatchParams) ([][]coredb.PaginateInteractionsByFeedEventIDBatchRow, []error) {
		results := make([][]coredb.PaginateInteractionsByFeedEventIDBatchRow, len(params))
		errors := make([]error, len(params))

		b := q.PaginateInteractionsByFeedEventIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.PaginateInteractionsByFeedEventIDBatchRow, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateInteractionsByPostIDBatch(q *coredb.Queries) func(context.Context, *PaginateInteractionsByPostIDBatch, []coredb.PaginateInteractionsByPostIDBatchParams) ([][]coredb.PaginateInteractionsByPostIDBatchRow, []error) {
	return func(ctx context.Context, d *PaginateInteractionsByPostIDBatch, params []coredb.PaginateInteractionsByPostIDBatchParams) ([][]coredb.PaginateInteractionsByPostIDBatchRow, []error) {
		results := make([][]coredb.PaginateInteractionsByPostIDBatchRow, len(params))
		errors := make([]error, len(params))

		b := q.PaginateInteractionsByPostIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.PaginateInteractionsByPostIDBatchRow, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginatePostsByCommunityID(q *coredb.Queries) func(context.Context, *PaginatePostsByCommunityID, []coredb.PaginatePostsByCommunityIDParams) ([][]coredb.Post, []error) {
	return func(ctx context.Context, d *PaginatePostsByCommunityID, params []coredb.PaginatePostsByCommunityIDParams) ([][]coredb.Post, []error) {
		results := make([][]coredb.Post, len(params))
		errors := make([]error, len(params))

		b := q.PaginatePostsByCommunityID(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Post, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginatePostsByContractID(q *coredb.Queries) func(context.Context, *PaginatePostsByContractID, []coredb.PaginatePostsByContractIDParams) ([][]coredb.Post, []error) {
	return func(ctx context.Context, d *PaginatePostsByContractID, params []coredb.PaginatePostsByContractIDParams) ([][]coredb.Post, []error) {
		results := make([][]coredb.Post, len(params))
		errors := make([]error, len(params))

		b := q.PaginatePostsByContractID(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Post, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateRepliesByCommentIDBatch(q *coredb.Queries) func(context.Context, *PaginateRepliesByCommentIDBatch, []coredb.PaginateRepliesByCommentIDBatchParams) ([][]coredb.Comment, []error) {
	return func(ctx context.Context, d *PaginateRepliesByCommentIDBatch, params []coredb.PaginateRepliesByCommentIDBatchParams) ([][]coredb.Comment, []error) {
		results := make([][]coredb.Comment, len(params))
		errors := make([]error, len(params))

		b := q.PaginateRepliesByCommentIDBatch(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.Comment, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadPaginateTokensByCommunityID(q *coredb.Queries) func(context.Context, *PaginateTokensByCommunityID, []coredb.PaginateTokensByCommunityIDParams) ([][]coredb.PaginateTokensByCommunityIDRow, []error) {
	return func(ctx context.Context, d *PaginateTokensByCommunityID, params []coredb.PaginateTokensByCommunityIDParams) ([][]coredb.PaginateTokensByCommunityIDRow, []error) {
		results := make([][]coredb.PaginateTokensByCommunityIDRow, len(params))
		errors := make([]error, len(params))

		b := q.PaginateTokensByCommunityID(ctx, params)
		defer b.Close()

		b.Query(func(i int, r []coredb.PaginateTokensByCommunityIDRow, err error) {
			results[i], errors[i] = r, err
		})

		return results, errors
	}
}

func loadGetContractCreatorsByIds(q *coredb.Queries) func(context.Context, *GetContractCreatorsByIds, []string) ([]coredb.ContractCreator, []error) {
	return func(ctx context.Context, d *GetContractCreatorsByIds, params []string) ([]coredb.ContractCreator, []error) {
		queryResults, err := q.GetContractCreatorsByIds(ctx, params)

		results := make([]coredb.ContractCreator, len(params))
		errors := make([]error, len(params))

		if err != nil {
			for i := range errors {
				errors[i] = err
			}

			return results, errors
		}

		hasResults := make([]bool, len(params))

		for _, result := range queryResults {
			results[result.BatchKeyIndex-1] = result.ContractCreator
			hasResults[result.BatchKeyIndex-1] = true
		}

		for i, hasResult := range hasResults {
			if !hasResult {
				errors[i] = d.getNotFoundError(params[i])
			}
		}

		return results, errors
	}
}

func loadGetContractsByIDs(q *coredb.Queries) func(context.Context, *GetContractsByIDs, []string) ([]coredb.Contract, []error) {
	return func(ctx context.Context, d *GetContractsByIDs, params []string) ([]coredb.Contract, []error) {
		queryResults, err := q.GetContractsByIDs(ctx, params)

		results := make([]coredb.Contract, len(params))
		errors := make([]error, len(params))

		if err != nil {
			for i := range errors {
				errors[i] = err
			}

			return results, errors
		}

		hasResults := make([]bool, len(params))

		for _, result := range queryResults {
			results[result.BatchKeyIndex-1] = result.Contract
			hasResults[result.BatchKeyIndex-1] = true
		}

		for i, hasResult := range hasResults {
			if !hasResult {
				errors[i] = d.getNotFoundError(params[i])
			}
		}

		return results, errors
	}
}
