// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/mikeydub/go-gallery/service/persist"
)

type AddRolesToUserPayloadOrError interface {
	IsAddRolesToUserPayloadOrError()
}

type AddUserWalletPayloadOrError interface {
	IsAddUserWalletPayloadOrError()
}

type AdminAddWalletPayloadOrError interface {
	IsAdminAddWalletPayloadOrError()
}

type AdmireFeedEventPayloadOrError interface {
	IsAdmireFeedEventPayloadOrError()
}

type AuthorizationError interface {
	IsAuthorizationError()
}

type BanUserFromFeedPayloadOrError interface {
	IsBanUserFromFeedPayloadOrError()
}

type CollectionByIDOrError interface {
	IsCollectionByIDOrError()
}

type CollectionTokenByIDOrError interface {
	IsCollectionTokenByIDOrError()
}

type CommentOnFeedEventPayloadOrError interface {
	IsCommentOnFeedEventPayloadOrError()
}

type CommunityByAddressOrError interface {
	IsCommunityByAddressOrError()
}

type ConnectSocialAccountPayloadOrError interface {
	IsConnectSocialAccountPayloadOrError()
}

type CreateCollectionPayloadOrError interface {
	IsCreateCollectionPayloadOrError()
}

type CreateGalleryPayloadOrError interface {
	IsCreateGalleryPayloadOrError()
}

type CreateUserPayloadOrError interface {
	IsCreateUserPayloadOrError()
}

type DeepRefreshPayloadOrError interface {
	IsDeepRefreshPayloadOrError()
}

type DeleteCollectionPayloadOrError interface {
	IsDeleteCollectionPayloadOrError()
}

type DeleteGalleryPayloadOrError interface {
	IsDeleteGalleryPayloadOrError()
}

type DisconnectSocialAccountPayloadOrError interface {
	IsDisconnectSocialAccountPayloadOrError()
}

type Error interface {
	IsError()
}

type FeedEventByIDOrError interface {
	IsFeedEventByIDOrError()
}

type FeedEventData interface {
	IsFeedEventData()
}

type FeedEventOrError interface {
	IsFeedEventOrError()
}

type FollowAllSocialConnectionsPayloadOrError interface {
	IsFollowAllSocialConnectionsPayloadOrError()
}

type FollowUserPayloadOrError interface {
	IsFollowUserPayloadOrError()
}

type GalleryByIDPayloadOrError interface {
	IsGalleryByIDPayloadOrError()
}

type GalleryUserOrAddress interface {
	IsGalleryUserOrAddress()
}

type GalleryUserOrWallet interface {
	IsGalleryUserOrWallet()
}

type GetAuthNoncePayloadOrError interface {
	IsGetAuthNoncePayloadOrError()
}

type GroupedNotification interface {
	Notification
	Node
	IsGroupedNotification()
}

type Interaction interface {
	IsInteraction()
}

type LoginPayloadOrError interface {
	IsLoginPayloadOrError()
}

type Media interface {
	IsMedia()
}

type MediaSubtype interface {
	IsMediaSubtype()
}

type MerchTokensPayloadOrError interface {
	IsMerchTokensPayloadOrError()
}

type MintPremiumCardToWalletPayloadOrError interface {
	IsMintPremiumCardToWalletPayloadOrError()
}

type MoveCollectionToGalleryPayloadOrError interface {
	IsMoveCollectionToGalleryPayloadOrError()
}

type Node interface {
	IsNode()
}

type Notification interface {
	Node
	IsNotification()
}

type PreverifyEmailPayloadOrError interface {
	IsPreverifyEmailPayloadOrError()
}

type PublishGalleryPayloadOrError interface {
	IsPublishGalleryPayloadOrError()
}

type RedeemMerchPayloadOrError interface {
	IsRedeemMerchPayloadOrError()
}

type RefreshCollectionPayloadOrError interface {
	IsRefreshCollectionPayloadOrError()
}

type RefreshContractPayloadOrError interface {
	IsRefreshContractPayloadOrError()
}

type RefreshTokenPayloadOrError interface {
	IsRefreshTokenPayloadOrError()
}

type RemoveAdmirePayloadOrError interface {
	IsRemoveAdmirePayloadOrError()
}

type RemoveCommentPayloadOrError interface {
	IsRemoveCommentPayloadOrError()
}

type RemoveUserWalletsPayloadOrError interface {
	IsRemoveUserWalletsPayloadOrError()
}

type ResendVerificationEmailPayloadOrError interface {
	IsResendVerificationEmailPayloadOrError()
}

type RevokeRolesFromUserPayloadOrError interface {
	IsRevokeRolesFromUserPayloadOrError()
}

type SearchCommunitiesPayloadOrError interface {
	IsSearchCommunitiesPayloadOrError()
}

type SearchGalleriesPayloadOrError interface {
	IsSearchGalleriesPayloadOrError()
}

type SearchUsersPayloadOrError interface {
	IsSearchUsersPayloadOrError()
}

type SetSpamPreferencePayloadOrError interface {
	IsSetSpamPreferencePayloadOrError()
}

type SocialAccount interface {
	IsSocialAccount()
}

type SocialConnectionsOrError interface {
	IsSocialConnectionsOrError()
}

type SocialQueriesOrError interface {
	IsSocialQueriesOrError()
}

type SyncTokensForUsernamePayloadOrError interface {
	IsSyncTokensForUsernamePayloadOrError()
}

type SyncTokensPayloadOrError interface {
	IsSyncTokensPayloadOrError()
}

type TokenByIDOrError interface {
	IsTokenByIDOrError()
}

type TrendingUsersPayloadOrError interface {
	IsTrendingUsersPayloadOrError()
}

type UnbanUserFromFeedPayloadOrError interface {
	IsUnbanUserFromFeedPayloadOrError()
}

type UnfollowUserPayloadOrError interface {
	IsUnfollowUserPayloadOrError()
}

type UnsubscribeFromEmailTypePayloadOrError interface {
	IsUnsubscribeFromEmailTypePayloadOrError()
}

type UpdateCollectionHiddenPayloadOrError interface {
	IsUpdateCollectionHiddenPayloadOrError()
}

type UpdateCollectionInfoPayloadOrError interface {
	IsUpdateCollectionInfoPayloadOrError()
}

type UpdateCollectionTokensPayloadOrError interface {
	IsUpdateCollectionTokensPayloadOrError()
}

type UpdateEmailNotificationSettingsPayloadOrError interface {
	IsUpdateEmailNotificationSettingsPayloadOrError()
}

type UpdateEmailPayloadOrError interface {
	IsUpdateEmailPayloadOrError()
}

type UpdateFeaturedGalleryPayloadOrError interface {
	IsUpdateFeaturedGalleryPayloadOrError()
}

type UpdateGalleryCollectionsPayloadOrError interface {
	IsUpdateGalleryCollectionsPayloadOrError()
}

type UpdateGalleryHiddenPayloadOrError interface {
	IsUpdateGalleryHiddenPayloadOrError()
}

type UpdateGalleryInfoPayloadOrError interface {
	IsUpdateGalleryInfoPayloadOrError()
}

type UpdateGalleryOrderPayloadOrError interface {
	IsUpdateGalleryOrderPayloadOrError()
}

type UpdateGalleryPayloadOrError interface {
	IsUpdateGalleryPayloadOrError()
}

type UpdatePrimaryWalletPayloadOrError interface {
	IsUpdatePrimaryWalletPayloadOrError()
}

type UpdateSocialAccountDisplayedPayloadOrError interface {
	IsUpdateSocialAccountDisplayedPayloadOrError()
}

type UpdateTokenInfoPayloadOrError interface {
	IsUpdateTokenInfoPayloadOrError()
}

type UpdateUserExperiencePayloadOrError interface {
	IsUpdateUserExperiencePayloadOrError()
}

type UpdateUserInfoPayloadOrError interface {
	IsUpdateUserInfoPayloadOrError()
}

type UploadPersistedQueriesPayloadOrError interface {
	IsUploadPersistedQueriesPayloadOrError()
}

type UserByAddressOrError interface {
	IsUserByAddressOrError()
}

type UserByIDOrError interface {
	IsUserByIDOrError()
}

type UserByUsernameOrError interface {
	IsUserByUsernameOrError()
}

type VerifyEmailPayloadOrError interface {
	IsVerifyEmailPayloadOrError()
}

type ViewGalleryPayloadOrError interface {
	IsViewGalleryPayloadOrError()
}

type ViewerGalleryByIDPayloadOrError interface {
	IsViewerGalleryByIDPayloadOrError()
}

type ViewerOrError interface {
	IsViewerOrError()
}

type AddUserWalletPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (AddUserWalletPayload) IsAddUserWalletPayloadOrError() {}

type AdminAddWalletInput struct {
	Username     string                `json:"username"`
	ChainAddress *persist.ChainAddress `json:"chainAddress"`
	WalletType   persist.WalletType    `json:"walletType"`
}

type AdminAddWalletPayload struct {
	User *GalleryUser `json:"user"`
}

func (AdminAddWalletPayload) IsAdminAddWalletPayloadOrError() {}

type Admire struct {
	Dbid         persist.DBID `json:"dbid"`
	CreationTime *time.Time   `json:"creationTime"`
	LastUpdated  *time.Time   `json:"lastUpdated"`
	Admirer      *GalleryUser `json:"admirer"`
}

func (Admire) IsNode()        {}
func (Admire) IsInteraction() {}

type AdmireFeedEventPayload struct {
	Viewer    *Viewer    `json:"viewer"`
	Admire    *Admire    `json:"admire"`
	FeedEvent *FeedEvent `json:"feedEvent"`
}

func (AdmireFeedEventPayload) IsAdmireFeedEventPayloadOrError() {}

type AudioMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (AudioMedia) IsMediaSubtype() {}
func (AudioMedia) IsMedia()        {}

type AuthMechanism struct {
	Eoa        *EoaAuth        `json:"eoa"`
	GnosisSafe *GnosisSafeAuth `json:"gnosisSafe"`
	Debug      *DebugAuth      `json:"debug"`
	MagicLink  *MagicLinkAuth  `json:"magicLink"`
}

type AuthNonce struct {
	Nonce      *string `json:"nonce"`
	UserExists *bool   `json:"userExists"`
}

func (AuthNonce) IsGetAuthNoncePayloadOrError() {}

type Badge struct {
	Name     *string   `json:"name"`
	ImageURL string    `json:"imageURL"`
	Contract *Contract `json:"contract"`
}

type BanUserFromFeedPayload struct {
	User *GalleryUser `json:"user"`
}

func (BanUserFromFeedPayload) IsBanUserFromFeedPayloadOrError() {}

type ChainTokens struct {
	Chain  *persist.Chain `json:"chain"`
	Tokens []*Token       `json:"tokens"`
}

type ClearAllNotificationsPayload struct {
	Notifications []Notification `json:"notifications"`
}

type Collection struct {
	Dbid           persist.DBID       `json:"dbid"`
	Version        *int               `json:"version"`
	Name           *string            `json:"name"`
	CollectorsNote *string            `json:"collectorsNote"`
	Gallery        *Gallery           `json:"gallery"`
	Layout         *CollectionLayout  `json:"layout"`
	Hidden         *bool              `json:"hidden"`
	Tokens         []*CollectionToken `json:"tokens"`
}

func (Collection) IsNode()                  {}
func (Collection) IsCollectionByIDOrError() {}

type CollectionCreatedFeedEventData struct {
	HelperCollectionCreatedFeedEventDataData
	EventTime         *time.Time         `json:"eventTime"`
	Owner             *GalleryUser       `json:"owner"`
	Action            *persist.Action    `json:"action"`
	Collection        *Collection        `json:"collection"`
	NewTokens         []*CollectionToken `json:"newTokens"`
	NewCollectorsNote *string            `json:"newCollectorsNote"`
}

func (CollectionCreatedFeedEventData) IsFeedEventData() {}

type CollectionLayout struct {
	Sections      []*int                     `json:"sections"`
	SectionLayout []*CollectionSectionLayout `json:"sectionLayout"`
}

type CollectionLayoutInput struct {
	Sections      []int                           `json:"sections"`
	SectionLayout []*CollectionSectionLayoutInput `json:"sectionLayout"`
}

type CollectionSectionLayout struct {
	Columns    *int   `json:"columns"`
	Whitespace []*int `json:"whitespace"`
}

type CollectionSectionLayoutInput struct {
	Columns    int   `json:"columns"`
	Whitespace []int `json:"whitespace"`
}

type CollectionToken struct {
	HelperCollectionTokenData
	Token         *Token                   `json:"token"`
	Collection    *Collection              `json:"collection"`
	TokenSettings *CollectionTokenSettings `json:"tokenSettings"`
}

func (CollectionToken) IsNode()                       {}
func (CollectionToken) IsCollectionTokenByIDOrError() {}

type CollectionTokenSettings struct {
	RenderLive *bool `json:"renderLive"`
}

type CollectionTokenSettingsInput struct {
	TokenID    persist.DBID `json:"tokenId"`
	RenderLive bool         `json:"renderLive"`
}

type CollectionUpdatedFeedEventData struct {
	HelperCollectionUpdatedFeedEventDataData
	EventTime         *time.Time         `json:"eventTime"`
	Owner             *GalleryUser       `json:"owner"`
	Action            *persist.Action    `json:"action"`
	Collection        *Collection        `json:"collection"`
	NewCollectorsNote *string            `json:"newCollectorsNote"`
	NewTokens         []*CollectionToken `json:"newTokens"`
}

func (CollectionUpdatedFeedEventData) IsFeedEventData() {}

type CollectorsNoteAddedToCollectionFeedEventData struct {
	EventTime         *time.Time      `json:"eventTime"`
	Owner             *GalleryUser    `json:"owner"`
	Action            *persist.Action `json:"action"`
	Collection        *Collection     `json:"collection"`
	NewCollectorsNote *string         `json:"newCollectorsNote"`
}

func (CollectorsNoteAddedToCollectionFeedEventData) IsFeedEventData() {}

type CollectorsNoteAddedToTokenFeedEventData struct {
	EventTime         *time.Time       `json:"eventTime"`
	Owner             *GalleryUser     `json:"owner"`
	Action            *persist.Action  `json:"action"`
	Token             *CollectionToken `json:"token"`
	NewCollectorsNote *string          `json:"newCollectorsNote"`
}

func (CollectorsNoteAddedToTokenFeedEventData) IsFeedEventData() {}

type Comment struct {
	Dbid         persist.DBID `json:"dbid"`
	CreationTime *time.Time   `json:"creationTime"`
	LastUpdated  *time.Time   `json:"lastUpdated"`
	ReplyTo      *Comment     `json:"replyTo"`
	Commenter    *GalleryUser `json:"commenter"`
	Comment      *string      `json:"comment"`
}

func (Comment) IsNode()        {}
func (Comment) IsInteraction() {}

type CommentOnFeedEventPayload struct {
	Viewer         *Viewer    `json:"viewer"`
	Comment        *Comment   `json:"comment"`
	ReplyToComment *Comment   `json:"replyToComment"`
	FeedEvent      *FeedEvent `json:"feedEvent"`
}

func (CommentOnFeedEventPayload) IsCommentOnFeedEventPayloadOrError() {}

type CommunitiesConnection struct {
	Edges    []*CommunityEdge `json:"edges"`
	PageInfo *PageInfo        `json:"pageInfo"`
}

type Community struct {
	HelperCommunityData
	Dbid              persist.DBID            `json:"dbid"`
	LastUpdated       *time.Time              `json:"lastUpdated"`
	ContractAddress   *persist.ChainAddress   `json:"contractAddress"`
	CreatorAddress    *persist.ChainAddress   `json:"creatorAddress"`
	Chain             *persist.Chain          `json:"chain"`
	Name              *string                 `json:"name"`
	Description       *string                 `json:"description"`
	PreviewImage      *string                 `json:"previewImage"`
	ProfileImageURL   *string                 `json:"profileImageURL"`
	ProfileBannerURL  *string                 `json:"profileBannerURL"`
	BadgeURL          *string                 `json:"badgeURL"`
	TokensInCommunity *TokensConnection       `json:"tokensInCommunity"`
	Owners            *TokenHoldersConnection `json:"owners"`
}

func (Community) IsNode()                      {}
func (Community) IsCommunityByAddressOrError() {}

type CommunityEdge struct {
	Node   *Community `json:"node"`
	Cursor *string    `json:"cursor"`
}

type CommunitySearchResult struct {
	Community *Community `json:"community"`
}

type ConnectSocialAccountPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (ConnectSocialAccountPayload) IsConnectSocialAccountPayloadOrError() {}

type Contract struct {
	Dbid             persist.DBID          `json:"dbid"`
	LastUpdated      *time.Time            `json:"lastUpdated"`
	ContractAddress  *persist.ChainAddress `json:"contractAddress"`
	CreatorAddress   *persist.ChainAddress `json:"creatorAddress"`
	Chain            *persist.Chain        `json:"chain"`
	Name             *string               `json:"name"`
	ProfileImageURL  *string               `json:"profileImageURL"`
	ProfileBannerURL *string               `json:"profileBannerURL"`
	BadgeURL         *string               `json:"badgeURL"`
}

func (Contract) IsNode() {}

type CreateCollectionInGalleryInput struct {
	Name           string                          `json:"name"`
	CollectorsNote string                          `json:"collectorsNote"`
	Tokens         []persist.DBID                  `json:"tokens"`
	Layout         *CollectionLayoutInput          `json:"layout"`
	TokenSettings  []*CollectionTokenSettingsInput `json:"tokenSettings"`
	Hidden         bool                            `json:"hidden"`
	GivenID        persist.DBID                    `json:"givenID"`
}

type CreateCollectionInput struct {
	GalleryID      persist.DBID                    `json:"galleryId"`
	Name           string                          `json:"name"`
	CollectorsNote string                          `json:"collectorsNote"`
	Tokens         []persist.DBID                  `json:"tokens"`
	Layout         *CollectionLayoutInput          `json:"layout"`
	TokenSettings  []*CollectionTokenSettingsInput `json:"tokenSettings"`
	Caption        *string                         `json:"caption"`
}

type CreateCollectionPayload struct {
	Collection *Collection `json:"collection"`
	FeedEvent  *FeedEvent  `json:"feedEvent"`
}

func (CreateCollectionPayload) IsCreateCollectionPayloadOrError() {}

type CreateGalleryInput struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Position    string  `json:"position"`
}

type CreateGalleryPayload struct {
	Gallery *Gallery `json:"gallery"`
}

func (CreateGalleryPayload) IsCreateGalleryPayloadOrError() {}

type CreateUserInput struct {
	Username           string         `json:"username"`
	Bio                *string        `json:"bio"`
	Email              *persist.Email `json:"email"`
	GalleryName        *string        `json:"galleryName"`
	GalleryDescription *string        `json:"galleryDescription"`
	GalleryPosition    *string        `json:"galleryPosition"`
}

type CreateUserPayload struct {
	UserID    *persist.DBID `json:"userId"`
	GalleryID *persist.DBID `json:"galleryId"`
	Viewer    *Viewer       `json:"viewer"`
}

func (CreateUserPayload) IsCreateUserPayloadOrError() {}

type DebugAuth struct {
	AsUsername     *string                 `json:"asUsername"`
	UserID         *persist.DBID           `json:"userId"`
	ChainAddresses []*persist.ChainAddress `json:"chainAddresses"`
}

type DebugSocialAuth struct {
	Provider persist.SocialProvider `json:"provider"`
	ID       string                 `json:"id"`
	Username string                 `json:"username"`
}

type DeepRefreshInput struct {
	Chain persist.Chain `json:"chain"`
}

type DeepRefreshPayload struct {
	Chain     *persist.Chain `json:"chain"`
	Submitted *bool          `json:"submitted"`
}

func (DeepRefreshPayload) IsDeepRefreshPayloadOrError() {}

type DeleteCollectionPayload struct {
	Gallery *Gallery `json:"gallery"`
}

func (DeleteCollectionPayload) IsDeleteCollectionPayloadOrError() {}

type DeleteGalleryPayload struct {
	DeletedID *DeletedNode `json:"deletedId"`
}

func (DeleteGalleryPayload) IsDeleteGalleryPayloadOrError() {}

type DeletedNode struct {
	Dbid persist.DBID `json:"dbid"`
}

func (DeletedNode) IsNode() {}

type DisconnectSocialAccountPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (DisconnectSocialAccountPayload) IsDisconnectSocialAccountPayloadOrError() {}

type EmailNotificationSettings struct {
	UnsubscribedFromAll           bool `json:"unsubscribedFromAll"`
	UnsubscribedFromNotifications bool `json:"unsubscribedFromNotifications"`
}

type EoaAuth struct {
	ChainPubKey *persist.ChainPubKey `json:"chainPubKey"`
	Nonce       string               `json:"nonce"`
	Signature   string               `json:"signature"`
}

type ErrAddressOwnedByUser struct {
	Message string `json:"message"`
}

func (ErrAddressOwnedByUser) IsAddUserWalletPayloadOrError()  {}
func (ErrAddressOwnedByUser) IsError()                        {}
func (ErrAddressOwnedByUser) IsAdminAddWalletPayloadOrError() {}

type ErrAdmireAlreadyExists struct {
	Message string `json:"message"`
}

func (ErrAdmireAlreadyExists) IsError()                         {}
func (ErrAdmireAlreadyExists) IsAdmireFeedEventPayloadOrError() {}

type ErrAdmireNotFound struct {
	Message string `json:"message"`
}

func (ErrAdmireNotFound) IsError()                      {}
func (ErrAdmireNotFound) IsRemoveAdmirePayloadOrError() {}

type ErrAuthenticationFailed struct {
	Message string `json:"message"`
}

func (ErrAuthenticationFailed) IsAddUserWalletPayloadOrError()      {}
func (ErrAuthenticationFailed) IsError()                            {}
func (ErrAuthenticationFailed) IsLoginPayloadOrError()              {}
func (ErrAuthenticationFailed) IsCreateUserPayloadOrError()         {}
func (ErrAuthenticationFailed) IsFollowUserPayloadOrError()         {}
func (ErrAuthenticationFailed) IsUnfollowUserPayloadOrError()       {}
func (ErrAuthenticationFailed) IsAdmireFeedEventPayloadOrError()    {}
func (ErrAuthenticationFailed) IsRemoveAdmirePayloadOrError()       {}
func (ErrAuthenticationFailed) IsCommentOnFeedEventPayloadOrError() {}
func (ErrAuthenticationFailed) IsRemoveCommentPayloadOrError()      {}
func (ErrAuthenticationFailed) IsViewGalleryPayloadOrError()        {}

type ErrCollectionNotFound struct {
	Message string `json:"message"`
}

func (ErrCollectionNotFound) IsError()                          {}
func (ErrCollectionNotFound) IsCollectionByIDOrError()          {}
func (ErrCollectionNotFound) IsCollectionTokenByIDOrError()     {}
func (ErrCollectionNotFound) IsDeleteCollectionPayloadOrError() {}

type ErrCommentNotFound struct {
	Message string `json:"message"`
}

func (ErrCommentNotFound) IsError()                       {}
func (ErrCommentNotFound) IsRemoveCommentPayloadOrError() {}

type ErrCommunityNotFound struct {
	Message string `json:"message"`
}

func (ErrCommunityNotFound) IsCommunityByAddressOrError() {}
func (ErrCommunityNotFound) IsError()                     {}

type ErrDoesNotOwnRequiredToken struct {
	Message string `json:"message"`
}

func (ErrDoesNotOwnRequiredToken) IsGetAuthNoncePayloadOrError() {}
func (ErrDoesNotOwnRequiredToken) IsAuthorizationError()         {}
func (ErrDoesNotOwnRequiredToken) IsError()                      {}
func (ErrDoesNotOwnRequiredToken) IsLoginPayloadOrError()        {}
func (ErrDoesNotOwnRequiredToken) IsCreateUserPayloadOrError()   {}

type ErrFeedEventNotFound struct {
	Message string `json:"message"`
}

func (ErrFeedEventNotFound) IsError()                            {}
func (ErrFeedEventNotFound) IsFeedEventOrError()                 {}
func (ErrFeedEventNotFound) IsFeedEventByIDOrError()             {}
func (ErrFeedEventNotFound) IsAdmireFeedEventPayloadOrError()    {}
func (ErrFeedEventNotFound) IsRemoveAdmirePayloadOrError()       {}
func (ErrFeedEventNotFound) IsCommentOnFeedEventPayloadOrError() {}
func (ErrFeedEventNotFound) IsRemoveCommentPayloadOrError()      {}

type ErrGalleryNotFound struct {
	Message string `json:"message"`
}

func (ErrGalleryNotFound) IsError()                           {}
func (ErrGalleryNotFound) IsGalleryByIDPayloadOrError()       {}
func (ErrGalleryNotFound) IsViewerGalleryByIDPayloadOrError() {}

type ErrInvalidInput struct {
	Message    string   `json:"message"`
	Parameters []string `json:"parameters"`
	Reasons    []string `json:"reasons"`
}

func (ErrInvalidInput) IsUserByUsernameOrError()                         {}
func (ErrInvalidInput) IsUserByIDOrError()                               {}
func (ErrInvalidInput) IsUserByAddressOrError()                          {}
func (ErrInvalidInput) IsCollectionByIDOrError()                         {}
func (ErrInvalidInput) IsCommunityByAddressOrError()                     {}
func (ErrInvalidInput) IsSocialConnectionsOrError()                      {}
func (ErrInvalidInput) IsMerchTokensPayloadOrError()                     {}
func (ErrInvalidInput) IsSearchUsersPayloadOrError()                     {}
func (ErrInvalidInput) IsSearchGalleriesPayloadOrError()                 {}
func (ErrInvalidInput) IsSearchCommunitiesPayloadOrError()               {}
func (ErrInvalidInput) IsCreateCollectionPayloadOrError()                {}
func (ErrInvalidInput) IsDeleteCollectionPayloadOrError()                {}
func (ErrInvalidInput) IsUpdateCollectionInfoPayloadOrError()            {}
func (ErrInvalidInput) IsUpdateCollectionTokensPayloadOrError()          {}
func (ErrInvalidInput) IsUpdateCollectionHiddenPayloadOrError()          {}
func (ErrInvalidInput) IsUpdateGalleryCollectionsPayloadOrError()        {}
func (ErrInvalidInput) IsUpdateTokenInfoPayloadOrError()                 {}
func (ErrInvalidInput) IsAddUserWalletPayloadOrError()                   {}
func (ErrInvalidInput) IsRemoveUserWalletsPayloadOrError()               {}
func (ErrInvalidInput) IsUpdateUserInfoPayloadOrError()                  {}
func (ErrInvalidInput) IsRefreshTokenPayloadOrError()                    {}
func (ErrInvalidInput) IsRefreshCollectionPayloadOrError()               {}
func (ErrInvalidInput) IsRefreshContractPayloadOrError()                 {}
func (ErrInvalidInput) IsError()                                         {}
func (ErrInvalidInput) IsCreateUserPayloadOrError()                      {}
func (ErrInvalidInput) IsFollowUserPayloadOrError()                      {}
func (ErrInvalidInput) IsUnfollowUserPayloadOrError()                    {}
func (ErrInvalidInput) IsAdmireFeedEventPayloadOrError()                 {}
func (ErrInvalidInput) IsRemoveAdmirePayloadOrError()                    {}
func (ErrInvalidInput) IsCommentOnFeedEventPayloadOrError()              {}
func (ErrInvalidInput) IsRemoveCommentPayloadOrError()                   {}
func (ErrInvalidInput) IsVerifyEmailPayloadOrError()                     {}
func (ErrInvalidInput) IsPreverifyEmailPayloadOrError()                  {}
func (ErrInvalidInput) IsUpdateEmailPayloadOrError()                     {}
func (ErrInvalidInput) IsResendVerificationEmailPayloadOrError()         {}
func (ErrInvalidInput) IsUpdateEmailNotificationSettingsPayloadOrError() {}
func (ErrInvalidInput) IsUnsubscribeFromEmailTypePayloadOrError()        {}
func (ErrInvalidInput) IsRedeemMerchPayloadOrError()                     {}
func (ErrInvalidInput) IsCreateGalleryPayloadOrError()                   {}
func (ErrInvalidInput) IsUpdateGalleryInfoPayloadOrError()               {}
func (ErrInvalidInput) IsUpdateGalleryHiddenPayloadOrError()             {}
func (ErrInvalidInput) IsDeleteGalleryPayloadOrError()                   {}
func (ErrInvalidInput) IsUpdateGalleryOrderPayloadOrError()              {}
func (ErrInvalidInput) IsUpdateFeaturedGalleryPayloadOrError()           {}
func (ErrInvalidInput) IsUpdateGalleryPayloadOrError()                   {}
func (ErrInvalidInput) IsPublishGalleryPayloadOrError()                  {}
func (ErrInvalidInput) IsUpdatePrimaryWalletPayloadOrError()             {}
func (ErrInvalidInput) IsUpdateUserExperiencePayloadOrError()            {}
func (ErrInvalidInput) IsMoveCollectionToGalleryPayloadOrError()         {}
func (ErrInvalidInput) IsConnectSocialAccountPayloadOrError()            {}
func (ErrInvalidInput) IsUpdateSocialAccountDisplayedPayloadOrError()    {}
func (ErrInvalidInput) IsMintPremiumCardToWalletPayloadOrError()         {}
func (ErrInvalidInput) IsDisconnectSocialAccountPayloadOrError()         {}
func (ErrInvalidInput) IsFollowAllSocialConnectionsPayloadOrError()      {}

type ErrInvalidToken struct {
	Message string `json:"message"`
}

func (ErrInvalidToken) IsAuthorizationError() {}
func (ErrInvalidToken) IsError()              {}

type ErrNeedsToReconnectSocial struct {
	SocialAccountType persist.SocialProvider `json:"socialAccountType"`
	Message           string                 `json:"message"`
}

func (ErrNeedsToReconnectSocial) IsSocialQueriesOrError()                       {}
func (ErrNeedsToReconnectSocial) IsError()                                      {}
func (ErrNeedsToReconnectSocial) IsUpdateSocialAccountDisplayedPayloadOrError() {}
func (ErrNeedsToReconnectSocial) IsMintPremiumCardToWalletPayloadOrError()      {}
func (ErrNeedsToReconnectSocial) IsDisconnectSocialAccountPayloadOrError()      {}
func (ErrNeedsToReconnectSocial) IsFollowAllSocialConnectionsPayloadOrError()   {}

type ErrNoCookie struct {
	Message string `json:"message"`
}

func (ErrNoCookie) IsAuthorizationError() {}
func (ErrNoCookie) IsError()              {}

type ErrNotAuthorized struct {
	Message string             `json:"message"`
	Cause   AuthorizationError `json:"cause"`
}

func (ErrNotAuthorized) IsViewerOrError()                              {}
func (ErrNotAuthorized) IsSocialQueriesOrError()                       {}
func (ErrNotAuthorized) IsCreateCollectionPayloadOrError()             {}
func (ErrNotAuthorized) IsDeleteCollectionPayloadOrError()             {}
func (ErrNotAuthorized) IsUpdateCollectionInfoPayloadOrError()         {}
func (ErrNotAuthorized) IsUpdateCollectionTokensPayloadOrError()       {}
func (ErrNotAuthorized) IsUpdateCollectionHiddenPayloadOrError()       {}
func (ErrNotAuthorized) IsUpdateGalleryCollectionsPayloadOrError()     {}
func (ErrNotAuthorized) IsUpdateTokenInfoPayloadOrError()              {}
func (ErrNotAuthorized) IsSetSpamPreferencePayloadOrError()            {}
func (ErrNotAuthorized) IsAddUserWalletPayloadOrError()                {}
func (ErrNotAuthorized) IsRemoveUserWalletsPayloadOrError()            {}
func (ErrNotAuthorized) IsUpdateUserInfoPayloadOrError()               {}
func (ErrNotAuthorized) IsSyncTokensPayloadOrError()                   {}
func (ErrNotAuthorized) IsError()                                      {}
func (ErrNotAuthorized) IsDeepRefreshPayloadOrError()                  {}
func (ErrNotAuthorized) IsAddRolesToUserPayloadOrError()               {}
func (ErrNotAuthorized) IsRevokeRolesFromUserPayloadOrError()          {}
func (ErrNotAuthorized) IsUploadPersistedQueriesPayloadOrError()       {}
func (ErrNotAuthorized) IsSyncTokensForUsernamePayloadOrError()        {}
func (ErrNotAuthorized) IsBanUserFromFeedPayloadOrError()              {}
func (ErrNotAuthorized) IsUnbanUserFromFeedPayloadOrError()            {}
func (ErrNotAuthorized) IsCreateGalleryPayloadOrError()                {}
func (ErrNotAuthorized) IsUpdateGalleryInfoPayloadOrError()            {}
func (ErrNotAuthorized) IsUpdateGalleryHiddenPayloadOrError()          {}
func (ErrNotAuthorized) IsDeleteGalleryPayloadOrError()                {}
func (ErrNotAuthorized) IsUpdateGalleryOrderPayloadOrError()           {}
func (ErrNotAuthorized) IsUpdateFeaturedGalleryPayloadOrError()        {}
func (ErrNotAuthorized) IsUpdateGalleryPayloadOrError()                {}
func (ErrNotAuthorized) IsPublishGalleryPayloadOrError()               {}
func (ErrNotAuthorized) IsUpdatePrimaryWalletPayloadOrError()          {}
func (ErrNotAuthorized) IsAdminAddWalletPayloadOrError()               {}
func (ErrNotAuthorized) IsUpdateUserExperiencePayloadOrError()         {}
func (ErrNotAuthorized) IsMoveCollectionToGalleryPayloadOrError()      {}
func (ErrNotAuthorized) IsConnectSocialAccountPayloadOrError()         {}
func (ErrNotAuthorized) IsUpdateSocialAccountDisplayedPayloadOrError() {}
func (ErrNotAuthorized) IsMintPremiumCardToWalletPayloadOrError()      {}
func (ErrNotAuthorized) IsDisconnectSocialAccountPayloadOrError()      {}
func (ErrNotAuthorized) IsFollowAllSocialConnectionsPayloadOrError()   {}

type ErrSyncFailed struct {
	Message string `json:"message"`
}

func (ErrSyncFailed) IsSyncTokensPayloadOrError()            {}
func (ErrSyncFailed) IsRefreshTokenPayloadOrError()          {}
func (ErrSyncFailed) IsRefreshCollectionPayloadOrError()     {}
func (ErrSyncFailed) IsRefreshContractPayloadOrError()       {}
func (ErrSyncFailed) IsError()                               {}
func (ErrSyncFailed) IsSyncTokensForUsernamePayloadOrError() {}

type ErrTokenNotFound struct {
	Message string `json:"message"`
}

func (ErrTokenNotFound) IsTokenByIDOrError()           {}
func (ErrTokenNotFound) IsError()                      {}
func (ErrTokenNotFound) IsCollectionTokenByIDOrError() {}

type ErrUnknownAction struct {
	Message string `json:"message"`
}

func (ErrUnknownAction) IsError()                {}
func (ErrUnknownAction) IsFeedEventOrError()     {}
func (ErrUnknownAction) IsFeedEventByIDOrError() {}

type ErrUserAlreadyExists struct {
	Message string `json:"message"`
}

func (ErrUserAlreadyExists) IsError()                    {}
func (ErrUserAlreadyExists) IsCreateUserPayloadOrError() {}

type ErrUserNotFound struct {
	Message string `json:"message"`
}

func (ErrUserNotFound) IsUserByUsernameOrError()        {}
func (ErrUserNotFound) IsUserByIDOrError()              {}
func (ErrUserNotFound) IsUserByAddressOrError()         {}
func (ErrUserNotFound) IsError()                        {}
func (ErrUserNotFound) IsLoginPayloadOrError()          {}
func (ErrUserNotFound) IsFollowUserPayloadOrError()     {}
func (ErrUserNotFound) IsUnfollowUserPayloadOrError()   {}
func (ErrUserNotFound) IsAdminAddWalletPayloadOrError() {}

type ErrUsernameNotAvailable struct {
	Message string `json:"message"`
}

func (ErrUsernameNotAvailable) IsUpdateUserInfoPayloadOrError() {}
func (ErrUsernameNotAvailable) IsError()                        {}
func (ErrUsernameNotAvailable) IsCreateUserPayloadOrError()     {}

type FeedConnection struct {
	Edges    []*FeedEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type FeedEdge struct {
	Node   FeedEventOrError `json:"node"`
	Cursor *string          `json:"cursor"`
}

type FeedEvent struct {
	Dbid                  persist.DBID                     `json:"dbid"`
	EventData             FeedEventData                    `json:"eventData"`
	Admires               *FeedEventAdmiresConnection      `json:"admires"`
	Comments              *FeedEventCommentsConnection     `json:"comments"`
	Caption               *string                          `json:"caption"`
	Interactions          *FeedEventInteractionsConnection `json:"interactions"`
	ViewerAdmire          *Admire                          `json:"viewerAdmire"`
	HasViewerAdmiredEvent *bool                            `json:"hasViewerAdmiredEvent"`
}

func (FeedEvent) IsNode()                 {}
func (FeedEvent) IsFeedEventOrError()     {}
func (FeedEvent) IsFeedEventByIDOrError() {}
func (FeedEvent) IsEntity()               {}

type FeedEventAdmireEdge struct {
	Node   *Admire    `json:"node"`
	Event  *FeedEvent `json:"event"`
	Cursor *string    `json:"cursor"`
}

type FeedEventAdmiresConnection struct {
	Edges    []*FeedEventAdmireEdge `json:"edges"`
	PageInfo *PageInfo              `json:"pageInfo"`
}

type FeedEventCommentEdge struct {
	Node   *Comment   `json:"node"`
	Event  *FeedEvent `json:"event"`
	Cursor *string    `json:"cursor"`
}

type FeedEventCommentsConnection struct {
	Edges    []*FeedEventCommentEdge `json:"edges"`
	PageInfo *PageInfo               `json:"pageInfo"`
}

type FeedEventInteractionsConnection struct {
	Edges    []*FeedEventInteractionsEdge `json:"edges"`
	PageInfo *PageInfo                    `json:"pageInfo"`
}

type FeedEventInteractionsEdge struct {
	Node   Interaction `json:"node"`
	Event  *FeedEvent  `json:"event"`
	Cursor *string     `json:"cursor"`
}

type FollowAllSocialConnectionsPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (FollowAllSocialConnectionsPayload) IsFollowAllSocialConnectionsPayloadOrError() {}

type FollowInfo struct {
	User         *GalleryUser `json:"user"`
	FollowedBack *bool        `json:"followedBack"`
}

type FollowUserPayload struct {
	Viewer *Viewer      `json:"viewer"`
	User   *GalleryUser `json:"user"`
}

func (FollowUserPayload) IsFollowUserPayloadOrError() {}

type GIFMedia struct {
	PreviewURLs       *PreviewURLSet   `json:"previewURLs"`
	StaticPreviewURLs *PreviewURLSet   `json:"staticPreviewURLs"`
	MediaURL          *string          `json:"mediaURL"`
	MediaType         *string          `json:"mediaType"`
	ContentRenderURL  *string          `json:"contentRenderURL"`
	Dimensions        *MediaDimensions `json:"dimensions"`
}

func (GIFMedia) IsMediaSubtype() {}
func (GIFMedia) IsMedia()        {}

type Gallery struct {
	Dbid          persist.DBID     `json:"dbid"`
	Name          *string          `json:"name"`
	Description   *string          `json:"description"`
	Position      *string          `json:"position"`
	Hidden        *bool            `json:"hidden"`
	TokenPreviews []*PreviewURLSet `json:"tokenPreviews"`
	Owner         *GalleryUser     `json:"owner"`
	Collections   []*Collection    `json:"collections"`
}

func (Gallery) IsNode()                      {}
func (Gallery) IsGalleryByIDPayloadOrError() {}

type GalleryInfoUpdatedFeedEventData struct {
	EventTime      *time.Time      `json:"eventTime"`
	Owner          *GalleryUser    `json:"owner"`
	NewName        *string         `json:"newName"`
	NewDescription *string         `json:"newDescription"`
	Action         *persist.Action `json:"action"`
}

func (GalleryInfoUpdatedFeedEventData) IsFeedEventData() {}

type GalleryPositionInput struct {
	GalleryID persist.DBID `json:"galleryId"`
	Position  string       `json:"position"`
}

type GallerySearchResult struct {
	Gallery *Gallery `json:"gallery"`
}

type GalleryUpdatedFeedEventData struct {
	HelperGalleryUpdatedFeedEventDataData
	EventTime      *time.Time      `json:"eventTime"`
	Owner          *GalleryUser    `json:"owner"`
	Action         *persist.Action `json:"action"`
	Gallery        *Gallery        `json:"gallery"`
	SubEventDatas  []FeedEventData `json:"subEventDatas"`
	NewName        *string         `json:"newName"`
	NewDescription *string         `json:"newDescription"`
}

func (GalleryUpdatedFeedEventData) IsFeedEventData() {}

type GalleryUser struct {
	HelperGalleryUserData
	Dbid                persist.DBID           `json:"dbid"`
	Username            *string                `json:"username"`
	Bio                 *string                `json:"bio"`
	Traits              *string                `json:"traits"`
	Universal           *bool                  `json:"universal"`
	Roles               []*persist.Role        `json:"roles"`
	SocialAccounts      *SocialAccounts        `json:"socialAccounts"`
	Tokens              []*Token               `json:"tokens"`
	TokensByChain       *ChainTokens           `json:"tokensByChain"`
	Wallets             []*Wallet              `json:"wallets"`
	PrimaryWallet       *Wallet                `json:"primaryWallet"`
	FeaturedGallery     *Gallery               `json:"featuredGallery"`
	Galleries           []*Gallery             `json:"galleries"`
	Badges              []*Badge               `json:"badges"`
	IsAuthenticatedUser *bool                  `json:"isAuthenticatedUser"`
	Followers           []*GalleryUser         `json:"followers"`
	Following           []*GalleryUser         `json:"following"`
	Feed                *FeedConnection        `json:"feed"`
	SharedFollowers     *UsersConnection       `json:"sharedFollowers"`
	SharedCommunities   *CommunitiesConnection `json:"sharedCommunities"`
}

func (GalleryUser) IsNode()                              {}
func (GalleryUser) IsGalleryUserOrWallet()               {}
func (GalleryUser) IsGalleryUserOrAddress()              {}
func (GalleryUser) IsUserByUsernameOrError()             {}
func (GalleryUser) IsUserByIDOrError()                   {}
func (GalleryUser) IsUserByAddressOrError()              {}
func (GalleryUser) IsAddRolesToUserPayloadOrError()      {}
func (GalleryUser) IsRevokeRolesFromUserPayloadOrError() {}

type GltfMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (GltfMedia) IsMediaSubtype() {}
func (GltfMedia) IsMedia()        {}

type GnosisSafeAuth struct {
	Address persist.Address `json:"address"`
	Nonce   string          `json:"nonce"`
}

type GroupNotificationUserEdge struct {
	Node   *GalleryUser `json:"node"`
	Cursor *string      `json:"cursor"`
}

type GroupNotificationUsersConnection struct {
	HelperGroupNotificationUsersConnectionData
	Edges    []*GroupNotificationUserEdge `json:"edges"`
	PageInfo *PageInfo                    `json:"pageInfo"`
}

type HTMLMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (HTMLMedia) IsMediaSubtype() {}
func (HTMLMedia) IsMedia()        {}

type ImageMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (ImageMedia) IsMediaSubtype() {}
func (ImageMedia) IsMedia()        {}

type InvalidMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (InvalidMedia) IsMediaSubtype() {}
func (InvalidMedia) IsMedia()        {}

type JSONMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (JSONMedia) IsMediaSubtype() {}
func (JSONMedia) IsMedia()        {}

type LoginPayload struct {
	UserID *persist.DBID `json:"userId"`
	Viewer *Viewer       `json:"viewer"`
}

func (LoginPayload) IsLoginPayloadOrError() {}

type LogoutPayload struct {
	Viewer *Viewer `json:"viewer"`
}

type MagicLinkAuth struct {
	Token string `json:"token"`
}

type MediaDimensions struct {
	Width       *int     `json:"width"`
	Height      *int     `json:"height"`
	AspectRatio *float64 `json:"aspectRatio"`
}

type MembershipTier struct {
	Dbid     persist.DBID   `json:"dbid"`
	Name     *string        `json:"name"`
	AssetURL *string        `json:"assetUrl"`
	TokenID  *string        `json:"tokenId"`
	Owners   []*TokenHolder `json:"owners"`
}

func (MembershipTier) IsNode() {}

type MerchDiscountCode struct {
	Code    string  `json:"code"`
	TokenID *string `json:"tokenId"`
}

type MerchToken struct {
	TokenID      string    `json:"tokenId"`
	ObjectType   MerchType `json:"objectType"`
	DiscountCode *string   `json:"discountCode"`
	Redeemed     bool      `json:"redeemed"`
}

func (MerchToken) IsNode() {}

type MerchTokensPayload struct {
	Tokens []*MerchToken `json:"tokens"`
}

func (MerchTokensPayload) IsMerchTokensPayloadOrError() {}

type MintPremiumCardToWalletInput struct {
	TokenID         string            `json:"tokenId"`
	WalletAddresses []persist.Address `json:"walletAddresses"`
}

type MintPremiumCardToWalletPayload struct {
	Tx string `json:"tx"`
}

func (MintPremiumCardToWalletPayload) IsMintPremiumCardToWalletPayloadOrError() {}

type MoveCollectionToGalleryInput struct {
	SourceCollectionID persist.DBID `json:"sourceCollectionId"`
	TargetGalleryID    persist.DBID `json:"targetGalleryId"`
}

type MoveCollectionToGalleryPayload struct {
	OldGallery *Gallery `json:"oldGallery"`
	NewGallery *Gallery `json:"newGallery"`
}

func (MoveCollectionToGalleryPayload) IsMoveCollectionToGalleryPayloadOrError() {}

type NotificationEdge struct {
	Node   Notification `json:"node"`
	Cursor *string      `json:"cursor"`
}

type NotificationSettings struct {
	SomeoneFollowedYou           *bool `json:"someoneFollowedYou"`
	SomeoneAdmiredYourUpdate     *bool `json:"someoneAdmiredYourUpdate"`
	SomeoneCommentedOnYourUpdate *bool `json:"someoneCommentedOnYourUpdate"`
	SomeoneViewedYourGallery     *bool `json:"someoneViewedYourGallery"`
}

type NotificationSettingsInput struct {
	SomeoneFollowedYou           *bool `json:"someoneFollowedYou"`
	SomeoneAdmiredYourUpdate     *bool `json:"someoneAdmiredYourUpdate"`
	SomeoneCommentedOnYourUpdate *bool `json:"someoneCommentedOnYourUpdate"`
	SomeoneViewedYourGallery     *bool `json:"someoneViewedYourGallery"`
}

type NotificationsConnection struct {
	HelperNotificationsConnectionData
	Edges       []*NotificationEdge `json:"edges"`
	UnseenCount *int                `json:"unseenCount"`
	PageInfo    *PageInfo           `json:"pageInfo"`
}

type OwnerAtBlock struct {
	Owner       GalleryUserOrAddress `json:"owner"`
	BlockNumber *string              `json:"blockNumber"`
}

type PageInfo struct {
	Total           *int   `json:"total"`
	Size            int    `json:"size"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	HasNextPage     bool   `json:"hasNextPage"`
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
}

type PDFMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (PDFMedia) IsMediaSubtype() {}
func (PDFMedia) IsMedia()        {}

type PreverifyEmailInput struct {
	Email persist.Email `json:"email"`
}

type PreverifyEmailPayload struct {
	Email  persist.Email        `json:"email"`
	Result PreverifyEmailResult `json:"result"`
}

func (PreverifyEmailPayload) IsPreverifyEmailPayloadOrError() {}

type PreviewURLSet struct {
	Raw        *string `json:"raw"`
	Thumbnail  *string `json:"thumbnail"`
	Small      *string `json:"small"`
	Medium     *string `json:"medium"`
	Large      *string `json:"large"`
	SrcSet     *string `json:"srcSet"`
	LiveRender *string `json:"liveRender"`
	Blurhash   *string `json:"blurhash"`
}

type PublishGalleryInput struct {
	GalleryID persist.DBID `json:"galleryId"`
	EditID    string       `json:"editId"`
	Caption   *string      `json:"caption"`
}

type PublishGalleryPayload struct {
	Gallery *Gallery `json:"gallery"`
}

func (PublishGalleryPayload) IsPublishGalleryPayloadOrError() {}

type RedeemMerchInput struct {
	TokenIds   []string              `json:"tokenIds"`
	Address    *persist.ChainAddress `json:"address"`
	WalletType persist.WalletType    `json:"walletType"`
	Signature  string                `json:"signature"`
}

type RedeemMerchPayload struct {
	Tokens []*MerchToken `json:"tokens"`
}

func (RedeemMerchPayload) IsRedeemMerchPayloadOrError() {}

type RefreshCollectionPayload struct {
	Collection *Collection `json:"collection"`
}

func (RefreshCollectionPayload) IsRefreshCollectionPayloadOrError() {}

type RefreshContractPayload struct {
	Contract *Contract `json:"contract"`
}

func (RefreshContractPayload) IsRefreshContractPayloadOrError() {}

type RefreshTokenPayload struct {
	Token *Token `json:"token"`
}

func (RefreshTokenPayload) IsRefreshTokenPayloadOrError() {}

type RemoveAdmirePayload struct {
	Viewer    *Viewer       `json:"viewer"`
	AdmireID  *persist.DBID `json:"admireID"`
	FeedEvent *FeedEvent    `json:"feedEvent"`
}

func (RemoveAdmirePayload) IsRemoveAdmirePayloadOrError() {}

type RemoveCommentPayload struct {
	Viewer    *Viewer    `json:"viewer"`
	FeedEvent *FeedEvent `json:"feedEvent"`
}

func (RemoveCommentPayload) IsRemoveCommentPayloadOrError() {}

type RemoveUserWalletsPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (RemoveUserWalletsPayload) IsRemoveUserWalletsPayloadOrError() {}

type ResendVerificationEmailPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (ResendVerificationEmailPayload) IsResendVerificationEmailPayloadOrError() {}

type SearchCommunitiesPayload struct {
	Results []*CommunitySearchResult `json:"results"`
}

func (SearchCommunitiesPayload) IsSearchCommunitiesPayloadOrError() {}

type SearchGalleriesPayload struct {
	Results []*GallerySearchResult `json:"results"`
}

func (SearchGalleriesPayload) IsSearchGalleriesPayloadOrError() {}

type SearchUsersPayload struct {
	Results []*UserSearchResult `json:"results"`
}

func (SearchUsersPayload) IsSearchUsersPayloadOrError() {}

type SetSpamPreferenceInput struct {
	Tokens []persist.DBID `json:"tokens"`
	IsSpam bool           `json:"isSpam"`
}

type SetSpamPreferencePayload struct {
	Tokens []*Token `json:"tokens"`
}

func (SetSpamPreferencePayload) IsSetSpamPreferencePayloadOrError() {}

type SocialAccounts struct {
	Twitter *TwitterSocialAccount `json:"twitter"`
}

type SocialAuthMechanism struct {
	Twitter *TwitterAuth     `json:"twitter"`
	Debug   *DebugSocialAuth `json:"debug"`
}

type SocialConnection struct {
	HelperSocialConnectionData
	GalleryUser        *GalleryUser           `json:"galleryUser"`
	CurrentlyFollowing bool                   `json:"currentlyFollowing"`
	SocialID           string                 `json:"socialId"`
	SocialType         persist.SocialProvider `json:"socialType"`
	DisplayName        string                 `json:"displayName"`
	SocialUsername     string                 `json:"socialUsername"`
	ProfileImage       string                 `json:"profileImage"`
}

func (SocialConnection) IsNode()                     {}
func (SocialConnection) IsSocialConnectionsOrError() {}

type SocialConnectionsConnection struct {
	Edges    []*SocialConnectionsEdge `json:"edges"`
	PageInfo *PageInfo                `json:"pageInfo"`
}

type SocialConnectionsEdge struct {
	Node   SocialConnectionsOrError `json:"node"`
	Cursor *string                  `json:"cursor"`
}

type SocialQueries struct {
	SocialConnections *SocialConnectionsConnection `json:"socialConnections"`
}

func (SocialQueries) IsSocialQueriesOrError() {}

type SomeoneAdmiredYourFeedEventNotification struct {
	HelperSomeoneAdmiredYourFeedEventNotificationData
	Dbid         persist.DBID                      `json:"dbid"`
	Seen         *bool                             `json:"seen"`
	CreationTime *time.Time                        `json:"creationTime"`
	UpdatedTime  *time.Time                        `json:"updatedTime"`
	Count        *int                              `json:"count"`
	FeedEvent    *FeedEvent                        `json:"feedEvent"`
	Admirers     *GroupNotificationUsersConnection `json:"admirers"`
}

func (SomeoneAdmiredYourFeedEventNotification) IsNotification()        {}
func (SomeoneAdmiredYourFeedEventNotification) IsNode()                {}
func (SomeoneAdmiredYourFeedEventNotification) IsGroupedNotification() {}

type SomeoneCommentedOnYourFeedEventNotification struct {
	HelperSomeoneCommentedOnYourFeedEventNotificationData
	Dbid         persist.DBID `json:"dbid"`
	Seen         *bool        `json:"seen"`
	CreationTime *time.Time   `json:"creationTime"`
	UpdatedTime  *time.Time   `json:"updatedTime"`
	Comment      *Comment     `json:"comment"`
	FeedEvent    *FeedEvent   `json:"feedEvent"`
}

func (SomeoneCommentedOnYourFeedEventNotification) IsNotification() {}
func (SomeoneCommentedOnYourFeedEventNotification) IsNode()         {}

type SomeoneFollowedYouBackNotification struct {
	HelperSomeoneFollowedYouBackNotificationData
	Dbid         persist.DBID                      `json:"dbid"`
	Seen         *bool                             `json:"seen"`
	CreationTime *time.Time                        `json:"creationTime"`
	UpdatedTime  *time.Time                        `json:"updatedTime"`
	Count        *int                              `json:"count"`
	Followers    *GroupNotificationUsersConnection `json:"followers"`
}

func (SomeoneFollowedYouBackNotification) IsNotification()        {}
func (SomeoneFollowedYouBackNotification) IsNode()                {}
func (SomeoneFollowedYouBackNotification) IsGroupedNotification() {}

type SomeoneFollowedYouNotification struct {
	HelperSomeoneFollowedYouNotificationData
	Dbid         persist.DBID                      `json:"dbid"`
	Seen         *bool                             `json:"seen"`
	CreationTime *time.Time                        `json:"creationTime"`
	UpdatedTime  *time.Time                        `json:"updatedTime"`
	Count        *int                              `json:"count"`
	Followers    *GroupNotificationUsersConnection `json:"followers"`
}

func (SomeoneFollowedYouNotification) IsNotification()        {}
func (SomeoneFollowedYouNotification) IsNode()                {}
func (SomeoneFollowedYouNotification) IsGroupedNotification() {}

type SomeoneViewedYourGalleryNotification struct {
	HelperSomeoneViewedYourGalleryNotificationData
	Dbid               persist.DBID                      `json:"dbid"`
	Seen               *bool                             `json:"seen"`
	CreationTime       *time.Time                        `json:"creationTime"`
	UpdatedTime        *time.Time                        `json:"updatedTime"`
	Count              *int                              `json:"count"`
	UserViewers        *GroupNotificationUsersConnection `json:"userViewers"`
	NonUserViewerCount *int                              `json:"nonUserViewerCount"`
	Gallery            *Gallery                          `json:"gallery"`
}

func (SomeoneViewedYourGalleryNotification) IsNotification()        {}
func (SomeoneViewedYourGalleryNotification) IsNode()                {}
func (SomeoneViewedYourGalleryNotification) IsGroupedNotification() {}

type SyncTokensForUsernamePayload struct {
	Message string `json:"message"`
}

func (SyncTokensForUsernamePayload) IsSyncTokensForUsernamePayloadOrError() {}

type SyncTokensPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (SyncTokensPayload) IsSyncTokensPayloadOrError() {}

type SyncingMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (SyncingMedia) IsMediaSubtype() {}
func (SyncingMedia) IsMedia()        {}

type TextMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (TextMedia) IsMediaSubtype() {}
func (TextMedia) IsMedia()        {}

type Token struct {
	Dbid                  persist.DBID          `json:"dbid"`
	CreationTime          *time.Time            `json:"creationTime"`
	LastUpdated           *time.Time            `json:"lastUpdated"`
	CollectorsNote        *string               `json:"collectorsNote"`
	Media                 MediaSubtype          `json:"media"`
	TokenType             *TokenType            `json:"tokenType"`
	Chain                 *persist.Chain        `json:"chain"`
	Name                  *string               `json:"name"`
	Description           *string               `json:"description"`
	TokenID               *string               `json:"tokenId"`
	Quantity              *string               `json:"quantity"`
	Owner                 *GalleryUser          `json:"owner"`
	OwnedByWallets        []*Wallet             `json:"ownedByWallets"`
	OwnershipHistory      []*OwnerAtBlock       `json:"ownershipHistory"`
	TokenMetadata         *string               `json:"tokenMetadata"`
	Contract              *Contract             `json:"contract"`
	ExternalURL           *string               `json:"externalUrl"`
	BlockNumber           *string               `json:"blockNumber"`
	IsSpamByUser          *bool                 `json:"isSpamByUser"`
	IsSpamByProvider      *bool                 `json:"isSpamByProvider"`
	CreatorAddress        *persist.ChainAddress `json:"creatorAddress"`
	OpenseaCollectionName *string               `json:"openseaCollectionName"`
	OpenseaID             *int                  `json:"openseaId"`
}

func (Token) IsNode()             {}
func (Token) IsTokenByIDOrError() {}

type TokenEdge struct {
	Node   *Token  `json:"node"`
	Cursor *string `json:"cursor"`
}

type TokenHolder struct {
	HelperTokenHolderData
	DisplayName   *string      `json:"displayName"`
	Wallets       []*Wallet    `json:"wallets"`
	User          *GalleryUser `json:"user"`
	PreviewTokens []*string    `json:"previewTokens"`
}

type TokenHolderEdge struct {
	Node   *TokenHolder `json:"node"`
	Cursor *string      `json:"cursor"`
}

type TokenHoldersConnection struct {
	Edges    []*TokenHolderEdge `json:"edges"`
	PageInfo *PageInfo          `json:"pageInfo"`
}

type TokensAddedToCollectionFeedEventData struct {
	HelperTokensAddedToCollectionFeedEventDataData
	EventTime  *time.Time         `json:"eventTime"`
	Owner      *GalleryUser       `json:"owner"`
	Collection *Collection        `json:"collection"`
	Action     *persist.Action    `json:"action"`
	NewTokens  []*CollectionToken `json:"newTokens"`
	IsPreFeed  *bool              `json:"isPreFeed"`
}

func (TokensAddedToCollectionFeedEventData) IsFeedEventData() {}

type TokensConnection struct {
	Edges    []*TokenEdge `json:"edges"`
	PageInfo *PageInfo    `json:"pageInfo"`
}

type TrendingUsersInput struct {
	Report Window `json:"report"`
}

type TrendingUsersPayload struct {
	Users []*GalleryUser `json:"users"`
}

func (TrendingUsersPayload) IsTrendingUsersPayloadOrError() {}

type TwitterAuth struct {
	Code string `json:"code"`
}

type TwitterSocialAccount struct {
	Type            persist.SocialProvider `json:"type"`
	SocialID        string                 `json:"social_id"`
	Name            string                 `json:"name"`
	Username        string                 `json:"username"`
	ProfileImageURL string                 `json:"profileImageURL"`
	Display         bool                   `json:"display"`
}

func (TwitterSocialAccount) IsSocialAccount() {}

type UnbanUserFromFeedPayload struct {
	User *GalleryUser `json:"user"`
}

func (UnbanUserFromFeedPayload) IsUnbanUserFromFeedPayloadOrError() {}

type UnfollowUserPayload struct {
	Viewer *Viewer      `json:"viewer"`
	User   *GalleryUser `json:"user"`
}

func (UnfollowUserPayload) IsUnfollowUserPayloadOrError() {}

type UnknownMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (UnknownMedia) IsMediaSubtype() {}
func (UnknownMedia) IsMedia()        {}

type UnsubscribeFromEmailTypeInput struct {
	Type  EmailUnsubscriptionType `json:"type"`
	Token string                  `json:"token"`
}

type UnsubscribeFromEmailTypePayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UnsubscribeFromEmailTypePayload) IsUnsubscribeFromEmailTypePayloadOrError() {}

type UpdateCollectionHiddenInput struct {
	CollectionID persist.DBID `json:"collectionId"`
	Hidden       bool         `json:"hidden"`
}

type UpdateCollectionHiddenPayload struct {
	Collection *Collection `json:"collection"`
}

func (UpdateCollectionHiddenPayload) IsUpdateCollectionHiddenPayloadOrError() {}

type UpdateCollectionInfoInput struct {
	CollectionID   persist.DBID `json:"collectionId"`
	Name           string       `json:"name"`
	CollectorsNote string       `json:"collectorsNote"`
}

type UpdateCollectionInfoPayload struct {
	Collection *Collection `json:"collection"`
}

func (UpdateCollectionInfoPayload) IsUpdateCollectionInfoPayloadOrError() {}

type UpdateCollectionInput struct {
	Dbid           persist.DBID                    `json:"dbid"`
	Name           string                          `json:"name"`
	CollectorsNote string                          `json:"collectorsNote"`
	Tokens         []persist.DBID                  `json:"tokens"`
	Layout         *CollectionLayoutInput          `json:"layout"`
	TokenSettings  []*CollectionTokenSettingsInput `json:"tokenSettings"`
	Hidden         bool                            `json:"hidden"`
}

type UpdateCollectionTokensInput struct {
	CollectionID  persist.DBID                    `json:"collectionId"`
	Tokens        []persist.DBID                  `json:"tokens"`
	Layout        *CollectionLayoutInput          `json:"layout"`
	TokenSettings []*CollectionTokenSettingsInput `json:"tokenSettings"`
	Caption       *string                         `json:"caption"`
}

type UpdateCollectionTokensPayload struct {
	Collection *Collection `json:"collection"`
	FeedEvent  *FeedEvent  `json:"feedEvent"`
}

func (UpdateCollectionTokensPayload) IsUpdateCollectionTokensPayloadOrError() {}

type UpdateEmailInput struct {
	Email persist.Email `json:"email"`
}

type UpdateEmailNotificationSettingsInput struct {
	UnsubscribedFromAll           bool `json:"unsubscribedFromAll"`
	UnsubscribedFromNotifications bool `json:"unsubscribedFromNotifications"`
}

type UpdateEmailNotificationSettingsPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateEmailNotificationSettingsPayload) IsUpdateEmailNotificationSettingsPayloadOrError() {}

type UpdateEmailPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateEmailPayload) IsUpdateEmailPayloadOrError() {}

type UpdateFeaturedGalleryPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateFeaturedGalleryPayload) IsUpdateFeaturedGalleryPayloadOrError() {}

type UpdateGalleryCollectionsInput struct {
	GalleryID   persist.DBID   `json:"galleryId"`
	Collections []persist.DBID `json:"collections"`
}

type UpdateGalleryCollectionsPayload struct {
	Gallery *Gallery `json:"gallery"`
}

func (UpdateGalleryCollectionsPayload) IsUpdateGalleryCollectionsPayloadOrError() {}

type UpdateGalleryHiddenInput struct {
	ID     persist.DBID `json:"id"`
	Hidden bool         `json:"hidden"`
}

type UpdateGalleryHiddenPayload struct {
	Gallery *Gallery `json:"gallery"`
}

func (UpdateGalleryHiddenPayload) IsUpdateGalleryHiddenPayloadOrError() {}

type UpdateGalleryInfoInput struct {
	ID          persist.DBID `json:"id"`
	Name        *string      `json:"name"`
	Description *string      `json:"description"`
}

type UpdateGalleryInfoPayload struct {
	Gallery *Gallery `json:"gallery"`
}

func (UpdateGalleryInfoPayload) IsUpdateGalleryInfoPayloadOrError() {}

type UpdateGalleryInput struct {
	GalleryID          persist.DBID                      `json:"galleryId"`
	Name               *string                           `json:"name"`
	Description        *string                           `json:"description"`
	Caption            *string                           `json:"caption"`
	DeletedCollections []persist.DBID                    `json:"deletedCollections"`
	UpdatedCollections []*UpdateCollectionInput          `json:"updatedCollections"`
	CreatedCollections []*CreateCollectionInGalleryInput `json:"createdCollections"`
	Order              []persist.DBID                    `json:"order"`
	EditID             *string                           `json:"editId"`
}

type UpdateGalleryOrderInput struct {
	Positions []*GalleryPositionInput `json:"positions"`
}

type UpdateGalleryOrderPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateGalleryOrderPayload) IsUpdateGalleryOrderPayloadOrError() {}

type UpdateGalleryPayload struct {
	Gallery *Gallery `json:"gallery"`
}

func (UpdateGalleryPayload) IsUpdateGalleryPayloadOrError() {}

type UpdatePrimaryWalletPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdatePrimaryWalletPayload) IsUpdatePrimaryWalletPayloadOrError() {}

type UpdateSocialAccountDisplayedInput struct {
	Type      persist.SocialProvider `json:"type"`
	Displayed bool                   `json:"displayed"`
}

type UpdateSocialAccountDisplayedPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateSocialAccountDisplayedPayload) IsUpdateSocialAccountDisplayedPayloadOrError() {}

type UpdateTokenInfoInput struct {
	TokenID        persist.DBID  `json:"tokenId"`
	CollectorsNote string        `json:"collectorsNote"`
	CollectionID   *persist.DBID `json:"collectionId"`
}

type UpdateTokenInfoPayload struct {
	Token *Token `json:"token"`
}

func (UpdateTokenInfoPayload) IsUpdateTokenInfoPayloadOrError() {}

type UpdateUserExperienceInput struct {
	ExperienceType UserExperienceType `json:"experienceType"`
	Experienced    bool               `json:"experienced"`
}

type UpdateUserExperiencePayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateUserExperiencePayload) IsUpdateUserExperiencePayloadOrError() {}

type UpdateUserInfoInput struct {
	Username string `json:"username"`
	Bio      string `json:"bio"`
}

type UpdateUserInfoPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateUserInfoPayload) IsUpdateUserInfoPayloadOrError() {}

type UploadPersistedQueriesInput struct {
	PersistedQueries *string `json:"persistedQueries"`
}

type UploadPersistedQueriesPayload struct {
	Message *string `json:"message"`
}

func (UploadPersistedQueriesPayload) IsUploadPersistedQueriesPayloadOrError() {}

type UserCreatedFeedEventData struct {
	EventTime *time.Time      `json:"eventTime"`
	Owner     *GalleryUser    `json:"owner"`
	Action    *persist.Action `json:"action"`
}

func (UserCreatedFeedEventData) IsFeedEventData() {}

type UserEdge struct {
	Node   *GalleryUser `json:"node"`
	Cursor *string      `json:"cursor"`
}

type UserEmail struct {
	Email                     *persist.Email                   `json:"email"`
	VerificationStatus        *persist.EmailVerificationStatus `json:"verificationStatus"`
	EmailNotificationSettings *EmailNotificationSettings       `json:"emailNotificationSettings"`
}

type UserExperience struct {
	Type        UserExperienceType `json:"type"`
	Experienced bool               `json:"experienced"`
}

type UserFollowedUsersFeedEventData struct {
	EventTime *time.Time      `json:"eventTime"`
	Owner     *GalleryUser    `json:"owner"`
	Action    *persist.Action `json:"action"`
	Followed  []*FollowInfo   `json:"followed"`
}

func (UserFollowedUsersFeedEventData) IsFeedEventData() {}

type UserSearchResult struct {
	User *GalleryUser `json:"user"`
}

type UsersConnection struct {
	Edges    []*UserEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type VerifyEmailInput struct {
	Token string `json:"token"`
}

type VerifyEmailPayload struct {
	Email persist.Email `json:"email"`
}

func (VerifyEmailPayload) IsVerifyEmailPayloadOrError() {}

type VideoMedia struct {
	PreviewURLs       *PreviewURLSet   `json:"previewURLs"`
	MediaURL          *string          `json:"mediaURL"`
	MediaType         *string          `json:"mediaType"`
	ContentRenderURLs *VideoURLSet     `json:"contentRenderURLs"`
	Dimensions        *MediaDimensions `json:"dimensions"`
}

func (VideoMedia) IsMediaSubtype() {}
func (VideoMedia) IsMedia()        {}

type VideoURLSet struct {
	Raw    *string `json:"raw"`
	Small  *string `json:"small"`
	Medium *string `json:"medium"`
	Large  *string `json:"large"`
}

type ViewGalleryPayload struct {
	Gallery *Gallery `json:"gallery"`
}

func (ViewGalleryPayload) IsViewGalleryPayloadOrError() {}

type Viewer struct {
	HelperViewerData
	User            *GalleryUser     `json:"user"`
	SocialAccounts  *SocialAccounts  `json:"socialAccounts"`
	ViewerGalleries []*ViewerGallery `json:"viewerGalleries"`
	Feed            *FeedConnection  `json:"feed"`
	Email           *UserEmail       `json:"email"`
	// Returns a list of notifications in reverse chronological order.
	// Seen notifications come after unseen notifications
	Notifications        *NotificationsConnection `json:"notifications"`
	NotificationSettings *NotificationSettings    `json:"notificationSettings"`
	UserExperiences      []*UserExperience        `json:"userExperiences"`
	SuggestedUsers       *UsersConnection         `json:"suggestedUsers"`
}

func (Viewer) IsNode()          {}
func (Viewer) IsViewerOrError() {}

type ViewerGallery struct {
	Gallery *Gallery `json:"gallery"`
}

func (ViewerGallery) IsViewerGalleryByIDPayloadOrError() {}

type Wallet struct {
	Dbid         persist.DBID          `json:"dbid"`
	ChainAddress *persist.ChainAddress `json:"chainAddress"`
	Chain        *persist.Chain        `json:"chain"`
	WalletType   *persist.WalletType   `json:"walletType"`
	Tokens       []*Token              `json:"tokens"`
}

func (Wallet) IsNode()                {}
func (Wallet) IsGalleryUserOrWallet() {}

type EmailUnsubscriptionType string

const (
	EmailUnsubscriptionTypeAll           EmailUnsubscriptionType = "All"
	EmailUnsubscriptionTypeNotifications EmailUnsubscriptionType = "Notifications"
)

var AllEmailUnsubscriptionType = []EmailUnsubscriptionType{
	EmailUnsubscriptionTypeAll,
	EmailUnsubscriptionTypeNotifications,
}

func (e EmailUnsubscriptionType) IsValid() bool {
	switch e {
	case EmailUnsubscriptionTypeAll, EmailUnsubscriptionTypeNotifications:
		return true
	}
	return false
}

func (e EmailUnsubscriptionType) String() string {
	return string(e)
}

func (e *EmailUnsubscriptionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailUnsubscriptionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailUnsubscriptionType", str)
	}
	return nil
}

func (e EmailUnsubscriptionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MerchType string

const (
	MerchTypeTShirt MerchType = "TShirt"
	MerchTypeHat    MerchType = "Hat"
	MerchTypeCard   MerchType = "Card"
)

var AllMerchType = []MerchType{
	MerchTypeTShirt,
	MerchTypeHat,
	MerchTypeCard,
}

func (e MerchType) IsValid() bool {
	switch e {
	case MerchTypeTShirt, MerchTypeHat, MerchTypeCard:
		return true
	}
	return false
}

func (e MerchType) String() string {
	return string(e)
}

func (e *MerchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MerchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MerchType", str)
	}
	return nil
}

func (e MerchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PreverifyEmailResult string

const (
	PreverifyEmailResultInvalid PreverifyEmailResult = "Invalid"
	PreverifyEmailResultRisky   PreverifyEmailResult = "Risky"
	PreverifyEmailResultValid   PreverifyEmailResult = "Valid"
)

var AllPreverifyEmailResult = []PreverifyEmailResult{
	PreverifyEmailResultInvalid,
	PreverifyEmailResultRisky,
	PreverifyEmailResultValid,
}

func (e PreverifyEmailResult) IsValid() bool {
	switch e {
	case PreverifyEmailResultInvalid, PreverifyEmailResultRisky, PreverifyEmailResultValid:
		return true
	}
	return false
}

func (e PreverifyEmailResult) String() string {
	return string(e)
}

func (e *PreverifyEmailResult) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PreverifyEmailResult(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PreverifyEmailResult", str)
	}
	return nil
}

func (e PreverifyEmailResult) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TokenType string

const (
	TokenTypeErc721  TokenType = "ERC721"
	TokenTypeErc1155 TokenType = "ERC1155"
	TokenTypeErc20   TokenType = "ERC20"
)

var AllTokenType = []TokenType{
	TokenTypeErc721,
	TokenTypeErc1155,
	TokenTypeErc20,
}

func (e TokenType) IsValid() bool {
	switch e {
	case TokenTypeErc721, TokenTypeErc1155, TokenTypeErc20:
		return true
	}
	return false
}

func (e TokenType) String() string {
	return string(e)
}

func (e *TokenType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TokenType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TokenType", str)
	}
	return nil
}

func (e TokenType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserExperienceType string

const (
	UserExperienceTypeMultiGalleryAnnouncement          UserExperienceType = "MultiGalleryAnnouncement"
	UserExperienceTypeEmailUpsell                       UserExperienceType = "EmailUpsell"
	UserExperienceTypeMerchStoreUpsell                  UserExperienceType = "MerchStoreUpsell"
	UserExperienceTypeMaintenanceFeb2023                UserExperienceType = "MaintenanceFeb2023"
	UserExperienceTypeTwitterConnectionOnboardingUpsell UserExperienceType = "TwitterConnectionOnboardingUpsell"
	UserExperienceTypeUpsellMintMemento4                UserExperienceType = "UpsellMintMemento4"
)

var AllUserExperienceType = []UserExperienceType{
	UserExperienceTypeMultiGalleryAnnouncement,
	UserExperienceTypeEmailUpsell,
	UserExperienceTypeMerchStoreUpsell,
	UserExperienceTypeMaintenanceFeb2023,
	UserExperienceTypeTwitterConnectionOnboardingUpsell,
	UserExperienceTypeUpsellMintMemento4,
}

func (e UserExperienceType) IsValid() bool {
	switch e {
	case UserExperienceTypeMultiGalleryAnnouncement, UserExperienceTypeEmailUpsell, UserExperienceTypeMerchStoreUpsell, UserExperienceTypeMaintenanceFeb2023, UserExperienceTypeTwitterConnectionOnboardingUpsell, UserExperienceTypeUpsellMintMemento4:
		return true
	}
	return false
}

func (e UserExperienceType) String() string {
	return string(e)
}

func (e *UserExperienceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserExperienceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserExperienceType", str)
	}
	return nil
}

func (e UserExperienceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
