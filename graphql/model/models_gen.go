// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"github.com/mikeydub/go-gallery/service/persist"
)

type AddUserAddressPayloadOrError interface {
	IsAddUserAddressPayloadOrError()
}

type AuthorizationError interface {
	IsAuthorizationError()
}

type CreateCollectionPayloadOrError interface {
	IsCreateCollectionPayloadOrError()
}

type CreateUserPayloadOrError interface {
	IsCreateUserPayloadOrError()
}

type DeleteCollectionPayloadOrError interface {
	IsDeleteCollectionPayloadOrError()
}

type Error interface {
	IsError()
}

type GalleryUserOrWallet interface {
	IsGalleryUserOrWallet()
}

type GetAuthNoncePayloadOrError interface {
	IsGetAuthNoncePayloadOrError()
}

type LoginPayloadOrError interface {
	IsLoginPayloadOrError()
}

type Nft interface {
	IsNft()
}

type NftInterface interface {
	IsNftInterface()
}

type Node interface {
	IsNode()
}

type RefreshOpenSeaNftsPayloadOrError interface {
	IsRefreshOpenSeaNftsPayloadOrError()
}

type RemoveUserAddressesPayloadOrError interface {
	IsRemoveUserAddressesPayloadOrError()
}

type UpdateCollectionInfoPayloadOrError interface {
	IsUpdateCollectionInfoPayloadOrError()
}

type UpdateCollectionNftsPayloadOrError interface {
	IsUpdateCollectionNftsPayloadOrError()
}

type UpdateGalleryCollectionsPayloadOrError interface {
	IsUpdateGalleryCollectionsPayloadOrError()
}

type UpdateUserInfoPayloadOrError interface {
	IsUpdateUserInfoPayloadOrError()
}

type UserByUsernameOrError interface {
	IsUserByUsernameOrError()
}

type ViewerOrError interface {
	IsViewerOrError()
}

type AddUserAddressPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (AddUserAddressPayload) IsAddUserAddressPayloadOrError() {}

type AuthMechanism struct {
	EthereumEoa *EthereumEoaAuth `json:"ethereumEoa"`
	GnosisSafe  *GnosisSafeAuth  `json:"gnosisSafe"`
}

type AuthNonce struct {
	Nonce      *string `json:"nonce"`
	UserExists *bool   `json:"userExists"`
}

func (AuthNonce) IsGetAuthNoncePayloadOrError() {}

type CreateCollectionInput struct {
	GalleryID      persist.DBID                  `json:"galleryId"`
	Name           string                        `json:"name"`
	CollectorsNote string                        `json:"collectorsNote"`
	Nfts           []persist.DBID                `json:"nfts"`
	Layout         *GalleryCollectionLayoutInput `json:"layout"`
}

type CreateCollectionPayload struct {
	Collection *GalleryCollection `json:"collection"`
}

func (CreateCollectionPayload) IsCreateCollectionPayloadOrError() {}

type CreateUserPayload struct {
	UserID    *persist.DBID `json:"userId"`
	GalleryID *persist.DBID `json:"galleryId"`
}

func (CreateUserPayload) IsCreateUserPayloadOrError() {}

type DeleteCollectionPayload struct {
	Gallery *Gallery `json:"gallery"`
}

func (DeleteCollectionPayload) IsDeleteCollectionPayloadOrError() {}

type ErrAuthenticationFailed struct {
	Message string `json:"message"`
}

func (ErrAuthenticationFailed) IsAddUserAddressPayloadOrError() {}
func (ErrAuthenticationFailed) IsError()                        {}
func (ErrAuthenticationFailed) IsLoginPayloadOrError()          {}
func (ErrAuthenticationFailed) IsCreateUserPayloadOrError()     {}

type ErrDoesNotOwnRequiredNft struct {
	Message string `json:"message"`
}

func (ErrDoesNotOwnRequiredNft) IsGetAuthNoncePayloadOrError() {}
func (ErrDoesNotOwnRequiredNft) IsAuthorizationError()         {}
func (ErrDoesNotOwnRequiredNft) IsError()                      {}
func (ErrDoesNotOwnRequiredNft) IsLoginPayloadOrError()        {}
func (ErrDoesNotOwnRequiredNft) IsCreateUserPayloadOrError()   {}

type ErrInvalidInput struct {
	Message   string `json:"message"`
	Parameter string `json:"parameter"`
	Reason    string `json:"reason"`
}

func (ErrInvalidInput) IsUserByUsernameOrError()                  {}
func (ErrInvalidInput) IsCreateCollectionPayloadOrError()         {}
func (ErrInvalidInput) IsDeleteCollectionPayloadOrError()         {}
func (ErrInvalidInput) IsUpdateCollectionInfoPayloadOrError()     {}
func (ErrInvalidInput) IsUpdateCollectionNftsPayloadOrError()     {}
func (ErrInvalidInput) IsUpdateGalleryCollectionsPayloadOrError() {}
func (ErrInvalidInput) IsAddUserAddressPayloadOrError()           {}
func (ErrInvalidInput) IsRemoveUserAddressesPayloadOrError()      {}
func (ErrInvalidInput) IsUpdateUserInfoPayloadOrError()           {}
func (ErrInvalidInput) IsError()                                  {}

type ErrInvalidToken struct {
	Message string `json:"message"`
}

func (ErrInvalidToken) IsAuthorizationError() {}
func (ErrInvalidToken) IsError()              {}

type ErrNoCookie struct {
	Message string `json:"message"`
}

func (ErrNoCookie) IsAuthorizationError() {}
func (ErrNoCookie) IsError()              {}

type ErrNotAuthorized struct {
	Message string             `json:"message"`
	Cause   AuthorizationError `json:"cause"`
}

func (ErrNotAuthorized) IsViewerOrError()                          {}
func (ErrNotAuthorized) IsCreateCollectionPayloadOrError()         {}
func (ErrNotAuthorized) IsDeleteCollectionPayloadOrError()         {}
func (ErrNotAuthorized) IsUpdateCollectionInfoPayloadOrError()     {}
func (ErrNotAuthorized) IsUpdateCollectionNftsPayloadOrError()     {}
func (ErrNotAuthorized) IsUpdateGalleryCollectionsPayloadOrError() {}
func (ErrNotAuthorized) IsAddUserAddressPayloadOrError()           {}
func (ErrNotAuthorized) IsRemoveUserAddressesPayloadOrError()      {}
func (ErrNotAuthorized) IsUpdateUserInfoPayloadOrError()           {}
func (ErrNotAuthorized) IsRefreshOpenSeaNftsPayloadOrError()       {}
func (ErrNotAuthorized) IsError()                                  {}

type ErrUserAlreadyExists struct {
	Message string `json:"message"`
}

func (ErrUserAlreadyExists) IsError()                    {}
func (ErrUserAlreadyExists) IsCreateUserPayloadOrError() {}

type ErrUserNotFound struct {
	Message string `json:"message"`
}

func (ErrUserNotFound) IsUserByUsernameOrError() {}
func (ErrUserNotFound) IsError()                 {}
func (ErrUserNotFound) IsLoginPayloadOrError()   {}

type EthereumEoaAuth struct {
	Address   persist.Address `json:"address"`
	Nonce     string          `json:"nonce"`
	Signature string          `json:"signature"`
}

type Gallery struct {
	ID          persist.DBID         `json:"id"`
	Owner       *GalleryUser         `json:"owner"`
	Collections []*GalleryCollection `json:"collections"`
}

func (Gallery) IsNode() {}

type GalleryCollection struct {
	ID             persist.DBID             `json:"id"`
	Version        *int                     `json:"version"`
	Name           *string                  `json:"name"`
	CollectorsNote *string                  `json:"collectorsNote"`
	Gallery        *Gallery                 `json:"gallery"`
	Layout         *GalleryCollectionLayout `json:"layout"`
	Hidden         *bool                    `json:"hidden"`
	Nfts           []*GalleryNft            `json:"nfts"`
}

func (GalleryCollection) IsNode() {}

type GalleryCollectionLayout struct {
	Columns    *int   `json:"columns"`
	Whitespace []*int `json:"whitespace"`
}

type GalleryCollectionLayoutInput struct {
	Columns    int   `json:"columns"`
	Whitespace []int `json:"whitespace"`
}

type GalleryNft struct {
	ID         persist.DBID       `json:"id"`
	Nft        Nft                `json:"nft"`
	Collection *GalleryCollection `json:"collection"`
}

type GalleryUser struct {
	ID                  persist.DBID `json:"id"`
	Username            *string      `json:"username"`
	Bio                 *string      `json:"bio"`
	Wallets             []*Wallet    `json:"wallets"`
	Galleries           []*Gallery   `json:"galleries"`
	IsAuthenticatedUser *bool        `json:"isAuthenticatedUser"`
}

func (GalleryUser) IsNode()                  {}
func (GalleryUser) IsGalleryUserOrWallet()   {}
func (GalleryUser) IsUserByUsernameOrError() {}

type GenericNft struct {
	ID                  persist.DBID        `json:"id"`
	Name                *string             `json:"name"`
	TokenCollectionName *string             `json:"tokenCollectionName"`
	Owner               GalleryUserOrWallet `json:"owner"`
}

func (GenericNft) IsNftInterface() {}
func (GenericNft) IsNode()         {}
func (GenericNft) IsNft()          {}

type GnosisSafeAuth struct {
	Address persist.Address `json:"address"`
	Nonce   string          `json:"nonce"`
}

type ImageNft struct {
	ID                  persist.DBID        `json:"id"`
	Name                *string             `json:"name"`
	TokenCollectionName *string             `json:"tokenCollectionName"`
	Owner               GalleryUserOrWallet `json:"owner"`
	ImageURL            *string             `json:"imageUrl"`
}

func (ImageNft) IsNftInterface() {}
func (ImageNft) IsNode()         {}
func (ImageNft) IsNft()          {}

type LoginPayload struct {
	UserID *persist.DBID `json:"userId"`
}

func (LoginPayload) IsLoginPayloadOrError() {}

type MembershipOwner struct {
	ID          persist.DBID     `json:"id"`
	Address     *persist.Address `json:"address"`
	User        *GalleryUser     `json:"user"`
	PreviewNfts []*string        `json:"previewNfts"`
}

func (MembershipOwner) IsNode() {}

type MembershipTier struct {
	ID       persist.DBID       `json:"id"`
	Name     *string            `json:"name"`
	AssetURL *string            `json:"assetUrl"`
	TokenID  *string            `json:"tokenId"`
	Owners   []*MembershipOwner `json:"owners"`
}

func (MembershipTier) IsNode() {}

type RefreshOpenSeaNftsPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (RefreshOpenSeaNftsPayload) IsRefreshOpenSeaNftsPayloadOrError() {}

type RemoveUserAddressesPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (RemoveUserAddressesPayload) IsRemoveUserAddressesPayloadOrError() {}

type UpdateCollectionInfoInput struct {
	CollectionID   persist.DBID `json:"collectionId"`
	Name           string       `json:"name"`
	CollectorsNote string       `json:"collectorsNote"`
}

type UpdateCollectionInfoPayload struct {
	Collection *GalleryCollection `json:"collection"`
}

func (UpdateCollectionInfoPayload) IsUpdateCollectionInfoPayloadOrError() {}

type UpdateCollectionNftsInput struct {
	CollectionID persist.DBID                  `json:"collectionId"`
	Nfts         []persist.DBID                `json:"nfts"`
	Layout       *GalleryCollectionLayoutInput `json:"layout"`
}

type UpdateCollectionNftsPayload struct {
	Collection *GalleryCollection `json:"collection"`
}

func (UpdateCollectionNftsPayload) IsUpdateCollectionNftsPayloadOrError() {}

type UpdateGalleryCollectionsInput struct {
	GalleryID   persist.DBID   `json:"galleryId"`
	Collections []persist.DBID `json:"collections"`
}

type UpdateGalleryCollectionsPayload struct {
	Gallery *Gallery `json:"gallery"`
}

func (UpdateGalleryCollectionsPayload) IsUpdateGalleryCollectionsPayloadOrError() {}

type UpdateUserInfoInput struct {
	Username string `json:"username"`
	Bio      string `json:"bio"`
}

type UpdateUserInfoPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateUserInfoPayload) IsUpdateUserInfoPayloadOrError() {}

type VideoNft struct {
	ID                  persist.DBID        `json:"id"`
	Name                *string             `json:"name"`
	TokenCollectionName *string             `json:"tokenCollectionName"`
	Owner               GalleryUserOrWallet `json:"owner"`
}

func (VideoNft) IsNftInterface() {}
func (VideoNft) IsNode()         {}
func (VideoNft) IsNft()          {}

type Viewer struct {
	User            *GalleryUser     `json:"user"`
	ViewerGalleries []*ViewerGallery `json:"viewerGalleries"`
}

func (Viewer) IsViewerOrError() {}

type ViewerGallery struct {
	Gallery *Gallery `json:"gallery"`
}

type Wallet struct {
	ID      persist.DBID     `json:"id"`
	Address *persist.Address `json:"address"`
	Nfts    []Nft            `json:"nfts"`
}

func (Wallet) IsNode()                {}
func (Wallet) IsGalleryUserOrWallet() {}
