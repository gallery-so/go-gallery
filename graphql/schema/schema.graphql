# Use @goField(forceResolver: true) to lazily handle recursive or expensive fields that shouldn't be
# resolved unless the caller asks for them
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# Add @authRequired to any field that requires a user to be logged in. NOTE: Any field tagged with
# @authRequired MUST return a union type that includes ErrNotAuthorized.
#
# If we need more control over auth in the future, this directive can be updated to take
# arguments that specify the level of access required.
directive @authRequired on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

scalar DateTime

interface Node {
  id: ID!
}

interface Error {
  message: String!
}

type GalleryUser implements Node {
  id: ID!
  username: String
  bio: String
  wallets: [Wallet]
  galleries: [Gallery] @goField(forceResolver: true)
  isAuthenticatedUser: Boolean
}

type Wallet implements Node {
  id: ID!
  address: String
  # TODO: Do we paginate these currently?
  nfts: [Nft] @goField(forceResolver: true)
}

union GalleryUserOrWallet = GalleryUser | Wallet

interface NftInterface {
  id: ID!
  name: String
  tokenCollectionName: String
  owner: GalleryUserOrWallet
}

type ImageNft implements NftInterface & Node {
  id: ID!
  name: String
  tokenCollectionName: String
  owner: GalleryUserOrWallet @goField(forceResolver: true)
  imageUrl: String
}

type VideoNft implements NftInterface & Node {
  id: ID!
  name: String
  tokenCollectionName: String
  owner: GalleryUserOrWallet @goField(forceResolver: true)
}

# Temporary NFT type until we support media types via indexer
type GenericNft implements NftInterface & Node {
  id: ID!
  name: String
  tokenCollectionName: String
  owner: GalleryUserOrWallet @goField(forceResolver: true)
}

union Nft = ImageNft | VideoNft | GenericNft

type GalleryNft {
  id: ID!
  nft: Nft
  collection: GalleryCollection
}

type GalleryCollectionLayout {
  columns: Int
}

type GalleryCollection implements Node {
  id: ID!
  version: Int
  name: String
  collectorsNote: String
  gallery: Gallery
  layout: GalleryCollectionLayout
  hidden: Boolean
  nfts: [GalleryNft] @goField(forceResolver: true)
}

type Gallery implements Node {
  id: ID!
  owner: GalleryUser @goField(forceResolver: true)
  collections: [GalleryCollection] @goField(forceResolver: true)
}

type MembershipTierOwner implements Node {
  id: ID!

  user: GalleryUser
  previewNfts: [String]
}

type MembershipTier implements Node {
  id: ID!
  name: String
  assetUrl: String
  tokenId: String
  owners: [MembershipTierOwner]
}

# We have this extra type in case we need to stick authed data
# in here one day.
type ViewerGallery {
  gallery: Gallery
}

type Viewer {
  user: GalleryUser
  viewerGalleries: [ViewerGallery] @goField(forceResolver: true)
}
union UserByUsernameOrError = GalleryUser | ErrUserNotFound

union ViewerOrError = Viewer | ErrNotAuthorized

type Query {
  viewer: ViewerOrError @authRequired
  userByUsername(username: String!): UserByUsernameOrError
  membershipTiers: [MembershipTier]
}

input GalleryCollectionLayoutInput {
  columns: Int
}

input CreateCollectionInput {
  galleryId: ID!
  name: String
  collectorsNote: String
  nfts: [ID!]!
  layout: GalleryCollectionLayoutInput!
}

type CreateCollectionPayload {
  gallery: Gallery
}

type DeleteCollectionPayload {
  gallery: Gallery
}

input UpdateCollectionInfoInput {
  collectionId: ID!
  name: String
  collectorsNote: String
}

type UpdateCollectionInfoPayload {
  collection: GalleryCollection
}

input UpdateCollectionNftsInput {
  collectionId: ID!
  nfts: [ID!]!
}

type UpdateCollectionNftsPayload {
  collection: GalleryCollection
}

input UpdateGalleryCollectionsInput {
  galleryId: ID!
  collections: [ID!]!
}

type UpdateGalleryCollectionsPayload {
  gallery: Gallery
}

type RemoveUserAddressPayload {
  viewer: Viewer
}

input UpdateUserInfoInput {
  username: String
  bio: String
}

type UpdateUserInfoPayload {
  viewer: Viewer
}

type RefreshOpenSeaNftsPayload {
  wallet: Wallet
}

type AuthNonce {
  nonce: String
  userExists: Boolean
}

union GetAuthNoncePayloadOrError = AuthNonce | ErrDoesNotOwnRequiredNFT

type ErrAuthenticationFailed implements Error {
  message: String!
}

type ErrUserAlreadyExists implements Error {
  message: String!
}

type ErrUserNotFound implements Error {
  message: String!
}

union AuthorizationError = ErrNoCookie | ErrInvalidToken | ErrDoesNotOwnRequiredNFT

type ErrNotAuthorized implements Error {
  message: String!
  cause: AuthorizationError!
}

type ErrNoCookie implements Error {
  message: String!
}

type ErrInvalidToken implements Error {
  message: String!
}

type ErrDoesNotOwnRequiredNFT implements Error {
  message: String!
}

input AuthMechanism {
  ethereumEoa: EthereumEoaAuth
  gnosisSafe: GnosisSafeAuth
}

input EthereumEoaAuth {
  address: String!
  nonce: String!
  signature: String!
}

input GnosisSafeAuth {
  address: String!
  nonce: String!
  signature: String!
}

union LoginPayloadOrError = LoginPayload | ErrUserNotFound | ErrAuthenticationFailed | ErrDoesNotOwnRequiredNFT

type LoginPayload {
  userId: ID
}

union CreateUserPayloadOrError = CreateUserPayload | ErrUserAlreadyExists | ErrAuthenticationFailed | ErrDoesNotOwnRequiredNFT

type CreateUserPayload {
  userId: ID
  galleryId: String
}

type Mutation {
  # Collection Mutations
  createCollection(input: CreateCollectionInput!): CreateCollectionPayload
  deleteCollection(collectionId: Int): DeleteCollectionPayload
  updateCollectionInfo(input: UpdateCollectionInfoInput!): UpdateCollectionInfoPayload
  updateCollectionNfts(input: UpdateCollectionNftsInput!): UpdateCollectionNftsPayload

  # Gallery Mutations
  updateGalleryCollections(input: UpdateGalleryCollectionsInput): UpdateGalleryCollectionsPayload

  # User Mutations
  removeUserAddress(address: String!): RemoveUserAddressPayload
  updateUserInfo(input: UpdateUserInfoInput): UpdateUserInfoPayload
  #addUserAddress()

  refreshOpenSeaNfts: RefreshOpenSeaNftsPayload

  getAuthNonce(address: String!): GetAuthNoncePayloadOrError

  createUser(authMechanism: AuthMechanism!): CreateUserPayloadOrError
  login(authMechanism: AuthMechanism!): LoginPayloadOrError
}
