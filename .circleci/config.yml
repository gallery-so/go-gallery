version: 2.1
workflows:
  main:
    jobs:
      - build
      - deploy:
          filters:
            branches:
              only:
                - "main"
jobs:
  build:
    working_directory: ~/go-gallery
    docker:
      - image: circleci/golang:1.15.8
      - image: mongo:latest
      - image: redis:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: "Update apt"
          command: apt-get update
      - run:
          name: "Install cli dependencies"
          command: apt-get -y install ffmpeg python3 libavcodec libavutil libavformat GraphicsMagick libavcodec libavutil libavformat libswscale
      - run:
          name: Install Dependencies
          command: go mod download
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test-reports
            gotestsum --junitfile /tmp/test-reports/unit-tests.xml
      - store_test_results:
          path: /tmp/test-reports
  deploy:
    working_directory: ~/go-gallery
    docker:
      - image: keybaseio/client
    steps:
      - checkout
      - run:
          name: "Update apt"
          command: apt-get update
      - run:
          name: "Oneshot Keybase"
          command: "keybase oneshot"
      - run:
          name: "Decrypt secrets"
          command: keybase decrypt -i secrits -o decrypted.zip
      - run:
          name: "Install cli dependencies"
          command: apt-get -y install unzip curl sudo python3 ffmpeg libavcodec libavutil libavformat GraphicsMagick libavcodec libavutil libavformat libswscale
      - run:
          name: "Unzip secrets file"
          command: unzip decrypted.zip
      - run:
          name: "Copy Backend app.yaml"
          command: cp -R decrypted/app-dev-backend.yaml ./app-backend.yaml
      - run:
          name: "Copy Indexer app.yaml"
          command: cp -R decrypted/app-dev-indexer.yaml ./app-indexer.yaml 
      - run:
          command: |
              install () {
                # Set sudo to work whether logged in as root user or non-root user
                if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi
                cd ~/
                curl -Ss --retry 5 https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-353.0.0-linux-x86_64.tar.gz | tar xz
                echo 'source ~/google-cloud-sdk/path.bash.inc' >> $BASH_ENV
              }

              if grep 'docker\|lxc' /proc/1/cgroup > /dev/null 2>&1; then
                if [[ $(command -v gcloud) == "" ]]; then
                  install
                else
                  echo "gcloud CLI is already installed."
                fi
              else
                echo "----------------------------------------------------------------------------------------------------"
                echo "this is a machine executor job, replacing default installation of gcloud CLI"
                echo "----------------------------------------------------------------------------------------------------"
                sudo rm -rf /opt/google-cloud-sdk
                install
              fi
          name: Install latest gcloud CLI version, if not available
      - run:
          command: |
              # Store service account
              echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

              # Initialize gcloud CLI
              gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
              gcloud --quiet config set project $GOOGLE_PROJECT_ID

              if [[ -n $GOOGLE_COMPUTE_ZONE ]]; then
                gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
              elif [[ -n $GOOGLE_COMPUTE_REGION ]]; then
                gcloud --quiet config set compute/region $GOOGLE_COMPUTE_REGION
              else
                echo "ERROR: Set GOOGLE_COMPUTE_ZONE or GOOGLE_COMPUTE_REGION env variable" >&2
                exit 1
              fi
          name: Initialize gcloud CLI to connect to Google Cloud
      - run:
          name: "Deploy Backend"
          command: gcloud beta app deploy --quiet --appyaml app-backend.yaml
      - run:
          name: "Deploy Indexer"
          command: gcloud beta app deploy --quiet --appyaml app-indexer.yaml