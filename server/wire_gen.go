// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"cloud.google.com/go/cloudtasks/apiv2"
	"context"
	"database/sql"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/google/wire"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/mikeydub/go-gallery/db/gen/coredb"
	"github.com/mikeydub/go-gallery/env"
	"github.com/mikeydub/go-gallery/service/multichain"
	"github.com/mikeydub/go-gallery/service/multichain/alchemy"
	"github.com/mikeydub/go-gallery/service/multichain/eth"
	"github.com/mikeydub/go-gallery/service/multichain/infura"
	"github.com/mikeydub/go-gallery/service/multichain/opensea"
	"github.com/mikeydub/go-gallery/service/multichain/poap"
	"github.com/mikeydub/go-gallery/service/multichain/tezos"
	"github.com/mikeydub/go-gallery/service/persist"
	"github.com/mikeydub/go-gallery/service/persist/postgres"
	"github.com/mikeydub/go-gallery/service/redis"
	"github.com/mikeydub/go-gallery/service/rpc"
	"github.com/mikeydub/go-gallery/service/task"
	"github.com/mikeydub/go-gallery/util"
	"net/http"
)

// Injectors from inject.go:

// NewMultichainProvider is a wire injector that sets up a multichain provider instance
func NewMultichainProvider(ctx context.Context) *multichain.Provider {
	v := _wireValue
	db := postgres.MustCreateClient(v...)
	pool := postgres.NewPgxClient(v...)
	repositories := postgres.NewRepositories(db, pool)
	queries := coredb.New(pool)
	cache := newCommunitiesCache()
	serverEnvInit := setEnv()
	client := task.NewClient(ctx)
	httpClient := _wireClientValue
	serverEthProviderList := ethProviderSet(serverEnvInit, client, httpClient)
	serverOptimismProviderList := optimismProviderSet(httpClient)
	serverTezosProviderList := tezosProviderSet(serverEnvInit, httpClient)
	serverPoapProviderList := poapProviderSet(serverEnvInit, httpClient)
	serverPolygonProviderList := polygonProviderSet(httpClient)
	v2 := newMultichainSet(serverEthProviderList, serverOptimismProviderList, serverTezosProviderList, serverPoapProviderList, serverPolygonProviderList)
	v3 := defaultChainOverrides()
	sendTokens := newSendTokensFunc(ctx, client)
	provider := &multichain.Provider{
		Repos:                 repositories,
		Queries:               queries,
		Cache:                 cache,
		Chains:                v2,
		ChainAddressOverrides: v3,
		SendTokens:            sendTokens,
	}
	return provider
}

var (
	_wireValue       = []postgres.ConnectionOption{}
	_wireClientValue = &http.Client{Timeout: 0}
)

// ethProviderSet is a wire injector that creates the set of Ethereum providers
func ethProviderSet(serverEnvInit envInit, client *cloudtasks.Client, httpClient *http.Client) ethProviderList {
	ethclientClient := rpc.NewEthClient()
	provider := newIndexerProvider(serverEnvInit, httpClient, ethclientClient, client)
	openseaProvider := opensea.NewProvider(ethclientClient, httpClient)
	syncFailureFallbackProvider := ethFallbackProvider(httpClient)
	serverEthProviderList := ethProvidersConfig(provider, openseaProvider, syncFailureFallbackProvider)
	return serverEthProviderList
}

// ethProvidersConfig is a wire injector that binds multichain interfaces to their concrete Ethereum implementations
func ethProvidersConfig(indexerProvider *eth.Provider, openseaProvider *opensea.Provider, fallbackProvider multichain.SyncFailureFallbackProvider) ethProviderList {
	serverEthProviderList := ethRequirements(indexerProvider, indexerProvider, fallbackProvider, openseaProvider, indexerProvider, indexerProvider, indexerProvider)
	return serverEthProviderList
}

// tezosProviderSet is a wire injector that creates the set of Tezos providers
func tezosProviderSet(serverEnvInit envInit, client *http.Client) tezosProviderList {
	provider := newTzktProvider(serverEnvInit, client)
	tezosObjktProvider := newObjktProvider(serverEnvInit)
	syncWithContractEvalFallbackProvider := tezosFallbackProvider(client, provider, tezosObjktProvider)
	serverTezosProviderList := tezosProvidersConfig(syncWithContractEvalFallbackProvider)
	return serverTezosProviderList
}

// tezosProvidersConfig is a wire injector that binds multichain interfaces to their concrete Tezos implementations
func tezosProvidersConfig(tezosProvider multichain.SyncWithContractEvalFallbackProvider) tezosProviderList {
	serverTezosProviderList := tezosRequirements(tezosProvider, tezosProvider)
	return serverTezosProviderList
}

// optimismProviderSet is a wire injector that creates the set of Optimism providers
func optimismProviderSet(client *http.Client) optimismProviderList {
	serverOptimismProvider := newOptimismProvider(client)
	serverOptimismProviderList := optimismProvidersConfig(serverOptimismProvider)
	return serverOptimismProviderList
}

// optimismProvidersConfig is a wire injector that binds multichain interfaces to their concrete Optimism implementations
func optimismProvidersConfig(optimismProvider2 *optimismProvider) optimismProviderList {
	serverOptimismProviderList := optimismRequirements(optimismProvider2, optimismProvider2)
	return serverOptimismProviderList
}

// poapProviderSet is a wire injector that creates the set of POAP providers
func poapProviderSet(serverEnvInit envInit, client *http.Client) poapProviderList {
	provider := newPoapProvider(serverEnvInit, client)
	serverPoapProviderList := poapProvidersConfig(provider)
	return serverPoapProviderList
}

// poapProvidersConfig is a wire injector that binds multichain interfaces to their concrete POAP implementations
func poapProvidersConfig(poapProvider *poap.Provider) poapProviderList {
	serverPoapProviderList := poapRequirements(poapProvider, poapProvider, poapProvider)
	return serverPoapProviderList
}

// polygonProviderSet is a wire injector that creates the set of polygon providers
func polygonProviderSet(client *http.Client) polygonProviderList {
	serverPolygonProvider := newPolygonProvider(client)
	serverPolygonProviderList := polygonProvidersConfig(serverPolygonProvider)
	return serverPolygonProviderList
}

// polygonProvidersConfig is a wire injector that binds multichain interfaces to their concrete Polygon implementations
func polygonProvidersConfig(polygonProvider2 *polygonProvider) polygonProviderList {
	serverPolygonProviderList := polygonRequirements(polygonProvider2, polygonProvider2)
	return serverPolygonProviderList
}

func ethFallbackProvider(httpClient *http.Client) multichain.SyncFailureFallbackProvider {
	chain := _wireChainValue
	provider := alchemy.NewProvider(chain, httpClient)
	infuraProvider := infura.NewProvider(httpClient)
	syncFailureFallbackProvider := multichain.SyncFailureFallbackProvider{
		Primary:  provider,
		Fallback: infuraProvider,
	}
	return syncFailureFallbackProvider
}

var (
	_wireChainValue = persist.ChainETH
)

func tezosFallbackProvider(httpClient *http.Client, tzktProvider *tezos.Provider, objktProvider *tezos.TezosObjktProvider) multichain.SyncWithContractEvalFallbackProvider {
	v := tezosTokenEvalFunc()
	syncWithContractEvalFallbackProvider := multichain.SyncWithContractEvalFallbackProvider{
		Primary:  tzktProvider,
		Fallback: objktProvider,
		Eval:     v,
	}
	return syncWithContractEvalFallbackProvider
}

// inject.go:

// envInit is a type returned after setting up the environment
// Adding envInit as a dependency to a provider will ensure that the environment is set up prior
// to calling the provider
type envInit struct{}

type ethProviderList []any

type tezosProviderList []any

type optimismProviderList []any

type poapProviderList []any

type polygonProviderList []any

type optimismProvider struct{ *alchemy.Provider }

type polygonProvider struct{ *alchemy.Provider }

// dbConnSet is a wire provider set for initializing a postgres connection
var dbConnSet = wire.NewSet(wire.Value([]postgres.ConnectionOption{}), postgres.MustCreateClient, postgres.NewPgxClient, coredb.New, wire.Bind(new(coredb.DBTX), util.ToPointer(newPgxClient(setEnv()))))

func newPqClient(e envInit, opts []postgres.ConnectionOption) (*sql.DB, func(), error) {
	pq := postgres.MustCreateClient(opts...)
	return pq, func() { pq.Close() }, nil
}

func newPgxClient(envInit) *pgxpool.Pool {
	return postgres.NewPgxClient()
}

func setEnv() envInit {
	SetDefaults()
	return envInit{}
}

// ethRequirements is the set of provider interfaces required for Ethereum
func ethRequirements(
	nr multichain.NameResolver,
	v multichain.Verifier,
	tof multichain.TokensOwnerFetcher,
	toc multichain.TokensContractFetcher,
	cr multichain.ContractRefresher,
	tmf multichain.TokenMetadataFetcher,
	tdf multichain.TokenDescriptorsFetcher,
) ethProviderList {
	return ethProviderList{nr, v, tof, toc, cr, tmf, tdf}
}

// tezosRequirements is the set of provider interfaces required for Tezos
func tezosRequirements(
	tof multichain.TokensOwnerFetcher,
	toc multichain.TokensContractFetcher,
) tezosProviderList {
	return tezosProviderList{tof, toc}
}

// optimismRequirements is the set of provider interfaces required for Optimism
func optimismRequirements(
	tof multichain.TokensOwnerFetcher,
	toc multichain.TokensContractFetcher,
) optimismProviderList {
	return optimismProviderList{tof, toc}
}

// poapRequirements is the set of provider interfaces required for POAP
func poapRequirements(
	nr multichain.NameResolver,
	tof multichain.TokensOwnerFetcher,
	toc multichain.TokensContractFetcher,
) poapProviderList {
	return poapProviderList{nr, tof, toc}
}

// polygonRequirements is the set of provider interfaces required for Polygon
func polygonRequirements(
	tof multichain.TokensOwnerFetcher,
	toc multichain.TokensContractFetcher,
) polygonProviderList {
	return polygonProviderList{tof, toc}
}

// newMultichain is a wire provider that creates a multichain provider
func newMultichainSet(
	ethProviders ethProviderList,
	optimismProviders optimismProviderList,
	tezosProviders tezosProviderList,
	poapProviders poapProviderList,
	polygonProviders polygonProviderList,
) map[persist.Chain][]any {
	chainToProviders := map[persist.Chain][]any{}
	chainToProviders[persist.ChainETH] = ethProviders
	chainToProviders[persist.ChainOptimism] = optimismProviders
	chainToProviders[persist.ChainTezos] = tezosProviders
	chainToProviders[persist.ChainPOAP] = poapProviders
	chainToProviders[persist.ChainPolygon] = polygonProviders
	return chainToProviders
}

// defaultChainOverrides is a wire provider for chain overrides
func defaultChainOverrides() multichain.ChainOverrideMap {
	var ethChain = persist.ChainETH
	return multichain.ChainOverrideMap{persist.ChainPOAP: &ethChain, persist.ChainOptimism: &ethChain, persist.ChainPolygon: &ethChain}
}

func newIndexerProvider(e envInit, httpClient *http.Client, ethClient *ethclient.Client, taskClient *cloudtasks.Client) *eth.Provider {
	return eth.NewProvider(env.GetString("INDEXER_HOST"), httpClient, ethClient, taskClient)
}

func newTzktProvider(e envInit, httpClient *http.Client) *tezos.Provider {
	return tezos.NewProvider(env.GetString("TEZOS_API_URL"), httpClient)
}

func newObjktProvider(e envInit) *tezos.TezosObjktProvider {
	return tezos.NewObjktProvider(env.GetString("IPFS_URL"))
}

func tezosTokenEvalFunc() func(context.Context, multichain.ChainAgnosticToken) bool {
	return func(ctx context.Context, token multichain.ChainAgnosticToken) bool {
		return tezos.IsSigned(ctx, token) && tezos.ContainsTezosKeywords(ctx, token)
	}
}

func newPoapProvider(e envInit, c *http.Client) *poap.Provider {
	return poap.NewProvider(c, env.GetString("POAP_API_KEY"), env.GetString("POAP_AUTH_TOKEN"))
}

func newOptimismProvider(c *http.Client) *optimismProvider {
	return &optimismProvider{alchemy.NewProvider(persist.ChainOptimism, c)}
}

func newPolygonProvider(c *http.Client) *polygonProvider {
	return &polygonProvider{alchemy.NewProvider(persist.ChainPolygon, c)}
}

func newCommunitiesCache() *redis.Cache {
	return redis.NewCache(redis.CommunitiesCache)
}

func newSendTokensFunc(ctx context.Context, taskClient *cloudtasks.Client) multichain.SendTokens {
	return func(ctx context.Context, t task.TokenProcessingUserMessage) error {
		return task.CreateTaskForTokenProcessing(ctx, taskClient, t)
	}
}
