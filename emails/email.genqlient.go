// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package emails

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/mikeydub/go-gallery/service/persist"
)

type Chain string

const (
	ChainEthereum Chain = "Ethereum"
	ChainArbitrum Chain = "Arbitrum"
	ChainPolygon  Chain = "Polygon"
	ChainOptimism Chain = "Optimism"
	ChainTezos    Chain = "Tezos"
	ChainPoap     Chain = "POAP"
	ChainZora     Chain = "Zora"
	ChainBase     Chain = "Base"
)

// __communityDigestEntityQueryInput is used internally by genqlient
type __communityDigestEntityQueryInput struct {
	Id persist.DBID `json:"id"`
}

// GetId returns __communityDigestEntityQueryInput.Id, and is useful for accessing the field via an interface.
func (v *__communityDigestEntityQueryInput) GetId() persist.DBID { return v.Id }

// __galleryDigestEntityQueryInput is used internally by genqlient
type __galleryDigestEntityQueryInput struct {
	Id persist.DBID `json:"id"`
}

// GetId returns __galleryDigestEntityQueryInput.Id, and is useful for accessing the field via an interface.
func (v *__galleryDigestEntityQueryInput) GetId() persist.DBID { return v.Id }

// __postDigestEntityQueryInput is used internally by genqlient
type __postDigestEntityQueryInput struct {
	Id persist.DBID `json:"id"`
}

// GetId returns __postDigestEntityQueryInput.Id, and is useful for accessing the field via an interface.
func (v *__postDigestEntityQueryInput) GetId() persist.DBID { return v.Id }

// communityDigestEntityQueryCommunityByIdCommunity includes the requested fields of the GraphQL type Community.
type communityDigestEntityQueryCommunityByIdCommunity struct {
	Typename        *string                                                                         `json:"__typename"`
	Dbid            persist.DBID                                                                    `json:"dbid"`
	Subtype         *communityDigestEntityQueryCommunityByIdCommunitySubtype                        `json:"-"`
	Name            *string                                                                         `json:"name"`
	Description     *string                                                                         `json:"description"`
	ProfileImageURL *string                                                                         `json:"profileImageURL"`
	Creators        []*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress `json:"-"`
	Tokens          *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection         `json:"tokens"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunity.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetTypename() *string { return v.Typename }

// GetDbid returns communityDigestEntityQueryCommunityByIdCommunity.Dbid, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetDbid() persist.DBID { return v.Dbid }

// GetSubtype returns communityDigestEntityQueryCommunityByIdCommunity.Subtype, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetSubtype() *communityDigestEntityQueryCommunityByIdCommunitySubtype {
	return v.Subtype
}

// GetName returns communityDigestEntityQueryCommunityByIdCommunity.Name, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetName() *string { return v.Name }

// GetDescription returns communityDigestEntityQueryCommunityByIdCommunity.Description, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetDescription() *string {
	return v.Description
}

// GetProfileImageURL returns communityDigestEntityQueryCommunityByIdCommunity.ProfileImageURL, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetProfileImageURL() *string {
	return v.ProfileImageURL
}

// GetCreators returns communityDigestEntityQueryCommunityByIdCommunity.Creators, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetCreators() []*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress {
	return v.Creators
}

// GetTokens returns communityDigestEntityQueryCommunityByIdCommunity.Tokens, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetTokens() *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection {
	return v.Tokens
}

func (v *communityDigestEntityQueryCommunityByIdCommunity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdCommunity
		Subtype  json.RawMessage   `json:"subtype"`
		Creators []json.RawMessage `json:"creators"`
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdCommunity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subtype
		src := firstPass.Subtype
		if len(src) != 0 && string(src) != "null" {
			*dst = new(communityDigestEntityQueryCommunityByIdCommunitySubtype)
			err = __unmarshalcommunityDigestEntityQueryCommunityByIdCommunitySubtype(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal communityDigestEntityQueryCommunityByIdCommunity.Subtype: %w", err)
			}
		}
	}

	{
		dst := &v.Creators
		src := firstPass.Creators
		*dst = make(
			[]*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				*dst = new(communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress)
				err = __unmarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress(
					src, *dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal communityDigestEntityQueryCommunityByIdCommunity.Creators: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdCommunity struct {
	Typename *string `json:"__typename"`

	Dbid persist.DBID `json:"dbid"`

	Subtype json.RawMessage `json:"subtype"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ProfileImageURL *string `json:"profileImageURL"`

	Creators []json.RawMessage `json:"creators"`

	Tokens *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection `json:"tokens"`
}

func (v *communityDigestEntityQueryCommunityByIdCommunity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdCommunity) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdCommunity, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdCommunity

	retval.Typename = v.Typename
	retval.Dbid = v.Dbid
	{

		dst := &retval.Subtype
		src := v.Subtype
		if src != nil {
			var err error
			*dst, err = __marshalcommunityDigestEntityQueryCommunityByIdCommunitySubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal communityDigestEntityQueryCommunityByIdCommunity.Subtype: %w", err)
			}
		}
	}
	retval.Name = v.Name
	retval.Description = v.Description
	retval.ProfileImageURL = v.ProfileImageURL
	{

		dst := &retval.Creators
		src := v.Creators
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal communityDigestEntityQueryCommunityByIdCommunity.Creators: %w", err)
				}
			}
		}
	}
	retval.Tokens = v.Tokens
	return &retval, nil
}

// communityDigestEntityQueryCommunityByIdCommunityByIdOrError includes the requested fields of the GraphQL interface CommunityByIdOrError.
//
// communityDigestEntityQueryCommunityByIdCommunityByIdOrError is implemented by the following types:
// communityDigestEntityQueryCommunityByIdCommunity
// communityDigestEntityQueryCommunityByIdErrCommunityNotFound
// communityDigestEntityQueryCommunityByIdErrInvalidInput
type communityDigestEntityQueryCommunityByIdCommunityByIdOrError interface {
	implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityByIdOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *communityDigestEntityQueryCommunityByIdCommunity) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityByIdOrError() {
}
func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityByIdOrError() {
}
func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityByIdOrError() {
}

func __unmarshalcommunityDigestEntityQueryCommunityByIdCommunityByIdOrError(b []byte, v *communityDigestEntityQueryCommunityByIdCommunityByIdOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Community":
		*v = new(communityDigestEntityQueryCommunityByIdCommunity)
		return json.Unmarshal(b, *v)
	case "ErrCommunityNotFound":
		*v = new(communityDigestEntityQueryCommunityByIdErrCommunityNotFound)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(communityDigestEntityQueryCommunityByIdErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CommunityByIdOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunityByIdOrError: "%v"`, tn.TypeName)
	}
}

func __marshalcommunityDigestEntityQueryCommunityByIdCommunityByIdOrError(v *communityDigestEntityQueryCommunityByIdCommunityByIdOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *communityDigestEntityQueryCommunityByIdCommunity:
		typename = "Community"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalcommunityDigestEntityQueryCommunityByIdCommunity
		}{typename, premarshaled}
		return json.Marshal(result)
	case *communityDigestEntityQueryCommunityByIdErrCommunityNotFound:
		typename = "ErrCommunityNotFound"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalcommunityDigestEntityQueryCommunityByIdErrCommunityNotFound
		}{typename, premarshaled}
		return json.Marshal(result)
	case *communityDigestEntityQueryCommunityByIdErrInvalidInput:
		typename = "ErrInvalidInput"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalcommunityDigestEntityQueryCommunityByIdErrInvalidInput
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunityByIdOrError: "%T"`, v)
	}
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress includes the requested fields of the GraphQL type ChainAddress.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress struct {
	Typename *string          `json:"__typename"`
	Address  *persist.Address `json:"address"`
	Chain    *Chain           `json:"chain"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress) GetTypename() *string {
	return v.Typename
}

// GetAddress returns communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress.Address, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress) GetAddress() *persist.Address {
	return v.Address
}

// GetChain returns communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress.Chain, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress) GetChain() *Chain {
	return v.Chain
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser struct {
	Typename *string `json:"__typename"`
	userFrag `json:"-"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) GetTypename() *string {
	return v.Typename
}

// GetUsername returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) GetUsername() *string {
	return v.userFrag.Username
}

// GetProfileImage returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser.ProfileImage, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) GetProfileImage() *userFragProfileImage {
	return v.userFrag.ProfileImage
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.userFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser struct {
	Typename *string `json:"__typename"`

	Username *string `json:"username"`

	ProfileImage json.RawMessage `json:"profileImage"`
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser

	retval.Typename = v.Typename
	retval.Username = v.userFrag.Username
	{

		dst := &retval.ProfileImage
		src := v.userFrag.ProfileImage
		if src != nil {
			var err error
			*dst, err = __marshaluserFragProfileImage(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser.userFrag.ProfileImage: %w", err)
			}
		}
	}
	return &retval, nil
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress includes the requested fields of the GraphQL interface GalleryUserOrAddress.
//
// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress is implemented by the following types:
// communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress
// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress interface {
	implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress() {
}
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress() {
}

func __unmarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress(b []byte, v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ChainAddress":
		*v = new(communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress)
		return json.Unmarshal(b, *v)
	case "GalleryUser":
		*v = new(communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GalleryUserOrAddress.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress: "%v"`, tn.TypeName)
	}
}

func __marshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress(v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress:
		typename = "ChainAddress"

		result := struct {
			TypeName string `json:"__typename"`
			*communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress
		}{typename, v}
		return json.Marshal(result)
	case *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser:
		typename = "GalleryUser"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress: "%T"`, v)
	}
}

// communityDigestEntityQueryCommunityByIdCommunitySubtype includes the requested fields of the GraphQL interface CommunitySubtype.
//
// communityDigestEntityQueryCommunityByIdCommunitySubtype is implemented by the following types:
// communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity
// communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity
type communityDigestEntityQueryCommunityByIdCommunitySubtype interface {
	implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunitySubtype()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunitySubtype() {
}
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunitySubtype() {
}

func __unmarshalcommunityDigestEntityQueryCommunityByIdCommunitySubtype(b []byte, v *communityDigestEntityQueryCommunityByIdCommunitySubtype) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ArtBlocksCommunity":
		*v = new(communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity)
		return json.Unmarshal(b, *v)
	case "ContractCommunity":
		*v = new(communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CommunitySubtype.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunitySubtype: "%v"`, tn.TypeName)
	}
}

func __marshalcommunityDigestEntityQueryCommunityByIdCommunitySubtype(v *communityDigestEntityQueryCommunityByIdCommunitySubtype) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity:
		typename = "ArtBlocksCommunity"

		result := struct {
			TypeName string `json:"__typename"`
			*communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity
		}{typename, v}
		return json.Marshal(result)
	case *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity:
		typename = "ContractCommunity"

		result := struct {
			TypeName string `json:"__typename"`
			*communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunitySubtype: "%T"`, v)
	}
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity includes the requested fields of the GraphQL type ArtBlocksCommunity.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity struct {
	Typename *string                                                                            `json:"__typename"`
	Contract *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract `json:"contract"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity) GetTypename() *string {
	return v.Typename
}

// GetContract returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity.Contract, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity) GetContract() *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract {
	return v.Contract
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract includes the requested fields of the GraphQL type Contract.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract struct {
	ContractAddress *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress `json:"contractAddress"`
	Chain           *Chain                                                                                                        `json:"chain"`
	ProfileImageURL *string                                                                                                       `json:"profileImageURL"`
}

// GetContractAddress returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract.ContractAddress, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract) GetContractAddress() *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress {
	return v.ContractAddress
}

// GetChain returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract.Chain, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract) GetChain() *Chain {
	return v.Chain
}

// GetProfileImageURL returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract.ProfileImageURL, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract) GetProfileImageURL() *string {
	return v.ProfileImageURL
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress includes the requested fields of the GraphQL type ChainAddress.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress struct {
	Address *persist.Address `json:"address"`
	Chain   *Chain           `json:"chain"`
}

// GetAddress returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress.Address, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress) GetAddress() *persist.Address {
	return v.Address
}

// GetChain returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress.Chain, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress) GetChain() *Chain {
	return v.Chain
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity includes the requested fields of the GraphQL type ContractCommunity.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity struct {
	Typename *string                                                                           `json:"__typename"`
	Contract *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract `json:"contract"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity) GetTypename() *string {
	return v.Typename
}

// GetContract returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity.Contract, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity) GetContract() *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract {
	return v.Contract
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract includes the requested fields of the GraphQL type Contract.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract struct {
	ContractAddress *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress `json:"contractAddress"`
	Chain           *Chain                                                                                                       `json:"chain"`
	ProfileImageURL *string                                                                                                      `json:"profileImageURL"`
}

// GetContractAddress returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract.ContractAddress, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract) GetContractAddress() *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress {
	return v.ContractAddress
}

// GetChain returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract.Chain, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract) GetChain() *Chain {
	return v.Chain
}

// GetProfileImageURL returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract.ProfileImageURL, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract) GetProfileImageURL() *string {
	return v.ProfileImageURL
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress includes the requested fields of the GraphQL type ChainAddress.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress struct {
	Address *persist.Address `json:"address"`
	Chain   *Chain           `json:"chain"`
}

// GetAddress returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress.Address, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress) GetAddress() *persist.Address {
	return v.Address
}

// GetChain returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress.Chain, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress) GetChain() *Chain {
	return v.Chain
}

// communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection includes the requested fields of the GraphQL type TokensConnection.
type communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection struct {
	Edges []*communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge `json:"edges"`
}

// GetEdges returns communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection.Edges, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection) GetEdges() []*communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge {
	return v.Edges
}

// communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge includes the requested fields of the GraphQL type TokenEdge.
type communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge struct {
	Node *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken `json:"node"`
}

// GetNode returns communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge.Node, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge) GetNode() *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken {
	return v.Node
}

// communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken includes the requested fields of the GraphQL type Token.
type communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken struct {
	tokenFrag `json:"-"`
}

// GetDbid returns communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken.Dbid, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken) GetDbid() persist.DBID {
	return v.tokenFrag.Dbid
}

// GetDefinition returns communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken.Definition, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken) GetDefinition() tokenFragDefinitionTokenDefinition {
	return v.tokenFrag.Definition
}

func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.tokenFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken struct {
	Dbid persist.DBID `json:"dbid"`

	Definition tokenFragDefinitionTokenDefinition `json:"definition"`
}

func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken

	retval.Dbid = v.tokenFrag.Dbid
	retval.Definition = v.tokenFrag.Definition
	return &retval, nil
}

// communityDigestEntityQueryCommunityByIdErrCommunityNotFound includes the requested fields of the GraphQL type ErrCommunityNotFound.
type communityDigestEntityQueryCommunityByIdErrCommunityNotFound struct {
	Typename                      *string `json:"__typename"`
	errorFragErrCommunityNotFound `json:"-"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdErrCommunityNotFound.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) GetTypename() *string {
	return v.Typename
}

// GetMessage returns communityDigestEntityQueryCommunityByIdErrCommunityNotFound.Message, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) GetMessage() string {
	return v.errorFragErrCommunityNotFound.Message
}

func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdErrCommunityNotFound
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdErrCommunityNotFound = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.errorFragErrCommunityNotFound)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdErrCommunityNotFound struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdErrCommunityNotFound, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdErrCommunityNotFound

	retval.Typename = v.Typename
	retval.Message = v.errorFragErrCommunityNotFound.Message
	return &retval, nil
}

// communityDigestEntityQueryCommunityByIdErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type communityDigestEntityQueryCommunityByIdErrInvalidInput struct {
	Typename                 *string `json:"__typename"`
	errorFragErrInvalidInput `json:"-"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns communityDigestEntityQueryCommunityByIdErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) GetMessage() string {
	return v.errorFragErrInvalidInput.Message
}

func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdErrInvalidInput
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdErrInvalidInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.errorFragErrInvalidInput)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdErrInvalidInput struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdErrInvalidInput, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdErrInvalidInput

	retval.Typename = v.Typename
	retval.Message = v.errorFragErrInvalidInput.Message
	return &retval, nil
}

// communityDigestEntityQueryResponse is returned by communityDigestEntityQuery on success.
type communityDigestEntityQueryResponse struct {
	CommunityById *communityDigestEntityQueryCommunityByIdCommunityByIdOrError `json:"-"`
}

// GetCommunityById returns communityDigestEntityQueryResponse.CommunityById, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryResponse) GetCommunityById() *communityDigestEntityQueryCommunityByIdCommunityByIdOrError {
	return v.CommunityById
}

func (v *communityDigestEntityQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryResponse
		CommunityById json.RawMessage `json:"communityById"`
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CommunityById
		src := firstPass.CommunityById
		if len(src) != 0 && string(src) != "null" {
			*dst = new(communityDigestEntityQueryCommunityByIdCommunityByIdOrError)
			err = __unmarshalcommunityDigestEntityQueryCommunityByIdCommunityByIdOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal communityDigestEntityQueryResponse.CommunityById: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryResponse struct {
	CommunityById json.RawMessage `json:"communityById"`
}

func (v *communityDigestEntityQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryResponse) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryResponse, error) {
	var retval __premarshalcommunityDigestEntityQueryResponse

	{

		dst := &retval.CommunityById
		src := v.CommunityById
		if src != nil {
			var err error
			*dst, err = __marshalcommunityDigestEntityQueryCommunityByIdCommunityByIdOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal communityDigestEntityQueryResponse.CommunityById: %w", err)
			}
		}
	}
	return &retval, nil
}

// definitionFrag includes the GraphQL fields of TokenDefinition requested by the fragment definitionFrag.
type definitionFrag struct {
	Name        *string                          `json:"name"`
	Description *string                          `json:"description"`
	Media       *definitionFragMediaMediaSubtype `json:"-"`
}

// GetName returns definitionFrag.Name, and is useful for accessing the field via an interface.
func (v *definitionFrag) GetName() *string { return v.Name }

// GetDescription returns definitionFrag.Description, and is useful for accessing the field via an interface.
func (v *definitionFrag) GetDescription() *string { return v.Description }

// GetMedia returns definitionFrag.Media, and is useful for accessing the field via an interface.
func (v *definitionFrag) GetMedia() *definitionFragMediaMediaSubtype { return v.Media }

func (v *definitionFrag) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFrag
		Media json.RawMessage `json:"media"`
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFrag = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Media
		src := firstPass.Media
		if len(src) != 0 && string(src) != "null" {
			*dst = new(definitionFragMediaMediaSubtype)
			err = __unmarshaldefinitionFragMediaMediaSubtype(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal definitionFrag.Media: %w", err)
			}
		}
	}
	return nil
}

type __premarshaldefinitionFrag struct {
	Name *string `json:"name"`

	Description *string `json:"description"`

	Media json.RawMessage `json:"media"`
}

func (v *definitionFrag) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFrag) __premarshalJSON() (*__premarshaldefinitionFrag, error) {
	var retval __premarshaldefinitionFrag

	retval.Name = v.Name
	retval.Description = v.Description
	{

		dst := &retval.Media
		src := v.Media
		if src != nil {
			var err error
			*dst, err = __marshaldefinitionFragMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal definitionFrag.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// definitionFragMediaAudioMedia includes the requested fields of the GraphQL type AudioMedia.
type definitionFragMediaAudioMedia struct {
	Typename            *string `json:"__typename"`
	mediaFragAudioMedia `json:"-"`
}

// GetTypename returns definitionFragMediaAudioMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaAudioMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaAudioMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaAudioMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragAudioMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaAudioMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaAudioMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragAudioMedia.FallbackMedia
}

func (v *definitionFragMediaAudioMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaAudioMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaAudioMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragAudioMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaAudioMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaAudioMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaAudioMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaAudioMedia, error) {
	var retval __premarshaldefinitionFragMediaAudioMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragAudioMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragAudioMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaGIFMedia includes the requested fields of the GraphQL type GIFMedia.
type definitionFragMediaGIFMedia struct {
	Typename          *string `json:"__typename"`
	mediaFragGIFMedia `json:"-"`
}

// GetTypename returns definitionFragMediaGIFMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGIFMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaGIFMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGIFMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragGIFMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaGIFMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGIFMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragGIFMedia.FallbackMedia
}

func (v *definitionFragMediaGIFMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaGIFMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaGIFMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragGIFMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaGIFMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaGIFMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaGIFMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaGIFMedia, error) {
	var retval __premarshaldefinitionFragMediaGIFMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragGIFMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragGIFMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaGltfMedia includes the requested fields of the GraphQL type GltfMedia.
type definitionFragMediaGltfMedia struct {
	Typename           *string `json:"__typename"`
	mediaFragGltfMedia `json:"-"`
}

// GetTypename returns definitionFragMediaGltfMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGltfMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaGltfMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGltfMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragGltfMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaGltfMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGltfMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragGltfMedia.FallbackMedia
}

func (v *definitionFragMediaGltfMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaGltfMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaGltfMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragGltfMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaGltfMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaGltfMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaGltfMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaGltfMedia, error) {
	var retval __premarshaldefinitionFragMediaGltfMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragGltfMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragGltfMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaHtmlMedia includes the requested fields of the GraphQL type HtmlMedia.
type definitionFragMediaHtmlMedia struct {
	Typename           *string `json:"__typename"`
	mediaFragHtmlMedia `json:"-"`
}

// GetTypename returns definitionFragMediaHtmlMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaHtmlMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaHtmlMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaHtmlMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragHtmlMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaHtmlMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaHtmlMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragHtmlMedia.FallbackMedia
}

func (v *definitionFragMediaHtmlMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaHtmlMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaHtmlMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragHtmlMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaHtmlMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaHtmlMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaHtmlMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaHtmlMedia, error) {
	var retval __premarshaldefinitionFragMediaHtmlMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragHtmlMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragHtmlMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaImageMedia includes the requested fields of the GraphQL type ImageMedia.
type definitionFragMediaImageMedia struct {
	Typename            *string `json:"__typename"`
	mediaFragImageMedia `json:"-"`
}

// GetTypename returns definitionFragMediaImageMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaImageMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaImageMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaImageMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragImageMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaImageMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaImageMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragImageMedia.FallbackMedia
}

func (v *definitionFragMediaImageMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaImageMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaImageMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragImageMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaImageMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaImageMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaImageMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaImageMedia, error) {
	var retval __premarshaldefinitionFragMediaImageMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragImageMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragImageMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaInvalidMedia includes the requested fields of the GraphQL type InvalidMedia.
type definitionFragMediaInvalidMedia struct {
	Typename              *string `json:"__typename"`
	mediaFragInvalidMedia `json:"-"`
}

// GetTypename returns definitionFragMediaInvalidMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaInvalidMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaInvalidMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaInvalidMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragInvalidMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaInvalidMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaInvalidMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragInvalidMedia.FallbackMedia
}

func (v *definitionFragMediaInvalidMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaInvalidMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaInvalidMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragInvalidMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaInvalidMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaInvalidMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaInvalidMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaInvalidMedia, error) {
	var retval __premarshaldefinitionFragMediaInvalidMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragInvalidMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragInvalidMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaJsonMedia includes the requested fields of the GraphQL type JsonMedia.
type definitionFragMediaJsonMedia struct {
	Typename           *string `json:"__typename"`
	mediaFragJsonMedia `json:"-"`
}

// GetTypename returns definitionFragMediaJsonMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaJsonMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaJsonMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaJsonMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragJsonMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaJsonMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaJsonMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragJsonMedia.FallbackMedia
}

func (v *definitionFragMediaJsonMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaJsonMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaJsonMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragJsonMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaJsonMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaJsonMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaJsonMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaJsonMedia, error) {
	var retval __premarshaldefinitionFragMediaJsonMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragJsonMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragJsonMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaMediaSubtype includes the requested fields of the GraphQL interface MediaSubtype.
//
// definitionFragMediaMediaSubtype is implemented by the following types:
// definitionFragMediaAudioMedia
// definitionFragMediaGIFMedia
// definitionFragMediaGltfMedia
// definitionFragMediaHtmlMedia
// definitionFragMediaImageMedia
// definitionFragMediaInvalidMedia
// definitionFragMediaJsonMedia
// definitionFragMediaPdfMedia
// definitionFragMediaSyncingMedia
// definitionFragMediaTextMedia
// definitionFragMediaUnknownMedia
// definitionFragMediaVideoMedia
type definitionFragMediaMediaSubtype interface {
	implementsGraphQLInterfacedefinitionFragMediaMediaSubtype()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *definitionFragMediaAudioMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {}
func (v *definitionFragMediaGIFMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype()   {}
func (v *definitionFragMediaGltfMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype()  {}
func (v *definitionFragMediaHtmlMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype()  {}
func (v *definitionFragMediaImageMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {}
func (v *definitionFragMediaInvalidMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {
}
func (v *definitionFragMediaJsonMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {}
func (v *definitionFragMediaPdfMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype()  {}
func (v *definitionFragMediaSyncingMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {
}
func (v *definitionFragMediaTextMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {}
func (v *definitionFragMediaUnknownMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {
}
func (v *definitionFragMediaVideoMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {}

func __unmarshaldefinitionFragMediaMediaSubtype(b []byte, v *definitionFragMediaMediaSubtype) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AudioMedia":
		*v = new(definitionFragMediaAudioMedia)
		return json.Unmarshal(b, *v)
	case "GIFMedia":
		*v = new(definitionFragMediaGIFMedia)
		return json.Unmarshal(b, *v)
	case "GltfMedia":
		*v = new(definitionFragMediaGltfMedia)
		return json.Unmarshal(b, *v)
	case "HtmlMedia":
		*v = new(definitionFragMediaHtmlMedia)
		return json.Unmarshal(b, *v)
	case "ImageMedia":
		*v = new(definitionFragMediaImageMedia)
		return json.Unmarshal(b, *v)
	case "InvalidMedia":
		*v = new(definitionFragMediaInvalidMedia)
		return json.Unmarshal(b, *v)
	case "JsonMedia":
		*v = new(definitionFragMediaJsonMedia)
		return json.Unmarshal(b, *v)
	case "PdfMedia":
		*v = new(definitionFragMediaPdfMedia)
		return json.Unmarshal(b, *v)
	case "SyncingMedia":
		*v = new(definitionFragMediaSyncingMedia)
		return json.Unmarshal(b, *v)
	case "TextMedia":
		*v = new(definitionFragMediaTextMedia)
		return json.Unmarshal(b, *v)
	case "UnknownMedia":
		*v = new(definitionFragMediaUnknownMedia)
		return json.Unmarshal(b, *v)
	case "VideoMedia":
		*v = new(definitionFragMediaVideoMedia)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MediaSubtype.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for definitionFragMediaMediaSubtype: "%v"`, tn.TypeName)
	}
}

func __marshaldefinitionFragMediaMediaSubtype(v *definitionFragMediaMediaSubtype) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *definitionFragMediaAudioMedia:
		typename = "AudioMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaAudioMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaGIFMedia:
		typename = "GIFMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaGIFMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaGltfMedia:
		typename = "GltfMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaGltfMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaHtmlMedia:
		typename = "HtmlMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaHtmlMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaImageMedia:
		typename = "ImageMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaImageMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaInvalidMedia:
		typename = "InvalidMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaInvalidMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaJsonMedia:
		typename = "JsonMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaJsonMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaPdfMedia:
		typename = "PdfMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaPdfMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaSyncingMedia:
		typename = "SyncingMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaSyncingMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaTextMedia:
		typename = "TextMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaTextMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaUnknownMedia:
		typename = "UnknownMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaUnknownMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaVideoMedia:
		typename = "VideoMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaVideoMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for definitionFragMediaMediaSubtype: "%T"`, v)
	}
}

// definitionFragMediaPdfMedia includes the requested fields of the GraphQL type PdfMedia.
type definitionFragMediaPdfMedia struct {
	Typename          *string `json:"__typename"`
	mediaFragPdfMedia `json:"-"`
}

// GetTypename returns definitionFragMediaPdfMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaPdfMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaPdfMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaPdfMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragPdfMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaPdfMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaPdfMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragPdfMedia.FallbackMedia
}

func (v *definitionFragMediaPdfMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaPdfMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaPdfMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragPdfMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaPdfMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaPdfMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaPdfMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaPdfMedia, error) {
	var retval __premarshaldefinitionFragMediaPdfMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragPdfMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragPdfMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaSyncingMedia includes the requested fields of the GraphQL type SyncingMedia.
type definitionFragMediaSyncingMedia struct {
	Typename              *string `json:"__typename"`
	mediaFragSyncingMedia `json:"-"`
}

// GetTypename returns definitionFragMediaSyncingMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaSyncingMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaSyncingMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaSyncingMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragSyncingMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaSyncingMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaSyncingMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragSyncingMedia.FallbackMedia
}

func (v *definitionFragMediaSyncingMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaSyncingMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaSyncingMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragSyncingMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaSyncingMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaSyncingMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaSyncingMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaSyncingMedia, error) {
	var retval __premarshaldefinitionFragMediaSyncingMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragSyncingMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragSyncingMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaTextMedia includes the requested fields of the GraphQL type TextMedia.
type definitionFragMediaTextMedia struct {
	Typename           *string `json:"__typename"`
	mediaFragTextMedia `json:"-"`
}

// GetTypename returns definitionFragMediaTextMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaTextMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaTextMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaTextMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragTextMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaTextMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaTextMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragTextMedia.FallbackMedia
}

func (v *definitionFragMediaTextMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaTextMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaTextMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragTextMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaTextMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaTextMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaTextMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaTextMedia, error) {
	var retval __premarshaldefinitionFragMediaTextMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragTextMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragTextMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaUnknownMedia includes the requested fields of the GraphQL type UnknownMedia.
type definitionFragMediaUnknownMedia struct {
	Typename              *string `json:"__typename"`
	mediaFragUnknownMedia `json:"-"`
}

// GetTypename returns definitionFragMediaUnknownMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaUnknownMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaUnknownMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaUnknownMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragUnknownMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaUnknownMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaUnknownMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragUnknownMedia.FallbackMedia
}

func (v *definitionFragMediaUnknownMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaUnknownMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaUnknownMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragUnknownMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaUnknownMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaUnknownMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaUnknownMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaUnknownMedia, error) {
	var retval __premarshaldefinitionFragMediaUnknownMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragUnknownMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragUnknownMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaVideoMedia includes the requested fields of the GraphQL type VideoMedia.
type definitionFragMediaVideoMedia struct {
	Typename            *string `json:"__typename"`
	mediaFragVideoMedia `json:"-"`
}

// GetTypename returns definitionFragMediaVideoMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaVideoMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaVideoMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaVideoMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.mediaFragVideoMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaVideoMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaVideoMedia) GetFallbackMedia() *mediaFragFallbackMedia {
	return v.mediaFragVideoMedia.FallbackMedia
}

func (v *definitionFragMediaVideoMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaVideoMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaVideoMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragVideoMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaVideoMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaVideoMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaVideoMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaVideoMedia, error) {
	var retval __premarshaldefinitionFragMediaVideoMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragVideoMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragVideoMedia.FallbackMedia
	return &retval, nil
}

// errorFrag includes the GraphQL fields of Error requested by the fragment errorFrag.
//
// errorFrag is implemented by the following types:
// errorFragErrAddressNotOwnedByUser
// errorFragErrAddressOwnedByUser
// errorFragErrAdmireAlreadyExists
// errorFragErrAdmireNotFound
// errorFragErrAuthenticationFailed
// errorFragErrCollectionNotFound
// errorFragErrCommentNotFound
// errorFragErrCommunityNotFound
// errorFragErrDoesNotOwnRequiredToken
// errorFragErrEmailAlreadyUsed
// errorFragErrEmailUnverified
// errorFragErrFeedEventNotFound
// errorFragErrGalleryNotFound
// errorFragErrHighlightChainNotSupported
// errorFragErrHighlightClaimAlreadyMinted
// errorFragErrHighlightClaimInProgress
// errorFragErrHighlightMintUnavailable
// errorFragErrHighlightTxnFailed
// errorFragErrInvalidInput
// errorFragErrInvalidToken
// errorFragErrNeedsToReconnectSocial
// errorFragErrNoAvatarRecordSet
// errorFragErrNoCookie
// errorFragErrNotAuthorized
// errorFragErrPostNotFound
// errorFragErrPushTokenBelongsToAnotherUser
// errorFragErrSessionInvalidated
// errorFragErrSyncFailed
// errorFragErrTokenNotFound
// errorFragErrUnknownAction
// errorFragErrUserAlreadyExists
// errorFragErrUserNotFound
// errorFragErrUsernameNotAvailable
type errorFrag interface {
	implementsGraphQLInterfaceerrorFrag()
	// GetMessage returns the interface-field "message" from its implementation.
	GetMessage() string
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *errorFragErrAddressNotOwnedByUser) implementsGraphQLInterfaceerrorFrag()         {}
func (v *errorFragErrAddressOwnedByUser) implementsGraphQLInterfaceerrorFrag()            {}
func (v *errorFragErrAdmireAlreadyExists) implementsGraphQLInterfaceerrorFrag()           {}
func (v *errorFragErrAdmireNotFound) implementsGraphQLInterfaceerrorFrag()                {}
func (v *errorFragErrAuthenticationFailed) implementsGraphQLInterfaceerrorFrag()          {}
func (v *errorFragErrCollectionNotFound) implementsGraphQLInterfaceerrorFrag()            {}
func (v *errorFragErrCommentNotFound) implementsGraphQLInterfaceerrorFrag()               {}
func (v *errorFragErrCommunityNotFound) implementsGraphQLInterfaceerrorFrag()             {}
func (v *errorFragErrDoesNotOwnRequiredToken) implementsGraphQLInterfaceerrorFrag()       {}
func (v *errorFragErrEmailAlreadyUsed) implementsGraphQLInterfaceerrorFrag()              {}
func (v *errorFragErrEmailUnverified) implementsGraphQLInterfaceerrorFrag()               {}
func (v *errorFragErrFeedEventNotFound) implementsGraphQLInterfaceerrorFrag()             {}
func (v *errorFragErrGalleryNotFound) implementsGraphQLInterfaceerrorFrag()               {}
func (v *errorFragErrHighlightChainNotSupported) implementsGraphQLInterfaceerrorFrag()    {}
func (v *errorFragErrHighlightClaimAlreadyMinted) implementsGraphQLInterfaceerrorFrag()   {}
func (v *errorFragErrHighlightClaimInProgress) implementsGraphQLInterfaceerrorFrag()      {}
func (v *errorFragErrHighlightMintUnavailable) implementsGraphQLInterfaceerrorFrag()      {}
func (v *errorFragErrHighlightTxnFailed) implementsGraphQLInterfaceerrorFrag()            {}
func (v *errorFragErrInvalidInput) implementsGraphQLInterfaceerrorFrag()                  {}
func (v *errorFragErrInvalidToken) implementsGraphQLInterfaceerrorFrag()                  {}
func (v *errorFragErrNeedsToReconnectSocial) implementsGraphQLInterfaceerrorFrag()        {}
func (v *errorFragErrNoAvatarRecordSet) implementsGraphQLInterfaceerrorFrag()             {}
func (v *errorFragErrNoCookie) implementsGraphQLInterfaceerrorFrag()                      {}
func (v *errorFragErrNotAuthorized) implementsGraphQLInterfaceerrorFrag()                 {}
func (v *errorFragErrPostNotFound) implementsGraphQLInterfaceerrorFrag()                  {}
func (v *errorFragErrPushTokenBelongsToAnotherUser) implementsGraphQLInterfaceerrorFrag() {}
func (v *errorFragErrSessionInvalidated) implementsGraphQLInterfaceerrorFrag()            {}
func (v *errorFragErrSyncFailed) implementsGraphQLInterfaceerrorFrag()                    {}
func (v *errorFragErrTokenNotFound) implementsGraphQLInterfaceerrorFrag()                 {}
func (v *errorFragErrUnknownAction) implementsGraphQLInterfaceerrorFrag()                 {}
func (v *errorFragErrUserAlreadyExists) implementsGraphQLInterfaceerrorFrag()             {}
func (v *errorFragErrUserNotFound) implementsGraphQLInterfaceerrorFrag()                  {}
func (v *errorFragErrUsernameNotAvailable) implementsGraphQLInterfaceerrorFrag()          {}

func __unmarshalerrorFrag(b []byte, v *errorFrag) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrAddressNotOwnedByUser":
		*v = new(errorFragErrAddressNotOwnedByUser)
		return json.Unmarshal(b, *v)
	case "ErrAddressOwnedByUser":
		*v = new(errorFragErrAddressOwnedByUser)
		return json.Unmarshal(b, *v)
	case "ErrAdmireAlreadyExists":
		*v = new(errorFragErrAdmireAlreadyExists)
		return json.Unmarshal(b, *v)
	case "ErrAdmireNotFound":
		*v = new(errorFragErrAdmireNotFound)
		return json.Unmarshal(b, *v)
	case "ErrAuthenticationFailed":
		*v = new(errorFragErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ErrCollectionNotFound":
		*v = new(errorFragErrCollectionNotFound)
		return json.Unmarshal(b, *v)
	case "ErrCommentNotFound":
		*v = new(errorFragErrCommentNotFound)
		return json.Unmarshal(b, *v)
	case "ErrCommunityNotFound":
		*v = new(errorFragErrCommunityNotFound)
		return json.Unmarshal(b, *v)
	case "ErrDoesNotOwnRequiredToken":
		*v = new(errorFragErrDoesNotOwnRequiredToken)
		return json.Unmarshal(b, *v)
	case "ErrEmailAlreadyUsed":
		*v = new(errorFragErrEmailAlreadyUsed)
		return json.Unmarshal(b, *v)
	case "ErrEmailUnverified":
		*v = new(errorFragErrEmailUnverified)
		return json.Unmarshal(b, *v)
	case "ErrFeedEventNotFound":
		*v = new(errorFragErrFeedEventNotFound)
		return json.Unmarshal(b, *v)
	case "ErrGalleryNotFound":
		*v = new(errorFragErrGalleryNotFound)
		return json.Unmarshal(b, *v)
	case "ErrHighlightChainNotSupported":
		*v = new(errorFragErrHighlightChainNotSupported)
		return json.Unmarshal(b, *v)
	case "ErrHighlightClaimAlreadyMinted":
		*v = new(errorFragErrHighlightClaimAlreadyMinted)
		return json.Unmarshal(b, *v)
	case "ErrHighlightClaimInProgress":
		*v = new(errorFragErrHighlightClaimInProgress)
		return json.Unmarshal(b, *v)
	case "ErrHighlightMintUnavailable":
		*v = new(errorFragErrHighlightMintUnavailable)
		return json.Unmarshal(b, *v)
	case "ErrHighlightTxnFailed":
		*v = new(errorFragErrHighlightTxnFailed)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(errorFragErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrInvalidToken":
		*v = new(errorFragErrInvalidToken)
		return json.Unmarshal(b, *v)
	case "ErrNeedsToReconnectSocial":
		*v = new(errorFragErrNeedsToReconnectSocial)
		return json.Unmarshal(b, *v)
	case "ErrNoAvatarRecordSet":
		*v = new(errorFragErrNoAvatarRecordSet)
		return json.Unmarshal(b, *v)
	case "ErrNoCookie":
		*v = new(errorFragErrNoCookie)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(errorFragErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "ErrPostNotFound":
		*v = new(errorFragErrPostNotFound)
		return json.Unmarshal(b, *v)
	case "ErrPushTokenBelongsToAnotherUser":
		*v = new(errorFragErrPushTokenBelongsToAnotherUser)
		return json.Unmarshal(b, *v)
	case "ErrSessionInvalidated":
		*v = new(errorFragErrSessionInvalidated)
		return json.Unmarshal(b, *v)
	case "ErrSyncFailed":
		*v = new(errorFragErrSyncFailed)
		return json.Unmarshal(b, *v)
	case "ErrTokenNotFound":
		*v = new(errorFragErrTokenNotFound)
		return json.Unmarshal(b, *v)
	case "ErrUnknownAction":
		*v = new(errorFragErrUnknownAction)
		return json.Unmarshal(b, *v)
	case "ErrUserAlreadyExists":
		*v = new(errorFragErrUserAlreadyExists)
		return json.Unmarshal(b, *v)
	case "ErrUserNotFound":
		*v = new(errorFragErrUserNotFound)
		return json.Unmarshal(b, *v)
	case "ErrUsernameNotAvailable":
		*v = new(errorFragErrUsernameNotAvailable)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Error.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for errorFrag: "%v"`, tn.TypeName)
	}
}

func __marshalerrorFrag(v *errorFrag) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *errorFragErrAddressNotOwnedByUser:
		typename = "ErrAddressNotOwnedByUser"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrAddressNotOwnedByUser
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrAddressOwnedByUser:
		typename = "ErrAddressOwnedByUser"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrAddressOwnedByUser
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrAdmireAlreadyExists:
		typename = "ErrAdmireAlreadyExists"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrAdmireAlreadyExists
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrAdmireNotFound:
		typename = "ErrAdmireNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrAdmireNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrCollectionNotFound:
		typename = "ErrCollectionNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrCollectionNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrCommentNotFound:
		typename = "ErrCommentNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrCommentNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrCommunityNotFound:
		typename = "ErrCommunityNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrCommunityNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrDoesNotOwnRequiredToken:
		typename = "ErrDoesNotOwnRequiredToken"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrDoesNotOwnRequiredToken
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrEmailAlreadyUsed:
		typename = "ErrEmailAlreadyUsed"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrEmailAlreadyUsed
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrEmailUnverified:
		typename = "ErrEmailUnverified"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrEmailUnverified
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrFeedEventNotFound:
		typename = "ErrFeedEventNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrFeedEventNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrGalleryNotFound:
		typename = "ErrGalleryNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrGalleryNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrHighlightChainNotSupported:
		typename = "ErrHighlightChainNotSupported"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrHighlightChainNotSupported
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrHighlightClaimAlreadyMinted:
		typename = "ErrHighlightClaimAlreadyMinted"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrHighlightClaimAlreadyMinted
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrHighlightClaimInProgress:
		typename = "ErrHighlightClaimInProgress"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrHighlightClaimInProgress
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrHighlightMintUnavailable:
		typename = "ErrHighlightMintUnavailable"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrHighlightMintUnavailable
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrHighlightTxnFailed:
		typename = "ErrHighlightTxnFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrHighlightTxnFailed
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrInvalidToken:
		typename = "ErrInvalidToken"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrInvalidToken
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrNeedsToReconnectSocial:
		typename = "ErrNeedsToReconnectSocial"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrNeedsToReconnectSocial
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrNoAvatarRecordSet:
		typename = "ErrNoAvatarRecordSet"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrNoAvatarRecordSet
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrNoCookie:
		typename = "ErrNoCookie"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrNoCookie
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrPostNotFound:
		typename = "ErrPostNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrPostNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrPushTokenBelongsToAnotherUser:
		typename = "ErrPushTokenBelongsToAnotherUser"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrPushTokenBelongsToAnotherUser
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrSessionInvalidated:
		typename = "ErrSessionInvalidated"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrSessionInvalidated
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrSyncFailed:
		typename = "ErrSyncFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrSyncFailed
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrTokenNotFound:
		typename = "ErrTokenNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrTokenNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrUnknownAction:
		typename = "ErrUnknownAction"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrUnknownAction
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrUserAlreadyExists:
		typename = "ErrUserAlreadyExists"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrUserAlreadyExists
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrUserNotFound:
		typename = "ErrUserNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrUserNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrUsernameNotAvailable:
		typename = "ErrUsernameNotAvailable"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrUsernameNotAvailable
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for errorFrag: "%T"`, v)
	}
}

// errorFrag includes the GraphQL fields of ErrAddressNotOwnedByUser requested by the fragment errorFrag.
type errorFragErrAddressNotOwnedByUser struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrAddressNotOwnedByUser.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrAddressNotOwnedByUser) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrAddressNotOwnedByUser.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrAddressNotOwnedByUser) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrAddressOwnedByUser requested by the fragment errorFrag.
type errorFragErrAddressOwnedByUser struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrAddressOwnedByUser.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrAddressOwnedByUser) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrAddressOwnedByUser.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrAddressOwnedByUser) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrAdmireAlreadyExists requested by the fragment errorFrag.
type errorFragErrAdmireAlreadyExists struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrAdmireAlreadyExists.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrAdmireAlreadyExists) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrAdmireAlreadyExists.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrAdmireAlreadyExists) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrAdmireNotFound requested by the fragment errorFrag.
type errorFragErrAdmireNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrAdmireNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrAdmireNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrAdmireNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrAdmireNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrAuthenticationFailed requested by the fragment errorFrag.
type errorFragErrAuthenticationFailed struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrAuthenticationFailed) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrAuthenticationFailed) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrCollectionNotFound requested by the fragment errorFrag.
type errorFragErrCollectionNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrCollectionNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrCollectionNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrCollectionNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrCollectionNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrCommentNotFound requested by the fragment errorFrag.
type errorFragErrCommentNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrCommentNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrCommentNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrCommentNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrCommentNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrCommunityNotFound requested by the fragment errorFrag.
type errorFragErrCommunityNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrCommunityNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrCommunityNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrCommunityNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrCommunityNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrDoesNotOwnRequiredToken requested by the fragment errorFrag.
type errorFragErrDoesNotOwnRequiredToken struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrDoesNotOwnRequiredToken.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrDoesNotOwnRequiredToken) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrDoesNotOwnRequiredToken.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrDoesNotOwnRequiredToken) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrEmailAlreadyUsed requested by the fragment errorFrag.
type errorFragErrEmailAlreadyUsed struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrEmailAlreadyUsed.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrEmailAlreadyUsed) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrEmailAlreadyUsed.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrEmailAlreadyUsed) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrEmailUnverified requested by the fragment errorFrag.
type errorFragErrEmailUnverified struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrEmailUnverified.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrEmailUnverified) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrEmailUnverified.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrEmailUnverified) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrFeedEventNotFound requested by the fragment errorFrag.
type errorFragErrFeedEventNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrFeedEventNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrFeedEventNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrFeedEventNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrFeedEventNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrGalleryNotFound requested by the fragment errorFrag.
type errorFragErrGalleryNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrGalleryNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrGalleryNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrGalleryNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrGalleryNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrHighlightChainNotSupported requested by the fragment errorFrag.
type errorFragErrHighlightChainNotSupported struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrHighlightChainNotSupported.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrHighlightChainNotSupported) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrHighlightChainNotSupported.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrHighlightChainNotSupported) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrHighlightClaimAlreadyMinted requested by the fragment errorFrag.
type errorFragErrHighlightClaimAlreadyMinted struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrHighlightClaimAlreadyMinted.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrHighlightClaimAlreadyMinted) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrHighlightClaimAlreadyMinted.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrHighlightClaimAlreadyMinted) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrHighlightClaimInProgress requested by the fragment errorFrag.
type errorFragErrHighlightClaimInProgress struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrHighlightClaimInProgress.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrHighlightClaimInProgress) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrHighlightClaimInProgress.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrHighlightClaimInProgress) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrHighlightMintUnavailable requested by the fragment errorFrag.
type errorFragErrHighlightMintUnavailable struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrHighlightMintUnavailable.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrHighlightMintUnavailable) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrHighlightMintUnavailable.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrHighlightMintUnavailable) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrHighlightTxnFailed requested by the fragment errorFrag.
type errorFragErrHighlightTxnFailed struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrHighlightTxnFailed.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrHighlightTxnFailed) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrHighlightTxnFailed.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrHighlightTxnFailed) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrInvalidInput requested by the fragment errorFrag.
type errorFragErrInvalidInput struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrInvalidInput) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrInvalidInput) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrInvalidToken requested by the fragment errorFrag.
type errorFragErrInvalidToken struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrInvalidToken.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrInvalidToken) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrInvalidToken.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrInvalidToken) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrNeedsToReconnectSocial requested by the fragment errorFrag.
type errorFragErrNeedsToReconnectSocial struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrNeedsToReconnectSocial.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrNeedsToReconnectSocial) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrNeedsToReconnectSocial.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrNeedsToReconnectSocial) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrNoAvatarRecordSet requested by the fragment errorFrag.
type errorFragErrNoAvatarRecordSet struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrNoAvatarRecordSet.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrNoAvatarRecordSet) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrNoAvatarRecordSet.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrNoAvatarRecordSet) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrNoCookie requested by the fragment errorFrag.
type errorFragErrNoCookie struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrNoCookie.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrNoCookie) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrNoCookie.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrNoCookie) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrNotAuthorized requested by the fragment errorFrag.
type errorFragErrNotAuthorized struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrNotAuthorized) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrNotAuthorized) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrPostNotFound requested by the fragment errorFrag.
type errorFragErrPostNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrPostNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrPostNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrPostNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrPostNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrPushTokenBelongsToAnotherUser requested by the fragment errorFrag.
type errorFragErrPushTokenBelongsToAnotherUser struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrPushTokenBelongsToAnotherUser.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrPushTokenBelongsToAnotherUser) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrPushTokenBelongsToAnotherUser.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrPushTokenBelongsToAnotherUser) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrSessionInvalidated requested by the fragment errorFrag.
type errorFragErrSessionInvalidated struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrSessionInvalidated.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrSessionInvalidated) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrSessionInvalidated.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrSessionInvalidated) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrSyncFailed requested by the fragment errorFrag.
type errorFragErrSyncFailed struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrSyncFailed.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrSyncFailed) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrSyncFailed.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrSyncFailed) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrTokenNotFound requested by the fragment errorFrag.
type errorFragErrTokenNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrTokenNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrTokenNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrTokenNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrTokenNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrUnknownAction requested by the fragment errorFrag.
type errorFragErrUnknownAction struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrUnknownAction.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrUnknownAction) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrUnknownAction.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrUnknownAction) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrUserAlreadyExists requested by the fragment errorFrag.
type errorFragErrUserAlreadyExists struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrUserAlreadyExists.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrUserAlreadyExists) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrUserAlreadyExists.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrUserAlreadyExists) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrUserNotFound requested by the fragment errorFrag.
type errorFragErrUserNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrUserNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrUserNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrUserNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrUserNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrUsernameNotAvailable requested by the fragment errorFrag.
type errorFragErrUsernameNotAvailable struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrUsernameNotAvailable.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrUsernameNotAvailable) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrUsernameNotAvailable.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrUsernameNotAvailable) GetTypename() *string { return v.Typename }

// galleryDigestEntityQueryGalleryByIdErrGalleryNotFound includes the requested fields of the GraphQL type ErrGalleryNotFound.
type galleryDigestEntityQueryGalleryByIdErrGalleryNotFound struct {
	Typename                    *string `json:"__typename"`
	errorFragErrGalleryNotFound `json:"-"`
}

// GetTypename returns galleryDigestEntityQueryGalleryByIdErrGalleryNotFound.Typename, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) GetTypename() *string {
	return v.Typename
}

// GetMessage returns galleryDigestEntityQueryGalleryByIdErrGalleryNotFound.Message, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) GetMessage() string {
	return v.errorFragErrGalleryNotFound.Message
}

func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*galleryDigestEntityQueryGalleryByIdErrGalleryNotFound
		graphql.NoUnmarshalJSON
	}
	firstPass.galleryDigestEntityQueryGalleryByIdErrGalleryNotFound = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.errorFragErrGalleryNotFound)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgalleryDigestEntityQueryGalleryByIdErrGalleryNotFound struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) __premarshalJSON() (*__premarshalgalleryDigestEntityQueryGalleryByIdErrGalleryNotFound, error) {
	var retval __premarshalgalleryDigestEntityQueryGalleryByIdErrGalleryNotFound

	retval.Typename = v.Typename
	retval.Message = v.errorFragErrGalleryNotFound.Message
	return &retval, nil
}

// galleryDigestEntityQueryGalleryByIdGallery includes the requested fields of the GraphQL type Gallery.
type galleryDigestEntityQueryGalleryByIdGallery struct {
	Typename      *string                                                                 `json:"__typename"`
	Dbid          persist.DBID                                                            `json:"dbid"`
	Owner         *galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser             `json:"owner"`
	Name          *string                                                                 `json:"name"`
	Description   *string                                                                 `json:"description"`
	TokenPreviews []*galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet `json:"tokenPreviews"`
}

// GetTypename returns galleryDigestEntityQueryGalleryByIdGallery.Typename, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetTypename() *string { return v.Typename }

// GetDbid returns galleryDigestEntityQueryGalleryByIdGallery.Dbid, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetDbid() persist.DBID { return v.Dbid }

// GetOwner returns galleryDigestEntityQueryGalleryByIdGallery.Owner, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetOwner() *galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser {
	return v.Owner
}

// GetName returns galleryDigestEntityQueryGalleryByIdGallery.Name, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetName() *string { return v.Name }

// GetDescription returns galleryDigestEntityQueryGalleryByIdGallery.Description, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetDescription() *string { return v.Description }

// GetTokenPreviews returns galleryDigestEntityQueryGalleryByIdGallery.TokenPreviews, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetTokenPreviews() []*galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet {
	return v.TokenPreviews
}

// galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError includes the requested fields of the GraphQL interface GalleryByIdPayloadOrError.
//
// galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError is implemented by the following types:
// galleryDigestEntityQueryGalleryByIdErrGalleryNotFound
// galleryDigestEntityQueryGalleryByIdGallery
type galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError interface {
	implementsGraphQLInterfacegalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) implementsGraphQLInterfacegalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError() {
}
func (v *galleryDigestEntityQueryGalleryByIdGallery) implementsGraphQLInterfacegalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError() {
}

func __unmarshalgalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError(b []byte, v *galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrGalleryNotFound":
		*v = new(galleryDigestEntityQueryGalleryByIdErrGalleryNotFound)
		return json.Unmarshal(b, *v)
	case "Gallery":
		*v = new(galleryDigestEntityQueryGalleryByIdGallery)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GalleryByIdPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalgalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError(v *galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound:
		typename = "ErrGalleryNotFound"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalgalleryDigestEntityQueryGalleryByIdErrGalleryNotFound
		}{typename, premarshaled}
		return json.Marshal(result)
	case *galleryDigestEntityQueryGalleryByIdGallery:
		typename = "Gallery"

		result := struct {
			TypeName string `json:"__typename"`
			*galleryDigestEntityQueryGalleryByIdGallery
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError: "%T"`, v)
	}
}

// galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser struct {
	userFrag `json:"-"`
}

// GetUsername returns galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser) GetUsername() *string {
	return v.userFrag.Username
}

// GetProfileImage returns galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser.ProfileImage, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser) GetProfileImage() *userFragProfileImage {
	return v.userFrag.ProfileImage
}

func (v *galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser
		graphql.NoUnmarshalJSON
	}
	firstPass.galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.userFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgalleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser struct {
	Username *string `json:"username"`

	ProfileImage json.RawMessage `json:"profileImage"`
}

func (v *galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser) __premarshalJSON() (*__premarshalgalleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser, error) {
	var retval __premarshalgalleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser

	retval.Username = v.userFrag.Username
	{

		dst := &retval.ProfileImage
		src := v.userFrag.ProfileImage
		if src != nil {
			var err error
			*dst, err = __marshaluserFragProfileImage(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser.userFrag.ProfileImage: %w", err)
			}
		}
	}
	return &retval, nil
}

// galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet includes the requested fields of the GraphQL type PreviewURLSet.
type galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet struct {
	Small *string `json:"small"`
}

// GetSmall returns galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet.Small, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet) GetSmall() *string {
	return v.Small
}

// galleryDigestEntityQueryResponse is returned by galleryDigestEntityQuery on success.
type galleryDigestEntityQueryResponse struct {
	GalleryById *galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError `json:"-"`
}

// GetGalleryById returns galleryDigestEntityQueryResponse.GalleryById, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryResponse) GetGalleryById() *galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError {
	return v.GalleryById
}

func (v *galleryDigestEntityQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*galleryDigestEntityQueryResponse
		GalleryById json.RawMessage `json:"galleryById"`
		graphql.NoUnmarshalJSON
	}
	firstPass.galleryDigestEntityQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GalleryById
		src := firstPass.GalleryById
		if len(src) != 0 && string(src) != "null" {
			*dst = new(galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError)
			err = __unmarshalgalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal galleryDigestEntityQueryResponse.GalleryById: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgalleryDigestEntityQueryResponse struct {
	GalleryById json.RawMessage `json:"galleryById"`
}

func (v *galleryDigestEntityQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *galleryDigestEntityQueryResponse) __premarshalJSON() (*__premarshalgalleryDigestEntityQueryResponse, error) {
	var retval __premarshalgalleryDigestEntityQueryResponse

	{

		dst := &retval.GalleryById
		src := v.GalleryById
		if src != nil {
			var err error
			*dst, err = __marshalgalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal galleryDigestEntityQueryResponse.GalleryById: %w", err)
			}
		}
	}
	return &retval, nil
}

// mediaFrag includes the GraphQL fields of Media requested by the fragment mediaFrag.
//
// mediaFrag is implemented by the following types:
// mediaFragAudioMedia
// mediaFragGIFMedia
// mediaFragGltfMedia
// mediaFragHtmlMedia
// mediaFragImageMedia
// mediaFragInvalidMedia
// mediaFragJsonMedia
// mediaFragPdfMedia
// mediaFragSyncingMedia
// mediaFragTextMedia
// mediaFragUnknownMedia
// mediaFragVideoMedia
type mediaFrag interface {
	implementsGraphQLInterfacemediaFrag()
	// GetPreviewURLs returns the interface-field "previewURLs" from its implementation.
	GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet
	// GetFallbackMedia returns the interface-field "fallbackMedia" from its implementation.
	GetFallbackMedia() *mediaFragFallbackMedia
}

func (v *mediaFragAudioMedia) implementsGraphQLInterfacemediaFrag()   {}
func (v *mediaFragGIFMedia) implementsGraphQLInterfacemediaFrag()     {}
func (v *mediaFragGltfMedia) implementsGraphQLInterfacemediaFrag()    {}
func (v *mediaFragHtmlMedia) implementsGraphQLInterfacemediaFrag()    {}
func (v *mediaFragImageMedia) implementsGraphQLInterfacemediaFrag()   {}
func (v *mediaFragInvalidMedia) implementsGraphQLInterfacemediaFrag() {}
func (v *mediaFragJsonMedia) implementsGraphQLInterfacemediaFrag()    {}
func (v *mediaFragPdfMedia) implementsGraphQLInterfacemediaFrag()     {}
func (v *mediaFragSyncingMedia) implementsGraphQLInterfacemediaFrag() {}
func (v *mediaFragTextMedia) implementsGraphQLInterfacemediaFrag()    {}
func (v *mediaFragUnknownMedia) implementsGraphQLInterfacemediaFrag() {}
func (v *mediaFragVideoMedia) implementsGraphQLInterfacemediaFrag()   {}

func __unmarshalmediaFrag(b []byte, v *mediaFrag) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AudioMedia":
		*v = new(mediaFragAudioMedia)
		return json.Unmarshal(b, *v)
	case "GIFMedia":
		*v = new(mediaFragGIFMedia)
		return json.Unmarshal(b, *v)
	case "GltfMedia":
		*v = new(mediaFragGltfMedia)
		return json.Unmarshal(b, *v)
	case "HtmlMedia":
		*v = new(mediaFragHtmlMedia)
		return json.Unmarshal(b, *v)
	case "ImageMedia":
		*v = new(mediaFragImageMedia)
		return json.Unmarshal(b, *v)
	case "InvalidMedia":
		*v = new(mediaFragInvalidMedia)
		return json.Unmarshal(b, *v)
	case "JsonMedia":
		*v = new(mediaFragJsonMedia)
		return json.Unmarshal(b, *v)
	case "PdfMedia":
		*v = new(mediaFragPdfMedia)
		return json.Unmarshal(b, *v)
	case "SyncingMedia":
		*v = new(mediaFragSyncingMedia)
		return json.Unmarshal(b, *v)
	case "TextMedia":
		*v = new(mediaFragTextMedia)
		return json.Unmarshal(b, *v)
	case "UnknownMedia":
		*v = new(mediaFragUnknownMedia)
		return json.Unmarshal(b, *v)
	case "VideoMedia":
		*v = new(mediaFragVideoMedia)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Media.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for mediaFrag: "%v"`, tn.TypeName)
	}
}

func __marshalmediaFrag(v *mediaFrag) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *mediaFragAudioMedia:
		typename = "AudioMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragAudioMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragGIFMedia:
		typename = "GIFMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragGIFMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragGltfMedia:
		typename = "GltfMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragGltfMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragHtmlMedia:
		typename = "HtmlMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragHtmlMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragImageMedia:
		typename = "ImageMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragImageMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragInvalidMedia:
		typename = "InvalidMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragInvalidMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragJsonMedia:
		typename = "JsonMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragJsonMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragPdfMedia:
		typename = "PdfMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragPdfMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragSyncingMedia:
		typename = "SyncingMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragSyncingMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragTextMedia:
		typename = "TextMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragTextMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragUnknownMedia:
		typename = "UnknownMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragUnknownMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragVideoMedia:
		typename = "VideoMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragVideoMedia
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for mediaFrag: "%T"`, v)
	}
}

// mediaFrag includes the GraphQL fields of AudioMedia requested by the fragment mediaFrag.
type mediaFragAudioMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragAudioMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragAudioMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragAudioMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragAudioMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFragFallbackMedia includes the requested fields of the GraphQL type FallbackMedia.
type mediaFragFallbackMedia struct {
	MediaURL *string `json:"mediaURL"`
}

// GetMediaURL returns mediaFragFallbackMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *mediaFragFallbackMedia) GetMediaURL() *string { return v.MediaURL }

// mediaFrag includes the GraphQL fields of GIFMedia requested by the fragment mediaFrag.
type mediaFragGIFMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragGIFMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragGIFMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet { return v.PreviewURLs }

// GetFallbackMedia returns mediaFragGIFMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragGIFMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFrag includes the GraphQL fields of GltfMedia requested by the fragment mediaFrag.
type mediaFragGltfMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragGltfMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragGltfMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragGltfMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragGltfMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFrag includes the GraphQL fields of HtmlMedia requested by the fragment mediaFrag.
type mediaFragHtmlMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragHtmlMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragHtmlMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragHtmlMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragHtmlMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFrag includes the GraphQL fields of ImageMedia requested by the fragment mediaFrag.
type mediaFragImageMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragImageMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragImageMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragImageMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragImageMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFrag includes the GraphQL fields of InvalidMedia requested by the fragment mediaFrag.
type mediaFragInvalidMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragInvalidMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragInvalidMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragInvalidMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragInvalidMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFrag includes the GraphQL fields of JsonMedia requested by the fragment mediaFrag.
type mediaFragJsonMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragJsonMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragJsonMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragJsonMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragJsonMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFrag includes the GraphQL fields of PdfMedia requested by the fragment mediaFrag.
type mediaFragPdfMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragPdfMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragPdfMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet { return v.PreviewURLs }

// GetFallbackMedia returns mediaFragPdfMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragPdfMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFragPreviewURLsPreviewURLSet includes the requested fields of the GraphQL type PreviewURLSet.
type mediaFragPreviewURLsPreviewURLSet struct {
	Small *string `json:"small"`
}

// GetSmall returns mediaFragPreviewURLsPreviewURLSet.Small, and is useful for accessing the field via an interface.
func (v *mediaFragPreviewURLsPreviewURLSet) GetSmall() *string { return v.Small }

// mediaFrag includes the GraphQL fields of SyncingMedia requested by the fragment mediaFrag.
type mediaFragSyncingMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragSyncingMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragSyncingMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragSyncingMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragSyncingMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFrag includes the GraphQL fields of TextMedia requested by the fragment mediaFrag.
type mediaFragTextMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragTextMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragTextMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragTextMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragTextMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFrag includes the GraphQL fields of UnknownMedia requested by the fragment mediaFrag.
type mediaFragUnknownMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragUnknownMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragUnknownMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragUnknownMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragUnknownMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// mediaFrag includes the GraphQL fields of VideoMedia requested by the fragment mediaFrag.
type mediaFragVideoMedia struct {
	PreviewURLs   *mediaFragPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragVideoMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragVideoMedia) GetPreviewURLs() *mediaFragPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragVideoMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragVideoMedia) GetFallbackMedia() *mediaFragFallbackMedia { return v.FallbackMedia }

// postDigestEntityQueryPostByIdErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type postDigestEntityQueryPostByIdErrInvalidInput struct {
	Typename                 *string `json:"__typename"`
	errorFragErrInvalidInput `json:"-"`
}

// GetTypename returns postDigestEntityQueryPostByIdErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns postDigestEntityQueryPostByIdErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdErrInvalidInput) GetMessage() string {
	return v.errorFragErrInvalidInput.Message
}

func (v *postDigestEntityQueryPostByIdErrInvalidInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryPostByIdErrInvalidInput
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryPostByIdErrInvalidInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.errorFragErrInvalidInput)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpostDigestEntityQueryPostByIdErrInvalidInput struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *postDigestEntityQueryPostByIdErrInvalidInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryPostByIdErrInvalidInput) __premarshalJSON() (*__premarshalpostDigestEntityQueryPostByIdErrInvalidInput, error) {
	var retval __premarshalpostDigestEntityQueryPostByIdErrInvalidInput

	retval.Typename = v.Typename
	retval.Message = v.errorFragErrInvalidInput.Message
	return &retval, nil
}

// postDigestEntityQueryPostByIdErrPostNotFound includes the requested fields of the GraphQL type ErrPostNotFound.
type postDigestEntityQueryPostByIdErrPostNotFound struct {
	Typename                 *string `json:"__typename"`
	errorFragErrPostNotFound `json:"-"`
}

// GetTypename returns postDigestEntityQueryPostByIdErrPostNotFound.Typename, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdErrPostNotFound) GetTypename() *string { return v.Typename }

// GetMessage returns postDigestEntityQueryPostByIdErrPostNotFound.Message, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdErrPostNotFound) GetMessage() string {
	return v.errorFragErrPostNotFound.Message
}

func (v *postDigestEntityQueryPostByIdErrPostNotFound) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryPostByIdErrPostNotFound
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryPostByIdErrPostNotFound = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.errorFragErrPostNotFound)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpostDigestEntityQueryPostByIdErrPostNotFound struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *postDigestEntityQueryPostByIdErrPostNotFound) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryPostByIdErrPostNotFound) __premarshalJSON() (*__premarshalpostDigestEntityQueryPostByIdErrPostNotFound, error) {
	var retval __premarshalpostDigestEntityQueryPostByIdErrPostNotFound

	retval.Typename = v.Typename
	retval.Message = v.errorFragErrPostNotFound.Message
	return &retval, nil
}

// postDigestEntityQueryPostByIdPost includes the requested fields of the GraphQL type Post.
type postDigestEntityQueryPostByIdPost struct {
	Typename *string                                             `json:"__typename"`
	Dbid     persist.DBID                                        `json:"dbid"`
	Caption  *string                                             `json:"caption"`
	Author   *postDigestEntityQueryPostByIdPostAuthorGalleryUser `json:"author"`
	Tokens   []*postDigestEntityQueryPostByIdPostTokensToken     `json:"tokens"`
}

// GetTypename returns postDigestEntityQueryPostByIdPost.Typename, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPost) GetTypename() *string { return v.Typename }

// GetDbid returns postDigestEntityQueryPostByIdPost.Dbid, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPost) GetDbid() persist.DBID { return v.Dbid }

// GetCaption returns postDigestEntityQueryPostByIdPost.Caption, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPost) GetCaption() *string { return v.Caption }

// GetAuthor returns postDigestEntityQueryPostByIdPost.Author, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPost) GetAuthor() *postDigestEntityQueryPostByIdPostAuthorGalleryUser {
	return v.Author
}

// GetTokens returns postDigestEntityQueryPostByIdPost.Tokens, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPost) GetTokens() []*postDigestEntityQueryPostByIdPostTokensToken {
	return v.Tokens
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type postDigestEntityQueryPostByIdPostAuthorGalleryUser struct {
	userFrag `json:"-"`
}

// GetUsername returns postDigestEntityQueryPostByIdPostAuthorGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUser) GetUsername() *string {
	return v.userFrag.Username
}

// GetProfileImage returns postDigestEntityQueryPostByIdPostAuthorGalleryUser.ProfileImage, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUser) GetProfileImage() *userFragProfileImage {
	return v.userFrag.ProfileImage
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryPostByIdPostAuthorGalleryUser
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryPostByIdPostAuthorGalleryUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.userFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUser struct {
	Username *string `json:"username"`

	ProfileImage json.RawMessage `json:"profileImage"`
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUser) __premarshalJSON() (*__premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUser, error) {
	var retval __premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUser

	retval.Username = v.userFrag.Username
	{

		dst := &retval.ProfileImage
		src := v.userFrag.ProfileImage
		if src != nil {
			var err error
			*dst, err = __marshaluserFragProfileImage(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal postDigestEntityQueryPostByIdPostAuthorGalleryUser.userFrag.ProfileImage: %w", err)
			}
		}
	}
	return &retval, nil
}

// postDigestEntityQueryPostByIdPostOrError includes the requested fields of the GraphQL interface PostOrError.
//
// postDigestEntityQueryPostByIdPostOrError is implemented by the following types:
// postDigestEntityQueryPostByIdErrInvalidInput
// postDigestEntityQueryPostByIdErrPostNotFound
// postDigestEntityQueryPostByIdPost
type postDigestEntityQueryPostByIdPostOrError interface {
	implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *postDigestEntityQueryPostByIdErrInvalidInput) implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostOrError() {
}
func (v *postDigestEntityQueryPostByIdErrPostNotFound) implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostOrError() {
}
func (v *postDigestEntityQueryPostByIdPost) implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostOrError() {
}

func __unmarshalpostDigestEntityQueryPostByIdPostOrError(b []byte, v *postDigestEntityQueryPostByIdPostOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(postDigestEntityQueryPostByIdErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrPostNotFound":
		*v = new(postDigestEntityQueryPostByIdErrPostNotFound)
		return json.Unmarshal(b, *v)
	case "Post":
		*v = new(postDigestEntityQueryPostByIdPost)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PostOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for postDigestEntityQueryPostByIdPostOrError: "%v"`, tn.TypeName)
	}
}

func __marshalpostDigestEntityQueryPostByIdPostOrError(v *postDigestEntityQueryPostByIdPostOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *postDigestEntityQueryPostByIdErrInvalidInput:
		typename = "ErrInvalidInput"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpostDigestEntityQueryPostByIdErrInvalidInput
		}{typename, premarshaled}
		return json.Marshal(result)
	case *postDigestEntityQueryPostByIdErrPostNotFound:
		typename = "ErrPostNotFound"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpostDigestEntityQueryPostByIdErrPostNotFound
		}{typename, premarshaled}
		return json.Marshal(result)
	case *postDigestEntityQueryPostByIdPost:
		typename = "Post"

		result := struct {
			TypeName string `json:"__typename"`
			*postDigestEntityQueryPostByIdPost
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for postDigestEntityQueryPostByIdPostOrError: "%T"`, v)
	}
}

// postDigestEntityQueryPostByIdPostTokensToken includes the requested fields of the GraphQL type Token.
type postDigestEntityQueryPostByIdPostTokensToken struct {
	tokenFrag `json:"-"`
}

// GetDbid returns postDigestEntityQueryPostByIdPostTokensToken.Dbid, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostTokensToken) GetDbid() persist.DBID {
	return v.tokenFrag.Dbid
}

// GetDefinition returns postDigestEntityQueryPostByIdPostTokensToken.Definition, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostTokensToken) GetDefinition() tokenFragDefinitionTokenDefinition {
	return v.tokenFrag.Definition
}

func (v *postDigestEntityQueryPostByIdPostTokensToken) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryPostByIdPostTokensToken
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryPostByIdPostTokensToken = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.tokenFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpostDigestEntityQueryPostByIdPostTokensToken struct {
	Dbid persist.DBID `json:"dbid"`

	Definition tokenFragDefinitionTokenDefinition `json:"definition"`
}

func (v *postDigestEntityQueryPostByIdPostTokensToken) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryPostByIdPostTokensToken) __premarshalJSON() (*__premarshalpostDigestEntityQueryPostByIdPostTokensToken, error) {
	var retval __premarshalpostDigestEntityQueryPostByIdPostTokensToken

	retval.Dbid = v.tokenFrag.Dbid
	retval.Definition = v.tokenFrag.Definition
	return &retval, nil
}

// postDigestEntityQueryResponse is returned by postDigestEntityQuery on success.
type postDigestEntityQueryResponse struct {
	PostById *postDigestEntityQueryPostByIdPostOrError `json:"-"`
}

// GetPostById returns postDigestEntityQueryResponse.PostById, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryResponse) GetPostById() *postDigestEntityQueryPostByIdPostOrError {
	return v.PostById
}

func (v *postDigestEntityQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryResponse
		PostById json.RawMessage `json:"postById"`
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.PostById
		src := firstPass.PostById
		if len(src) != 0 && string(src) != "null" {
			*dst = new(postDigestEntityQueryPostByIdPostOrError)
			err = __unmarshalpostDigestEntityQueryPostByIdPostOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal postDigestEntityQueryResponse.PostById: %w", err)
			}
		}
	}
	return nil
}

type __premarshalpostDigestEntityQueryResponse struct {
	PostById json.RawMessage `json:"postById"`
}

func (v *postDigestEntityQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryResponse) __premarshalJSON() (*__premarshalpostDigestEntityQueryResponse, error) {
	var retval __premarshalpostDigestEntityQueryResponse

	{

		dst := &retval.PostById
		src := v.PostById
		if src != nil {
			var err error
			*dst, err = __marshalpostDigestEntityQueryPostByIdPostOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal postDigestEntityQueryResponse.PostById: %w", err)
			}
		}
	}
	return &retval, nil
}

// tokenFrag includes the GraphQL fields of Token requested by the fragment tokenFrag.
type tokenFrag struct {
	Dbid       persist.DBID                       `json:"dbid"`
	Definition tokenFragDefinitionTokenDefinition `json:"definition"`
}

// GetDbid returns tokenFrag.Dbid, and is useful for accessing the field via an interface.
func (v *tokenFrag) GetDbid() persist.DBID { return v.Dbid }

// GetDefinition returns tokenFrag.Definition, and is useful for accessing the field via an interface.
func (v *tokenFrag) GetDefinition() tokenFragDefinitionTokenDefinition { return v.Definition }

// tokenFragDefinitionTokenDefinition includes the requested fields of the GraphQL type TokenDefinition.
type tokenFragDefinitionTokenDefinition struct {
	definitionFrag `json:"-"`
}

// GetName returns tokenFragDefinitionTokenDefinition.Name, and is useful for accessing the field via an interface.
func (v *tokenFragDefinitionTokenDefinition) GetName() *string { return v.definitionFrag.Name }

// GetDescription returns tokenFragDefinitionTokenDefinition.Description, and is useful for accessing the field via an interface.
func (v *tokenFragDefinitionTokenDefinition) GetDescription() *string {
	return v.definitionFrag.Description
}

// GetMedia returns tokenFragDefinitionTokenDefinition.Media, and is useful for accessing the field via an interface.
func (v *tokenFragDefinitionTokenDefinition) GetMedia() *definitionFragMediaMediaSubtype {
	return v.definitionFrag.Media
}

func (v *tokenFragDefinitionTokenDefinition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*tokenFragDefinitionTokenDefinition
		graphql.NoUnmarshalJSON
	}
	firstPass.tokenFragDefinitionTokenDefinition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.definitionFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaltokenFragDefinitionTokenDefinition struct {
	Name *string `json:"name"`

	Description *string `json:"description"`

	Media json.RawMessage `json:"media"`
}

func (v *tokenFragDefinitionTokenDefinition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *tokenFragDefinitionTokenDefinition) __premarshalJSON() (*__premarshaltokenFragDefinitionTokenDefinition, error) {
	var retval __premarshaltokenFragDefinitionTokenDefinition

	retval.Name = v.definitionFrag.Name
	retval.Description = v.definitionFrag.Description
	{

		dst := &retval.Media
		src := v.definitionFrag.Media
		if src != nil {
			var err error
			*dst, err = __marshaldefinitionFragMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal tokenFragDefinitionTokenDefinition.definitionFrag.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// userFrag includes the GraphQL fields of GalleryUser requested by the fragment userFrag.
type userFrag struct {
	Username     *string               `json:"username"`
	ProfileImage *userFragProfileImage `json:"-"`
}

// GetUsername returns userFrag.Username, and is useful for accessing the field via an interface.
func (v *userFrag) GetUsername() *string { return v.Username }

// GetProfileImage returns userFrag.ProfileImage, and is useful for accessing the field via an interface.
func (v *userFrag) GetProfileImage() *userFragProfileImage { return v.ProfileImage }

func (v *userFrag) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userFrag
		ProfileImage json.RawMessage `json:"profileImage"`
		graphql.NoUnmarshalJSON
	}
	firstPass.userFrag = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ProfileImage
		src := firstPass.ProfileImage
		if len(src) != 0 && string(src) != "null" {
			*dst = new(userFragProfileImage)
			err = __unmarshaluserFragProfileImage(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal userFrag.ProfileImage: %w", err)
			}
		}
	}
	return nil
}

type __premarshaluserFrag struct {
	Username *string `json:"username"`

	ProfileImage json.RawMessage `json:"profileImage"`
}

func (v *userFrag) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userFrag) __premarshalJSON() (*__premarshaluserFrag, error) {
	var retval __premarshaluserFrag

	retval.Username = v.Username
	{

		dst := &retval.ProfileImage
		src := v.ProfileImage
		if src != nil {
			var err error
			*dst, err = __marshaluserFragProfileImage(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userFrag.ProfileImage: %w", err)
			}
		}
	}
	return &retval, nil
}

// userFragProfileImage includes the requested fields of the GraphQL interface ProfileImage.
//
// userFragProfileImage is implemented by the following types:
// userFragProfileImageEnsProfileImage
// userFragProfileImageTokenProfileImage
type userFragProfileImage interface {
	implementsGraphQLInterfaceuserFragProfileImage()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *userFragProfileImageEnsProfileImage) implementsGraphQLInterfaceuserFragProfileImage()   {}
func (v *userFragProfileImageTokenProfileImage) implementsGraphQLInterfaceuserFragProfileImage() {}

func __unmarshaluserFragProfileImage(b []byte, v *userFragProfileImage) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EnsProfileImage":
		*v = new(userFragProfileImageEnsProfileImage)
		return json.Unmarshal(b, *v)
	case "TokenProfileImage":
		*v = new(userFragProfileImageTokenProfileImage)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ProfileImage.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for userFragProfileImage: "%v"`, tn.TypeName)
	}
}

func __marshaluserFragProfileImage(v *userFragProfileImage) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *userFragProfileImageEnsProfileImage:
		typename = "EnsProfileImage"

		result := struct {
			TypeName string `json:"__typename"`
			*userFragProfileImageEnsProfileImage
		}{typename, v}
		return json.Marshal(result)
	case *userFragProfileImageTokenProfileImage:
		typename = "TokenProfileImage"

		result := struct {
			TypeName string `json:"__typename"`
			*userFragProfileImageTokenProfileImage
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for userFragProfileImage: "%T"`, v)
	}
}

// userFragProfileImageEnsProfileImage includes the requested fields of the GraphQL type EnsProfileImage.
type userFragProfileImageEnsProfileImage struct {
	Typename *string                                                       `json:"__typename"`
	EnsToken *userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImage `json:"ensToken"`
	PfpToken *userFragProfileImageEnsProfileImagePfpToken                  `json:"pfpToken"`
}

// GetTypename returns userFragProfileImageEnsProfileImage.Typename, and is useful for accessing the field via an interface.
func (v *userFragProfileImageEnsProfileImage) GetTypename() *string { return v.Typename }

// GetEnsToken returns userFragProfileImageEnsProfileImage.EnsToken, and is useful for accessing the field via an interface.
func (v *userFragProfileImageEnsProfileImage) GetEnsToken() *userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImage {
	return v.EnsToken
}

// GetPfpToken returns userFragProfileImageEnsProfileImage.PfpToken, and is useful for accessing the field via an interface.
func (v *userFragProfileImageEnsProfileImage) GetPfpToken() *userFragProfileImageEnsProfileImagePfpToken {
	return v.PfpToken
}

// userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImage includes the requested fields of the GraphQL type HTTPSProfileImage.
type userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImage struct {
	PreviewURLs *userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet `json:"previewURLs"`
}

// GetPreviewURLs returns userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImage.PreviewURLs, and is useful for accessing the field via an interface.
func (v *userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImage) GetPreviewURLs() *userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet includes the requested fields of the GraphQL type PreviewURLSet.
type userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet struct {
	Small *string `json:"small"`
}

// GetSmall returns userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet.Small, and is useful for accessing the field via an interface.
func (v *userFragProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet) GetSmall() *string {
	return v.Small
}

// userFragProfileImageEnsProfileImagePfpToken includes the requested fields of the GraphQL type Token.
type userFragProfileImageEnsProfileImagePfpToken struct {
	Definition userFragProfileImageEnsProfileImagePfpTokenDefinition `json:"definition"`
}

// GetDefinition returns userFragProfileImageEnsProfileImagePfpToken.Definition, and is useful for accessing the field via an interface.
func (v *userFragProfileImageEnsProfileImagePfpToken) GetDefinition() userFragProfileImageEnsProfileImagePfpTokenDefinition {
	return v.Definition
}

// userFragProfileImageEnsProfileImagePfpTokenDefinition includes the requested fields of the GraphQL type TokenDefinition.
type userFragProfileImageEnsProfileImagePfpTokenDefinition struct {
	definitionFrag `json:"-"`
}

// GetName returns userFragProfileImageEnsProfileImagePfpTokenDefinition.Name, and is useful for accessing the field via an interface.
func (v *userFragProfileImageEnsProfileImagePfpTokenDefinition) GetName() *string {
	return v.definitionFrag.Name
}

// GetDescription returns userFragProfileImageEnsProfileImagePfpTokenDefinition.Description, and is useful for accessing the field via an interface.
func (v *userFragProfileImageEnsProfileImagePfpTokenDefinition) GetDescription() *string {
	return v.definitionFrag.Description
}

// GetMedia returns userFragProfileImageEnsProfileImagePfpTokenDefinition.Media, and is useful for accessing the field via an interface.
func (v *userFragProfileImageEnsProfileImagePfpTokenDefinition) GetMedia() *definitionFragMediaMediaSubtype {
	return v.definitionFrag.Media
}

func (v *userFragProfileImageEnsProfileImagePfpTokenDefinition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userFragProfileImageEnsProfileImagePfpTokenDefinition
		graphql.NoUnmarshalJSON
	}
	firstPass.userFragProfileImageEnsProfileImagePfpTokenDefinition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.definitionFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserFragProfileImageEnsProfileImagePfpTokenDefinition struct {
	Name *string `json:"name"`

	Description *string `json:"description"`

	Media json.RawMessage `json:"media"`
}

func (v *userFragProfileImageEnsProfileImagePfpTokenDefinition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userFragProfileImageEnsProfileImagePfpTokenDefinition) __premarshalJSON() (*__premarshaluserFragProfileImageEnsProfileImagePfpTokenDefinition, error) {
	var retval __premarshaluserFragProfileImageEnsProfileImagePfpTokenDefinition

	retval.Name = v.definitionFrag.Name
	retval.Description = v.definitionFrag.Description
	{

		dst := &retval.Media
		src := v.definitionFrag.Media
		if src != nil {
			var err error
			*dst, err = __marshaldefinitionFragMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userFragProfileImageEnsProfileImagePfpTokenDefinition.definitionFrag.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// userFragProfileImageTokenProfileImage includes the requested fields of the GraphQL type TokenProfileImage.
type userFragProfileImageTokenProfileImage struct {
	Typename *string                                    `json:"__typename"`
	Token    userFragProfileImageTokenProfileImageToken `json:"token"`
}

// GetTypename returns userFragProfileImageTokenProfileImage.Typename, and is useful for accessing the field via an interface.
func (v *userFragProfileImageTokenProfileImage) GetTypename() *string { return v.Typename }

// GetToken returns userFragProfileImageTokenProfileImage.Token, and is useful for accessing the field via an interface.
func (v *userFragProfileImageTokenProfileImage) GetToken() userFragProfileImageTokenProfileImageToken {
	return v.Token
}

// userFragProfileImageTokenProfileImageToken includes the requested fields of the GraphQL type Token.
type userFragProfileImageTokenProfileImageToken struct {
	Definition userFragProfileImageTokenProfileImageTokenDefinition `json:"definition"`
}

// GetDefinition returns userFragProfileImageTokenProfileImageToken.Definition, and is useful for accessing the field via an interface.
func (v *userFragProfileImageTokenProfileImageToken) GetDefinition() userFragProfileImageTokenProfileImageTokenDefinition {
	return v.Definition
}

// userFragProfileImageTokenProfileImageTokenDefinition includes the requested fields of the GraphQL type TokenDefinition.
type userFragProfileImageTokenProfileImageTokenDefinition struct {
	definitionFrag `json:"-"`
}

// GetName returns userFragProfileImageTokenProfileImageTokenDefinition.Name, and is useful for accessing the field via an interface.
func (v *userFragProfileImageTokenProfileImageTokenDefinition) GetName() *string {
	return v.definitionFrag.Name
}

// GetDescription returns userFragProfileImageTokenProfileImageTokenDefinition.Description, and is useful for accessing the field via an interface.
func (v *userFragProfileImageTokenProfileImageTokenDefinition) GetDescription() *string {
	return v.definitionFrag.Description
}

// GetMedia returns userFragProfileImageTokenProfileImageTokenDefinition.Media, and is useful for accessing the field via an interface.
func (v *userFragProfileImageTokenProfileImageTokenDefinition) GetMedia() *definitionFragMediaMediaSubtype {
	return v.definitionFrag.Media
}

func (v *userFragProfileImageTokenProfileImageTokenDefinition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userFragProfileImageTokenProfileImageTokenDefinition
		graphql.NoUnmarshalJSON
	}
	firstPass.userFragProfileImageTokenProfileImageTokenDefinition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.definitionFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaluserFragProfileImageTokenProfileImageTokenDefinition struct {
	Name *string `json:"name"`

	Description *string `json:"description"`

	Media json.RawMessage `json:"media"`
}

func (v *userFragProfileImageTokenProfileImageTokenDefinition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userFragProfileImageTokenProfileImageTokenDefinition) __premarshalJSON() (*__premarshaluserFragProfileImageTokenProfileImageTokenDefinition, error) {
	var retval __premarshaluserFragProfileImageTokenProfileImageTokenDefinition

	retval.Name = v.definitionFrag.Name
	retval.Description = v.definitionFrag.Description
	{

		dst := &retval.Media
		src := v.definitionFrag.Media
		if src != nil {
			var err error
			*dst, err = __marshaldefinitionFragMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userFragProfileImageTokenProfileImageTokenDefinition.definitionFrag.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// The query or mutation executed by communityDigestEntityQuery.
const communityDigestEntityQuery_Operation = `
query communityDigestEntityQuery ($id: DBID!) {
	communityById(id: $id) {
		__typename
		... on Error {
			... errorFrag
		}
		... on Community {
			dbid
			subtype {
				__typename
				... on ContractCommunity {
					contract {
						contractAddress {
							address
							chain
						}
						chain
						profileImageURL
					}
				}
				... on ArtBlocksCommunity {
					contract {
						contractAddress {
							address
							chain
						}
						chain
						profileImageURL
					}
				}
			}
			name
			description
			profileImageURL
			creators {
				__typename
				... on GalleryUser {
					... userFrag
				}
				... on ChainAddress {
					address
					chain
				}
			}
			tokens(first: 10) {
				edges {
					node {
						... tokenFrag
					}
				}
			}
		}
	}
}
fragment errorFrag on Error {
	message
	__typename
}
fragment userFrag on GalleryUser {
	username
	profileImage {
		__typename
		... on TokenProfileImage {
			token {
				definition {
					... definitionFrag
				}
			}
		}
		... on EnsProfileImage {
			ensToken: profileImage {
				previewURLs {
					small
				}
			}
			pfpToken: token {
				definition {
					... definitionFrag
				}
			}
		}
	}
}
fragment tokenFrag on Token {
	dbid
	definition {
		... definitionFrag
	}
}
fragment definitionFrag on TokenDefinition {
	name
	description
	media {
		__typename
		... on Media {
			... mediaFrag
		}
	}
}
fragment mediaFrag on Media {
	previewURLs {
		small
	}
	fallbackMedia {
		mediaURL
	}
}
`

func communityDigestEntityQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id persist.DBID,
) (*communityDigestEntityQueryResponse, error) {
	req_ := &graphql.Request{
		OpName: "communityDigestEntityQuery",
		Query:  communityDigestEntityQuery_Operation,
		Variables: &__communityDigestEntityQueryInput{
			Id: id,
		},
	}
	var err_ error

	var data_ communityDigestEntityQueryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by galleryDigestEntityQuery.
const galleryDigestEntityQuery_Operation = `
query galleryDigestEntityQuery ($id: DBID!) {
	galleryById(id: $id) {
		__typename
		... on Error {
			... errorFrag
		}
		... on Gallery {
			dbid
			owner {
				... userFrag
			}
			name
			description
			tokenPreviews {
				small
			}
		}
	}
}
fragment errorFrag on Error {
	message
	__typename
}
fragment userFrag on GalleryUser {
	username
	profileImage {
		__typename
		... on TokenProfileImage {
			token {
				definition {
					... definitionFrag
				}
			}
		}
		... on EnsProfileImage {
			ensToken: profileImage {
				previewURLs {
					small
				}
			}
			pfpToken: token {
				definition {
					... definitionFrag
				}
			}
		}
	}
}
fragment definitionFrag on TokenDefinition {
	name
	description
	media {
		__typename
		... on Media {
			... mediaFrag
		}
	}
}
fragment mediaFrag on Media {
	previewURLs {
		small
	}
	fallbackMedia {
		mediaURL
	}
}
`

func galleryDigestEntityQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id persist.DBID,
) (*galleryDigestEntityQueryResponse, error) {
	req_ := &graphql.Request{
		OpName: "galleryDigestEntityQuery",
		Query:  galleryDigestEntityQuery_Operation,
		Variables: &__galleryDigestEntityQueryInput{
			Id: id,
		},
	}
	var err_ error

	var data_ galleryDigestEntityQueryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by postDigestEntityQuery.
const postDigestEntityQuery_Operation = `
query postDigestEntityQuery ($id: DBID!) {
	postById(id: $id) {
		__typename
		... on Error {
			... errorFrag
		}
		... on Post {
			dbid
			caption
			author {
				... userFrag
			}
			tokens {
				... tokenFrag
			}
		}
	}
}
fragment errorFrag on Error {
	message
	__typename
}
fragment userFrag on GalleryUser {
	username
	profileImage {
		__typename
		... on TokenProfileImage {
			token {
				definition {
					... definitionFrag
				}
			}
		}
		... on EnsProfileImage {
			ensToken: profileImage {
				previewURLs {
					small
				}
			}
			pfpToken: token {
				definition {
					... definitionFrag
				}
			}
		}
	}
}
fragment tokenFrag on Token {
	dbid
	definition {
		... definitionFrag
	}
}
fragment definitionFrag on TokenDefinition {
	name
	description
	media {
		__typename
		... on Media {
			... mediaFrag
		}
	}
}
fragment mediaFrag on Media {
	previewURLs {
		small
	}
	fallbackMedia {
		mediaURL
	}
}
`

func postDigestEntityQuery(
	ctx_ context.Context,
	client_ graphql.Client,
	id persist.DBID,
) (*postDigestEntityQueryResponse, error) {
	req_ := &graphql.Request{
		OpName: "postDigestEntityQuery",
		Query:  postDigestEntityQuery_Operation,
		Variables: &__postDigestEntityQueryInput{
			Id: id,
		},
	}
	var err_ error

	var data_ postDigestEntityQueryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
