// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package emails

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/mikeydub/go-gallery/service/persist"
)

type Chain string

const (
	ChainEthereum Chain = "Ethereum"
	ChainArbitrum Chain = "Arbitrum"
	ChainPolygon  Chain = "Polygon"
	ChainOptimism Chain = "Optimism"
	ChainTezos    Chain = "Tezos"
	ChainPoap     Chain = "POAP"
	ChainZora     Chain = "Zora"
	ChainBase     Chain = "Base"
)

// __communityDigestEntityQueryInput is used internally by genqlient
type __communityDigestEntityQueryInput struct {
	Id persist.DBID `json:"id"`
}

// GetId returns __communityDigestEntityQueryInput.Id, and is useful for accessing the field via an interface.
func (v *__communityDigestEntityQueryInput) GetId() persist.DBID { return v.Id }

// __galleryDigestEntityQueryInput is used internally by genqlient
type __galleryDigestEntityQueryInput struct {
	Id persist.DBID `json:"id"`
}

// GetId returns __galleryDigestEntityQueryInput.Id, and is useful for accessing the field via an interface.
func (v *__galleryDigestEntityQueryInput) GetId() persist.DBID { return v.Id }

// __postDigestEntityQueryInput is used internally by genqlient
type __postDigestEntityQueryInput struct {
	Id persist.DBID `json:"id"`
}

// GetId returns __postDigestEntityQueryInput.Id, and is useful for accessing the field via an interface.
func (v *__postDigestEntityQueryInput) GetId() persist.DBID { return v.Id }

// communityDigestEntityQueryCommunityByIdCommunity includes the requested fields of the GraphQL type Community.
type communityDigestEntityQueryCommunityByIdCommunity struct {
	Typename        *string                                                                         `json:"__typename"`
	Dbid            persist.DBID                                                                    `json:"dbid"`
	Subtype         *communityDigestEntityQueryCommunityByIdCommunitySubtype                        `json:"-"`
	Name            *string                                                                         `json:"name"`
	Description     *string                                                                         `json:"description"`
	ProfileImageURL *string                                                                         `json:"profileImageURL"`
	Creators        []*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress `json:"-"`
	Tokens          *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection         `json:"tokens"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunity.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetTypename() *string { return v.Typename }

// GetDbid returns communityDigestEntityQueryCommunityByIdCommunity.Dbid, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetDbid() persist.DBID { return v.Dbid }

// GetSubtype returns communityDigestEntityQueryCommunityByIdCommunity.Subtype, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetSubtype() *communityDigestEntityQueryCommunityByIdCommunitySubtype {
	return v.Subtype
}

// GetName returns communityDigestEntityQueryCommunityByIdCommunity.Name, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetName() *string { return v.Name }

// GetDescription returns communityDigestEntityQueryCommunityByIdCommunity.Description, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetDescription() *string {
	return v.Description
}

// GetProfileImageURL returns communityDigestEntityQueryCommunityByIdCommunity.ProfileImageURL, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetProfileImageURL() *string {
	return v.ProfileImageURL
}

// GetCreators returns communityDigestEntityQueryCommunityByIdCommunity.Creators, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetCreators() []*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress {
	return v.Creators
}

// GetTokens returns communityDigestEntityQueryCommunityByIdCommunity.Tokens, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunity) GetTokens() *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection {
	return v.Tokens
}

func (v *communityDigestEntityQueryCommunityByIdCommunity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdCommunity
		Subtype  json.RawMessage   `json:"subtype"`
		Creators []json.RawMessage `json:"creators"`
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdCommunity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Subtype
		src := firstPass.Subtype
		if len(src) != 0 && string(src) != "null" {
			*dst = new(communityDigestEntityQueryCommunityByIdCommunitySubtype)
			err = __unmarshalcommunityDigestEntityQueryCommunityByIdCommunitySubtype(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal communityDigestEntityQueryCommunityByIdCommunity.Subtype: %w", err)
			}
		}
	}

	{
		dst := &v.Creators
		src := firstPass.Creators
		*dst = make(
			[]*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				*dst = new(communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress)
				err = __unmarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress(
					src, *dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal communityDigestEntityQueryCommunityByIdCommunity.Creators: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdCommunity struct {
	Typename *string `json:"__typename"`

	Dbid persist.DBID `json:"dbid"`

	Subtype json.RawMessage `json:"subtype"`

	Name *string `json:"name"`

	Description *string `json:"description"`

	ProfileImageURL *string `json:"profileImageURL"`

	Creators []json.RawMessage `json:"creators"`

	Tokens *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection `json:"tokens"`
}

func (v *communityDigestEntityQueryCommunityByIdCommunity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdCommunity) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdCommunity, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdCommunity

	retval.Typename = v.Typename
	retval.Dbid = v.Dbid
	{

		dst := &retval.Subtype
		src := v.Subtype
		if src != nil {
			var err error
			*dst, err = __marshalcommunityDigestEntityQueryCommunityByIdCommunitySubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal communityDigestEntityQueryCommunityByIdCommunity.Subtype: %w", err)
			}
		}
	}
	retval.Name = v.Name
	retval.Description = v.Description
	retval.ProfileImageURL = v.ProfileImageURL
	{

		dst := &retval.Creators
		src := v.Creators
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if src != nil {
				var err error
				*dst, err = __marshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress(
					src)
				if err != nil {
					return nil, fmt.Errorf(
						"unable to marshal communityDigestEntityQueryCommunityByIdCommunity.Creators: %w", err)
				}
			}
		}
	}
	retval.Tokens = v.Tokens
	return &retval, nil
}

// communityDigestEntityQueryCommunityByIdCommunityByIdOrError includes the requested fields of the GraphQL interface CommunityByIdOrError.
//
// communityDigestEntityQueryCommunityByIdCommunityByIdOrError is implemented by the following types:
// communityDigestEntityQueryCommunityByIdCommunity
// communityDigestEntityQueryCommunityByIdErrCommunityNotFound
// communityDigestEntityQueryCommunityByIdErrInvalidInput
type communityDigestEntityQueryCommunityByIdCommunityByIdOrError interface {
	implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityByIdOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *communityDigestEntityQueryCommunityByIdCommunity) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityByIdOrError() {
}
func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityByIdOrError() {
}
func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityByIdOrError() {
}

func __unmarshalcommunityDigestEntityQueryCommunityByIdCommunityByIdOrError(b []byte, v *communityDigestEntityQueryCommunityByIdCommunityByIdOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Community":
		*v = new(communityDigestEntityQueryCommunityByIdCommunity)
		return json.Unmarshal(b, *v)
	case "ErrCommunityNotFound":
		*v = new(communityDigestEntityQueryCommunityByIdErrCommunityNotFound)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(communityDigestEntityQueryCommunityByIdErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CommunityByIdOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunityByIdOrError: "%v"`, tn.TypeName)
	}
}

func __marshalcommunityDigestEntityQueryCommunityByIdCommunityByIdOrError(v *communityDigestEntityQueryCommunityByIdCommunityByIdOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *communityDigestEntityQueryCommunityByIdCommunity:
		typename = "Community"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalcommunityDigestEntityQueryCommunityByIdCommunity
		}{typename, premarshaled}
		return json.Marshal(result)
	case *communityDigestEntityQueryCommunityByIdErrCommunityNotFound:
		typename = "ErrCommunityNotFound"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalcommunityDigestEntityQueryCommunityByIdErrCommunityNotFound
		}{typename, premarshaled}
		return json.Marshal(result)
	case *communityDigestEntityQueryCommunityByIdErrInvalidInput:
		typename = "ErrInvalidInput"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalcommunityDigestEntityQueryCommunityByIdErrInvalidInput
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunityByIdOrError: "%T"`, v)
	}
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress includes the requested fields of the GraphQL type ChainAddress.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress struct {
	Typename *string          `json:"__typename"`
	Address  *persist.Address `json:"address"`
	Chain    *Chain           `json:"chain"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress) GetTypename() *string {
	return v.Typename
}

// GetAddress returns communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress.Address, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress) GetAddress() *persist.Address {
	return v.Address
}

// GetChain returns communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress.Chain, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress) GetChain() *Chain {
	return v.Chain
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser struct {
	Typename     *string                                                                          `json:"__typename"`
	Username     *string                                                                          `json:"username"`
	ProfileImage *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage `json:"-"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) GetTypename() *string {
	return v.Typename
}

// GetUsername returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) GetUsername() *string {
	return v.Username
}

// GetProfileImage returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser.ProfileImage, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) GetProfileImage() *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage {
	return v.ProfileImage
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser
		ProfileImage json.RawMessage `json:"profileImage"`
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ProfileImage
		src := firstPass.ProfileImage
		if len(src) != 0 && string(src) != "null" {
			*dst = new(communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage)
			err = __unmarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser.ProfileImage: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser struct {
	Typename *string `json:"__typename"`

	Username *string `json:"username"`

	ProfileImage json.RawMessage `json:"profileImage"`
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser

	retval.Typename = v.Typename
	retval.Username = v.Username
	{

		dst := &retval.ProfileImage
		src := v.ProfileImage
		if src != nil {
			var err error
			*dst, err = __marshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser.ProfileImage: %w", err)
			}
		}
	}
	return &retval, nil
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress includes the requested fields of the GraphQL interface GalleryUserOrAddress.
//
// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress is implemented by the following types:
// communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress
// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress interface {
	implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress() {
}
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress() {
}

func __unmarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress(b []byte, v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ChainAddress":
		*v = new(communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress)
		return json.Unmarshal(b, *v)
	case "GalleryUser":
		*v = new(communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GalleryUserOrAddress.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress: "%v"`, tn.TypeName)
	}
}

func __marshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress(v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress:
		typename = "ChainAddress"

		result := struct {
			TypeName string `json:"__typename"`
			*communityDigestEntityQueryCommunityByIdCommunityCreatorsChainAddress
		}{typename, v}
		return json.Marshal(result)
	case *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser:
		typename = "GalleryUser"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUser
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserOrAddress: "%T"`, v)
	}
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage includes the requested fields of the GraphQL interface ProfileImage.
//
// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage is implemented by the following types:
// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage
// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage interface {
	implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage() {
}
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage() {
}

func __unmarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage(b []byte, v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EnsProfileImage":
		*v = new(communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage)
		return json.Unmarshal(b, *v)
	case "TokenProfileImage":
		*v = new(communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ProfileImage.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage: "%v"`, tn.TypeName)
	}
}

func __marshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage(v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage:
		typename = "EnsProfileImage"

		result := struct {
			TypeName string `json:"__typename"`
			*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage
		}{typename, v}
		return json.Marshal(result)
	case *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage:
		typename = "TokenProfileImage"

		result := struct {
			TypeName string `json:"__typename"`
			*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImage: "%T"`, v)
	}
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage includes the requested fields of the GraphQL type EnsProfileImage.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage struct {
	Typename *string                                                                                                                  `json:"__typename"`
	EnsToken *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage `json:"ensToken"`
	PfpToken *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpToken                  `json:"pfpToken"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage) GetTypename() *string {
	return v.Typename
}

// GetEnsToken returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage.EnsToken, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage) GetEnsToken() *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage {
	return v.EnsToken
}

// GetPfpToken returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage.PfpToken, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImage) GetPfpToken() *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpToken {
	return v.PfpToken
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage includes the requested fields of the GraphQL type HTTPSProfileImage.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage struct {
	PreviewURLs *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet `json:"previewURLs"`
}

// GetPreviewURLs returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage.PreviewURLs, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage) GetPreviewURLs() *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet includes the requested fields of the GraphQL type PreviewURLSet.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet struct {
	Small *string `json:"small"`
}

// GetSmall returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet.Small, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet) GetSmall() *string {
	return v.Small
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpToken includes the requested fields of the GraphQL type Token.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpToken struct {
	Definition communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition `json:"definition"`
}

// GetDefinition returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpToken.Definition, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpToken) GetDefinition() communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition {
	return v.Definition
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition includes the requested fields of the GraphQL type TokenDefinition.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition struct {
	definitionFrag `json:"-"`
}

// GetName returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition.Name, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) GetName() *string {
	return v.definitionFrag.Name
}

// GetDescription returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition.Description, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) GetDescription() *string {
	return v.definitionFrag.Description
}

// GetMedia returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition.Media, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) GetMedia() *definitionFragMediaMediaSubtype {
	return v.definitionFrag.Media
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.definitionFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition struct {
	Name *string `json:"name"`

	Description *string `json:"description"`

	Media json.RawMessage `json:"media"`
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition

	retval.Name = v.definitionFrag.Name
	retval.Description = v.definitionFrag.Description
	{

		dst := &retval.Media
		src := v.definitionFrag.Media
		if src != nil {
			var err error
			*dst, err = __marshaldefinitionFragMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageEnsProfileImagePfpTokenDefinition.definitionFrag.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage includes the requested fields of the GraphQL type TokenProfileImage.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage struct {
	Typename *string                                                                                               `json:"__typename"`
	Token    communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageToken `json:"token"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage) GetTypename() *string {
	return v.Typename
}

// GetToken returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage.Token, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImage) GetToken() communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageToken {
	return v.Token
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageToken includes the requested fields of the GraphQL type Token.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageToken struct {
	Definition communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition `json:"definition"`
}

// GetDefinition returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageToken.Definition, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageToken) GetDefinition() communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition {
	return v.Definition
}

// communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition includes the requested fields of the GraphQL type TokenDefinition.
type communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition struct {
	definitionFrag `json:"-"`
}

// GetName returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition.Name, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition) GetName() *string {
	return v.definitionFrag.Name
}

// GetDescription returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition.Description, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition) GetDescription() *string {
	return v.definitionFrag.Description
}

// GetMedia returns communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition.Media, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition) GetMedia() *definitionFragMediaMediaSubtype {
	return v.definitionFrag.Media
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.definitionFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition struct {
	Name *string `json:"name"`

	Description *string `json:"description"`

	Media json.RawMessage `json:"media"`
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition

	retval.Name = v.definitionFrag.Name
	retval.Description = v.definitionFrag.Description
	{

		dst := &retval.Media
		src := v.definitionFrag.Media
		if src != nil {
			var err error
			*dst, err = __marshaldefinitionFragMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal communityDigestEntityQueryCommunityByIdCommunityCreatorsGalleryUserProfileImageTokenProfileImageTokenDefinition.definitionFrag.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// communityDigestEntityQueryCommunityByIdCommunitySubtype includes the requested fields of the GraphQL interface CommunitySubtype.
//
// communityDigestEntityQueryCommunityByIdCommunitySubtype is implemented by the following types:
// communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity
// communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity
type communityDigestEntityQueryCommunityByIdCommunitySubtype interface {
	implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunitySubtype()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunitySubtype() {
}
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity) implementsGraphQLInterfacecommunityDigestEntityQueryCommunityByIdCommunitySubtype() {
}

func __unmarshalcommunityDigestEntityQueryCommunityByIdCommunitySubtype(b []byte, v *communityDigestEntityQueryCommunityByIdCommunitySubtype) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ArtBlocksCommunity":
		*v = new(communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity)
		return json.Unmarshal(b, *v)
	case "ContractCommunity":
		*v = new(communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CommunitySubtype.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunitySubtype: "%v"`, tn.TypeName)
	}
}

func __marshalcommunityDigestEntityQueryCommunityByIdCommunitySubtype(v *communityDigestEntityQueryCommunityByIdCommunitySubtype) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity:
		typename = "ArtBlocksCommunity"

		result := struct {
			TypeName string `json:"__typename"`
			*communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity
		}{typename, v}
		return json.Marshal(result)
	case *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity:
		typename = "ContractCommunity"

		result := struct {
			TypeName string `json:"__typename"`
			*communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for communityDigestEntityQueryCommunityByIdCommunitySubtype: "%T"`, v)
	}
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity includes the requested fields of the GraphQL type ArtBlocksCommunity.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity struct {
	Typename *string                                                                            `json:"__typename"`
	Contract *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract `json:"contract"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity) GetTypename() *string {
	return v.Typename
}

// GetContract returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity.Contract, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunity) GetContract() *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract {
	return v.Contract
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract includes the requested fields of the GraphQL type Contract.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract struct {
	ContractAddress *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress `json:"contractAddress"`
	Chain           *Chain                                                                                                        `json:"chain"`
	ProfileImageURL *string                                                                                                       `json:"profileImageURL"`
}

// GetContractAddress returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract.ContractAddress, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract) GetContractAddress() *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress {
	return v.ContractAddress
}

// GetChain returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract.Chain, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract) GetChain() *Chain {
	return v.Chain
}

// GetProfileImageURL returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract.ProfileImageURL, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContract) GetProfileImageURL() *string {
	return v.ProfileImageURL
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress includes the requested fields of the GraphQL type ChainAddress.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress struct {
	Address *persist.Address `json:"address"`
	Chain   *Chain           `json:"chain"`
}

// GetAddress returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress.Address, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress) GetAddress() *persist.Address {
	return v.Address
}

// GetChain returns communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress.Chain, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeArtBlocksCommunityContractContractAddressChainAddress) GetChain() *Chain {
	return v.Chain
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity includes the requested fields of the GraphQL type ContractCommunity.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity struct {
	Typename *string                                                                           `json:"__typename"`
	Contract *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract `json:"contract"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity) GetTypename() *string {
	return v.Typename
}

// GetContract returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity.Contract, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunity) GetContract() *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract {
	return v.Contract
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract includes the requested fields of the GraphQL type Contract.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract struct {
	ContractAddress *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress `json:"contractAddress"`
	Chain           *Chain                                                                                                       `json:"chain"`
	ProfileImageURL *string                                                                                                      `json:"profileImageURL"`
}

// GetContractAddress returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract.ContractAddress, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract) GetContractAddress() *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress {
	return v.ContractAddress
}

// GetChain returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract.Chain, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract) GetChain() *Chain {
	return v.Chain
}

// GetProfileImageURL returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract.ProfileImageURL, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContract) GetProfileImageURL() *string {
	return v.ProfileImageURL
}

// communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress includes the requested fields of the GraphQL type ChainAddress.
type communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress struct {
	Address *persist.Address `json:"address"`
	Chain   *Chain           `json:"chain"`
}

// GetAddress returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress.Address, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress) GetAddress() *persist.Address {
	return v.Address
}

// GetChain returns communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress.Chain, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunitySubtypeContractCommunityContractContractAddressChainAddress) GetChain() *Chain {
	return v.Chain
}

// communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection includes the requested fields of the GraphQL type TokensConnection.
type communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection struct {
	Edges []*communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge `json:"edges"`
}

// GetEdges returns communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection.Edges, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnection) GetEdges() []*communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge {
	return v.Edges
}

// communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge includes the requested fields of the GraphQL type TokenEdge.
type communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge struct {
	Node *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken `json:"node"`
}

// GetNode returns communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge.Node, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdge) GetNode() *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken {
	return v.Node
}

// communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken includes the requested fields of the GraphQL type Token.
type communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken struct {
	tokenFrag `json:"-"`
}

// GetDbid returns communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken.Dbid, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken) GetDbid() persist.DBID {
	return v.tokenFrag.Dbid
}

// GetDefinition returns communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken.Definition, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken) GetDefinition() tokenFragDefinitionTokenDefinition {
	return v.tokenFrag.Definition
}

func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.tokenFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken struct {
	Dbid persist.DBID `json:"dbid"`

	Definition tokenFragDefinitionTokenDefinition `json:"definition"`
}

func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdCommunityTokensTokensConnectionEdgesTokenEdgeNodeToken

	retval.Dbid = v.tokenFrag.Dbid
	retval.Definition = v.tokenFrag.Definition
	return &retval, nil
}

// communityDigestEntityQueryCommunityByIdErrCommunityNotFound includes the requested fields of the GraphQL type ErrCommunityNotFound.
type communityDigestEntityQueryCommunityByIdErrCommunityNotFound struct {
	Typename                      *string `json:"__typename"`
	errorFragErrCommunityNotFound `json:"-"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdErrCommunityNotFound.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) GetTypename() *string {
	return v.Typename
}

// GetMessage returns communityDigestEntityQueryCommunityByIdErrCommunityNotFound.Message, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) GetMessage() string {
	return v.errorFragErrCommunityNotFound.Message
}

func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdErrCommunityNotFound
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdErrCommunityNotFound = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.errorFragErrCommunityNotFound)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdErrCommunityNotFound struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdErrCommunityNotFound) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdErrCommunityNotFound, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdErrCommunityNotFound

	retval.Typename = v.Typename
	retval.Message = v.errorFragErrCommunityNotFound.Message
	return &retval, nil
}

// communityDigestEntityQueryCommunityByIdErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type communityDigestEntityQueryCommunityByIdErrInvalidInput struct {
	Typename                 *string `json:"__typename"`
	errorFragErrInvalidInput `json:"-"`
}

// GetTypename returns communityDigestEntityQueryCommunityByIdErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns communityDigestEntityQueryCommunityByIdErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) GetMessage() string {
	return v.errorFragErrInvalidInput.Message
}

func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryCommunityByIdErrInvalidInput
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryCommunityByIdErrInvalidInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.errorFragErrInvalidInput)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryCommunityByIdErrInvalidInput struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryCommunityByIdErrInvalidInput) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryCommunityByIdErrInvalidInput, error) {
	var retval __premarshalcommunityDigestEntityQueryCommunityByIdErrInvalidInput

	retval.Typename = v.Typename
	retval.Message = v.errorFragErrInvalidInput.Message
	return &retval, nil
}

// communityDigestEntityQueryResponse is returned by communityDigestEntityQuery on success.
type communityDigestEntityQueryResponse struct {
	CommunityById *communityDigestEntityQueryCommunityByIdCommunityByIdOrError `json:"-"`
}

// GetCommunityById returns communityDigestEntityQueryResponse.CommunityById, and is useful for accessing the field via an interface.
func (v *communityDigestEntityQueryResponse) GetCommunityById() *communityDigestEntityQueryCommunityByIdCommunityByIdOrError {
	return v.CommunityById
}

func (v *communityDigestEntityQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*communityDigestEntityQueryResponse
		CommunityById json.RawMessage `json:"communityById"`
		graphql.NoUnmarshalJSON
	}
	firstPass.communityDigestEntityQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CommunityById
		src := firstPass.CommunityById
		if len(src) != 0 && string(src) != "null" {
			*dst = new(communityDigestEntityQueryCommunityByIdCommunityByIdOrError)
			err = __unmarshalcommunityDigestEntityQueryCommunityByIdCommunityByIdOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal communityDigestEntityQueryResponse.CommunityById: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcommunityDigestEntityQueryResponse struct {
	CommunityById json.RawMessage `json:"communityById"`
}

func (v *communityDigestEntityQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *communityDigestEntityQueryResponse) __premarshalJSON() (*__premarshalcommunityDigestEntityQueryResponse, error) {
	var retval __premarshalcommunityDigestEntityQueryResponse

	{

		dst := &retval.CommunityById
		src := v.CommunityById
		if src != nil {
			var err error
			*dst, err = __marshalcommunityDigestEntityQueryCommunityByIdCommunityByIdOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal communityDigestEntityQueryResponse.CommunityById: %w", err)
			}
		}
	}
	return &retval, nil
}

// definitionFrag includes the GraphQL fields of TokenDefinition requested by the fragment definitionFrag.
type definitionFrag struct {
	Name        *string                          `json:"name"`
	Description *string                          `json:"description"`
	Media       *definitionFragMediaMediaSubtype `json:"-"`
}

// GetName returns definitionFrag.Name, and is useful for accessing the field via an interface.
func (v *definitionFrag) GetName() *string { return v.Name }

// GetDescription returns definitionFrag.Description, and is useful for accessing the field via an interface.
func (v *definitionFrag) GetDescription() *string { return v.Description }

// GetMedia returns definitionFrag.Media, and is useful for accessing the field via an interface.
func (v *definitionFrag) GetMedia() *definitionFragMediaMediaSubtype { return v.Media }

func (v *definitionFrag) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFrag
		Media json.RawMessage `json:"media"`
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFrag = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Media
		src := firstPass.Media
		if len(src) != 0 && string(src) != "null" {
			*dst = new(definitionFragMediaMediaSubtype)
			err = __unmarshaldefinitionFragMediaMediaSubtype(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal definitionFrag.Media: %w", err)
			}
		}
	}
	return nil
}

type __premarshaldefinitionFrag struct {
	Name *string `json:"name"`

	Description *string `json:"description"`

	Media json.RawMessage `json:"media"`
}

func (v *definitionFrag) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFrag) __premarshalJSON() (*__premarshaldefinitionFrag, error) {
	var retval __premarshaldefinitionFrag

	retval.Name = v.Name
	retval.Description = v.Description
	{

		dst := &retval.Media
		src := v.Media
		if src != nil {
			var err error
			*dst, err = __marshaldefinitionFragMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal definitionFrag.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// definitionFragMediaAudioMedia includes the requested fields of the GraphQL type AudioMedia.
type definitionFragMediaAudioMedia struct {
	Typename                *string `json:"__typename"`
	mediaFragmentAudioMedia `json:"-"`
}

// GetTypename returns definitionFragMediaAudioMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaAudioMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaAudioMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaAudioMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentAudioMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaAudioMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaAudioMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentAudioMedia.FallbackMedia
}

func (v *definitionFragMediaAudioMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaAudioMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaAudioMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentAudioMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaAudioMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaAudioMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaAudioMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaAudioMedia, error) {
	var retval __premarshaldefinitionFragMediaAudioMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentAudioMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentAudioMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaGIFMedia includes the requested fields of the GraphQL type GIFMedia.
type definitionFragMediaGIFMedia struct {
	Typename              *string `json:"__typename"`
	mediaFragmentGIFMedia `json:"-"`
}

// GetTypename returns definitionFragMediaGIFMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGIFMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaGIFMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGIFMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentGIFMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaGIFMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGIFMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentGIFMedia.FallbackMedia
}

func (v *definitionFragMediaGIFMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaGIFMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaGIFMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentGIFMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaGIFMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaGIFMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaGIFMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaGIFMedia, error) {
	var retval __premarshaldefinitionFragMediaGIFMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentGIFMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentGIFMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaGltfMedia includes the requested fields of the GraphQL type GltfMedia.
type definitionFragMediaGltfMedia struct {
	Typename               *string `json:"__typename"`
	mediaFragmentGltfMedia `json:"-"`
}

// GetTypename returns definitionFragMediaGltfMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGltfMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaGltfMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGltfMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentGltfMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaGltfMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaGltfMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentGltfMedia.FallbackMedia
}

func (v *definitionFragMediaGltfMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaGltfMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaGltfMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentGltfMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaGltfMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaGltfMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaGltfMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaGltfMedia, error) {
	var retval __premarshaldefinitionFragMediaGltfMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentGltfMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentGltfMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaHtmlMedia includes the requested fields of the GraphQL type HtmlMedia.
type definitionFragMediaHtmlMedia struct {
	Typename               *string `json:"__typename"`
	mediaFragmentHtmlMedia `json:"-"`
}

// GetTypename returns definitionFragMediaHtmlMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaHtmlMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaHtmlMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaHtmlMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentHtmlMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaHtmlMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaHtmlMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentHtmlMedia.FallbackMedia
}

func (v *definitionFragMediaHtmlMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaHtmlMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaHtmlMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentHtmlMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaHtmlMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaHtmlMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaHtmlMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaHtmlMedia, error) {
	var retval __premarshaldefinitionFragMediaHtmlMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentHtmlMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentHtmlMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaImageMedia includes the requested fields of the GraphQL type ImageMedia.
type definitionFragMediaImageMedia struct {
	Typename                *string `json:"__typename"`
	mediaFragmentImageMedia `json:"-"`
}

// GetTypename returns definitionFragMediaImageMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaImageMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaImageMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaImageMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentImageMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaImageMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaImageMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentImageMedia.FallbackMedia
}

func (v *definitionFragMediaImageMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaImageMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaImageMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentImageMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaImageMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaImageMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaImageMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaImageMedia, error) {
	var retval __premarshaldefinitionFragMediaImageMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentImageMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentImageMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaInvalidMedia includes the requested fields of the GraphQL type InvalidMedia.
type definitionFragMediaInvalidMedia struct {
	Typename                  *string `json:"__typename"`
	mediaFragmentInvalidMedia `json:"-"`
}

// GetTypename returns definitionFragMediaInvalidMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaInvalidMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaInvalidMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaInvalidMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentInvalidMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaInvalidMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaInvalidMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentInvalidMedia.FallbackMedia
}

func (v *definitionFragMediaInvalidMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaInvalidMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaInvalidMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentInvalidMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaInvalidMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaInvalidMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaInvalidMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaInvalidMedia, error) {
	var retval __premarshaldefinitionFragMediaInvalidMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentInvalidMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentInvalidMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaJsonMedia includes the requested fields of the GraphQL type JsonMedia.
type definitionFragMediaJsonMedia struct {
	Typename               *string `json:"__typename"`
	mediaFragmentJsonMedia `json:"-"`
}

// GetTypename returns definitionFragMediaJsonMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaJsonMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaJsonMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaJsonMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentJsonMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaJsonMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaJsonMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentJsonMedia.FallbackMedia
}

func (v *definitionFragMediaJsonMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaJsonMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaJsonMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentJsonMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaJsonMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaJsonMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaJsonMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaJsonMedia, error) {
	var retval __premarshaldefinitionFragMediaJsonMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentJsonMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentJsonMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaMediaSubtype includes the requested fields of the GraphQL interface MediaSubtype.
//
// definitionFragMediaMediaSubtype is implemented by the following types:
// definitionFragMediaAudioMedia
// definitionFragMediaGIFMedia
// definitionFragMediaGltfMedia
// definitionFragMediaHtmlMedia
// definitionFragMediaImageMedia
// definitionFragMediaInvalidMedia
// definitionFragMediaJsonMedia
// definitionFragMediaPdfMedia
// definitionFragMediaSyncingMedia
// definitionFragMediaTextMedia
// definitionFragMediaUnknownMedia
// definitionFragMediaVideoMedia
type definitionFragMediaMediaSubtype interface {
	implementsGraphQLInterfacedefinitionFragMediaMediaSubtype()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *definitionFragMediaAudioMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {}
func (v *definitionFragMediaGIFMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype()   {}
func (v *definitionFragMediaGltfMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype()  {}
func (v *definitionFragMediaHtmlMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype()  {}
func (v *definitionFragMediaImageMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {}
func (v *definitionFragMediaInvalidMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {
}
func (v *definitionFragMediaJsonMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {}
func (v *definitionFragMediaPdfMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype()  {}
func (v *definitionFragMediaSyncingMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {
}
func (v *definitionFragMediaTextMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {}
func (v *definitionFragMediaUnknownMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {
}
func (v *definitionFragMediaVideoMedia) implementsGraphQLInterfacedefinitionFragMediaMediaSubtype() {}

func __unmarshaldefinitionFragMediaMediaSubtype(b []byte, v *definitionFragMediaMediaSubtype) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AudioMedia":
		*v = new(definitionFragMediaAudioMedia)
		return json.Unmarshal(b, *v)
	case "GIFMedia":
		*v = new(definitionFragMediaGIFMedia)
		return json.Unmarshal(b, *v)
	case "GltfMedia":
		*v = new(definitionFragMediaGltfMedia)
		return json.Unmarshal(b, *v)
	case "HtmlMedia":
		*v = new(definitionFragMediaHtmlMedia)
		return json.Unmarshal(b, *v)
	case "ImageMedia":
		*v = new(definitionFragMediaImageMedia)
		return json.Unmarshal(b, *v)
	case "InvalidMedia":
		*v = new(definitionFragMediaInvalidMedia)
		return json.Unmarshal(b, *v)
	case "JsonMedia":
		*v = new(definitionFragMediaJsonMedia)
		return json.Unmarshal(b, *v)
	case "PdfMedia":
		*v = new(definitionFragMediaPdfMedia)
		return json.Unmarshal(b, *v)
	case "SyncingMedia":
		*v = new(definitionFragMediaSyncingMedia)
		return json.Unmarshal(b, *v)
	case "TextMedia":
		*v = new(definitionFragMediaTextMedia)
		return json.Unmarshal(b, *v)
	case "UnknownMedia":
		*v = new(definitionFragMediaUnknownMedia)
		return json.Unmarshal(b, *v)
	case "VideoMedia":
		*v = new(definitionFragMediaVideoMedia)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MediaSubtype.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for definitionFragMediaMediaSubtype: "%v"`, tn.TypeName)
	}
}

func __marshaldefinitionFragMediaMediaSubtype(v *definitionFragMediaMediaSubtype) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *definitionFragMediaAudioMedia:
		typename = "AudioMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaAudioMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaGIFMedia:
		typename = "GIFMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaGIFMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaGltfMedia:
		typename = "GltfMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaGltfMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaHtmlMedia:
		typename = "HtmlMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaHtmlMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaImageMedia:
		typename = "ImageMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaImageMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaInvalidMedia:
		typename = "InvalidMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaInvalidMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaJsonMedia:
		typename = "JsonMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaJsonMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaPdfMedia:
		typename = "PdfMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaPdfMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaSyncingMedia:
		typename = "SyncingMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaSyncingMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaTextMedia:
		typename = "TextMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaTextMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaUnknownMedia:
		typename = "UnknownMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaUnknownMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case *definitionFragMediaVideoMedia:
		typename = "VideoMedia"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshaldefinitionFragMediaVideoMedia
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for definitionFragMediaMediaSubtype: "%T"`, v)
	}
}

// definitionFragMediaPdfMedia includes the requested fields of the GraphQL type PdfMedia.
type definitionFragMediaPdfMedia struct {
	Typename              *string `json:"__typename"`
	mediaFragmentPdfMedia `json:"-"`
}

// GetTypename returns definitionFragMediaPdfMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaPdfMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaPdfMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaPdfMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentPdfMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaPdfMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaPdfMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentPdfMedia.FallbackMedia
}

func (v *definitionFragMediaPdfMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaPdfMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaPdfMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentPdfMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaPdfMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaPdfMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaPdfMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaPdfMedia, error) {
	var retval __premarshaldefinitionFragMediaPdfMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentPdfMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentPdfMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaSyncingMedia includes the requested fields of the GraphQL type SyncingMedia.
type definitionFragMediaSyncingMedia struct {
	Typename                  *string `json:"__typename"`
	mediaFragmentSyncingMedia `json:"-"`
}

// GetTypename returns definitionFragMediaSyncingMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaSyncingMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaSyncingMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaSyncingMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentSyncingMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaSyncingMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaSyncingMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentSyncingMedia.FallbackMedia
}

func (v *definitionFragMediaSyncingMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaSyncingMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaSyncingMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentSyncingMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaSyncingMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaSyncingMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaSyncingMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaSyncingMedia, error) {
	var retval __premarshaldefinitionFragMediaSyncingMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentSyncingMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentSyncingMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaTextMedia includes the requested fields of the GraphQL type TextMedia.
type definitionFragMediaTextMedia struct {
	Typename               *string `json:"__typename"`
	mediaFragmentTextMedia `json:"-"`
}

// GetTypename returns definitionFragMediaTextMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaTextMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaTextMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaTextMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentTextMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaTextMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaTextMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentTextMedia.FallbackMedia
}

func (v *definitionFragMediaTextMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaTextMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaTextMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentTextMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaTextMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaTextMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaTextMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaTextMedia, error) {
	var retval __premarshaldefinitionFragMediaTextMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentTextMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentTextMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaUnknownMedia includes the requested fields of the GraphQL type UnknownMedia.
type definitionFragMediaUnknownMedia struct {
	Typename                  *string `json:"__typename"`
	mediaFragmentUnknownMedia `json:"-"`
}

// GetTypename returns definitionFragMediaUnknownMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaUnknownMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaUnknownMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaUnknownMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentUnknownMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaUnknownMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaUnknownMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentUnknownMedia.FallbackMedia
}

func (v *definitionFragMediaUnknownMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaUnknownMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaUnknownMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentUnknownMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaUnknownMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaUnknownMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaUnknownMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaUnknownMedia, error) {
	var retval __premarshaldefinitionFragMediaUnknownMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentUnknownMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentUnknownMedia.FallbackMedia
	return &retval, nil
}

// definitionFragMediaVideoMedia includes the requested fields of the GraphQL type VideoMedia.
type definitionFragMediaVideoMedia struct {
	Typename                *string `json:"__typename"`
	mediaFragmentVideoMedia `json:"-"`
}

// GetTypename returns definitionFragMediaVideoMedia.Typename, and is useful for accessing the field via an interface.
func (v *definitionFragMediaVideoMedia) GetTypename() *string { return v.Typename }

// GetPreviewURLs returns definitionFragMediaVideoMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *definitionFragMediaVideoMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.mediaFragmentVideoMedia.PreviewURLs
}

// GetFallbackMedia returns definitionFragMediaVideoMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *definitionFragMediaVideoMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.mediaFragmentVideoMedia.FallbackMedia
}

func (v *definitionFragMediaVideoMedia) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*definitionFragMediaVideoMedia
		graphql.NoUnmarshalJSON
	}
	firstPass.definitionFragMediaVideoMedia = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.mediaFragmentVideoMedia)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaldefinitionFragMediaVideoMedia struct {
	Typename *string `json:"__typename"`

	PreviewURLs *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`

	FallbackMedia *mediaFragmentFallbackMedia `json:"fallbackMedia"`
}

func (v *definitionFragMediaVideoMedia) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *definitionFragMediaVideoMedia) __premarshalJSON() (*__premarshaldefinitionFragMediaVideoMedia, error) {
	var retval __premarshaldefinitionFragMediaVideoMedia

	retval.Typename = v.Typename
	retval.PreviewURLs = v.mediaFragmentVideoMedia.PreviewURLs
	retval.FallbackMedia = v.mediaFragmentVideoMedia.FallbackMedia
	return &retval, nil
}

// errorFrag includes the GraphQL fields of Error requested by the fragment errorFrag.
//
// errorFrag is implemented by the following types:
// errorFragErrCollectionNotFound
// errorFragErrTokenNotFound
// errorFragErrUnknownAction
// errorFragErrFeedEventNotFound
// errorFragErrPostNotFound
// errorFragErrGalleryNotFound
// errorFragErrAuthenticationFailed
// errorFragErrEmailUnverified
// errorFragErrEmailAlreadyUsed
// errorFragErrUserAlreadyExists
// errorFragErrUsernameNotAvailable
// errorFragErrAddressOwnedByUser
// errorFragErrUserNotFound
// errorFragErrCommunityNotFound
// errorFragErrNotAuthorized
// errorFragErrInvalidInput
// errorFragErrNoCookie
// errorFragErrInvalidToken
// errorFragErrSessionInvalidated
// errorFragErrNeedsToReconnectSocial
// errorFragErrDoesNotOwnRequiredToken
// errorFragErrSyncFailed
// errorFragErrAdmireNotFound
// errorFragErrAdmireAlreadyExists
// errorFragErrCommentNotFound
// errorFragErrPushTokenBelongsToAnotherUser
// errorFragErrNoAvatarRecordSet
type errorFrag interface {
	implementsGraphQLInterfaceerrorFrag()
	// GetMessage returns the interface-field "message" from its implementation.
	GetMessage() string
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *errorFragErrCollectionNotFound) implementsGraphQLInterfaceerrorFrag()            {}
func (v *errorFragErrTokenNotFound) implementsGraphQLInterfaceerrorFrag()                 {}
func (v *errorFragErrUnknownAction) implementsGraphQLInterfaceerrorFrag()                 {}
func (v *errorFragErrFeedEventNotFound) implementsGraphQLInterfaceerrorFrag()             {}
func (v *errorFragErrPostNotFound) implementsGraphQLInterfaceerrorFrag()                  {}
func (v *errorFragErrGalleryNotFound) implementsGraphQLInterfaceerrorFrag()               {}
func (v *errorFragErrAuthenticationFailed) implementsGraphQLInterfaceerrorFrag()          {}
func (v *errorFragErrEmailUnverified) implementsGraphQLInterfaceerrorFrag()               {}
func (v *errorFragErrEmailAlreadyUsed) implementsGraphQLInterfaceerrorFrag()              {}
func (v *errorFragErrUserAlreadyExists) implementsGraphQLInterfaceerrorFrag()             {}
func (v *errorFragErrUsernameNotAvailable) implementsGraphQLInterfaceerrorFrag()          {}
func (v *errorFragErrAddressOwnedByUser) implementsGraphQLInterfaceerrorFrag()            {}
func (v *errorFragErrUserNotFound) implementsGraphQLInterfaceerrorFrag()                  {}
func (v *errorFragErrCommunityNotFound) implementsGraphQLInterfaceerrorFrag()             {}
func (v *errorFragErrNotAuthorized) implementsGraphQLInterfaceerrorFrag()                 {}
func (v *errorFragErrInvalidInput) implementsGraphQLInterfaceerrorFrag()                  {}
func (v *errorFragErrNoCookie) implementsGraphQLInterfaceerrorFrag()                      {}
func (v *errorFragErrInvalidToken) implementsGraphQLInterfaceerrorFrag()                  {}
func (v *errorFragErrSessionInvalidated) implementsGraphQLInterfaceerrorFrag()            {}
func (v *errorFragErrNeedsToReconnectSocial) implementsGraphQLInterfaceerrorFrag()        {}
func (v *errorFragErrDoesNotOwnRequiredToken) implementsGraphQLInterfaceerrorFrag()       {}
func (v *errorFragErrSyncFailed) implementsGraphQLInterfaceerrorFrag()                    {}
func (v *errorFragErrAdmireNotFound) implementsGraphQLInterfaceerrorFrag()                {}
func (v *errorFragErrAdmireAlreadyExists) implementsGraphQLInterfaceerrorFrag()           {}
func (v *errorFragErrCommentNotFound) implementsGraphQLInterfaceerrorFrag()               {}
func (v *errorFragErrPushTokenBelongsToAnotherUser) implementsGraphQLInterfaceerrorFrag() {}
func (v *errorFragErrNoAvatarRecordSet) implementsGraphQLInterfaceerrorFrag()             {}

func __unmarshalerrorFrag(b []byte, v *errorFrag) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrCollectionNotFound":
		*v = new(errorFragErrCollectionNotFound)
		return json.Unmarshal(b, *v)
	case "ErrTokenNotFound":
		*v = new(errorFragErrTokenNotFound)
		return json.Unmarshal(b, *v)
	case "ErrUnknownAction":
		*v = new(errorFragErrUnknownAction)
		return json.Unmarshal(b, *v)
	case "ErrFeedEventNotFound":
		*v = new(errorFragErrFeedEventNotFound)
		return json.Unmarshal(b, *v)
	case "ErrPostNotFound":
		*v = new(errorFragErrPostNotFound)
		return json.Unmarshal(b, *v)
	case "ErrGalleryNotFound":
		*v = new(errorFragErrGalleryNotFound)
		return json.Unmarshal(b, *v)
	case "ErrAuthenticationFailed":
		*v = new(errorFragErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ErrEmailUnverified":
		*v = new(errorFragErrEmailUnverified)
		return json.Unmarshal(b, *v)
	case "ErrEmailAlreadyUsed":
		*v = new(errorFragErrEmailAlreadyUsed)
		return json.Unmarshal(b, *v)
	case "ErrUserAlreadyExists":
		*v = new(errorFragErrUserAlreadyExists)
		return json.Unmarshal(b, *v)
	case "ErrUsernameNotAvailable":
		*v = new(errorFragErrUsernameNotAvailable)
		return json.Unmarshal(b, *v)
	case "ErrAddressOwnedByUser":
		*v = new(errorFragErrAddressOwnedByUser)
		return json.Unmarshal(b, *v)
	case "ErrUserNotFound":
		*v = new(errorFragErrUserNotFound)
		return json.Unmarshal(b, *v)
	case "ErrCommunityNotFound":
		*v = new(errorFragErrCommunityNotFound)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(errorFragErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(errorFragErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNoCookie":
		*v = new(errorFragErrNoCookie)
		return json.Unmarshal(b, *v)
	case "ErrInvalidToken":
		*v = new(errorFragErrInvalidToken)
		return json.Unmarshal(b, *v)
	case "ErrSessionInvalidated":
		*v = new(errorFragErrSessionInvalidated)
		return json.Unmarshal(b, *v)
	case "ErrNeedsToReconnectSocial":
		*v = new(errorFragErrNeedsToReconnectSocial)
		return json.Unmarshal(b, *v)
	case "ErrDoesNotOwnRequiredToken":
		*v = new(errorFragErrDoesNotOwnRequiredToken)
		return json.Unmarshal(b, *v)
	case "ErrSyncFailed":
		*v = new(errorFragErrSyncFailed)
		return json.Unmarshal(b, *v)
	case "ErrAdmireNotFound":
		*v = new(errorFragErrAdmireNotFound)
		return json.Unmarshal(b, *v)
	case "ErrAdmireAlreadyExists":
		*v = new(errorFragErrAdmireAlreadyExists)
		return json.Unmarshal(b, *v)
	case "ErrCommentNotFound":
		*v = new(errorFragErrCommentNotFound)
		return json.Unmarshal(b, *v)
	case "ErrPushTokenBelongsToAnotherUser":
		*v = new(errorFragErrPushTokenBelongsToAnotherUser)
		return json.Unmarshal(b, *v)
	case "ErrNoAvatarRecordSet":
		*v = new(errorFragErrNoAvatarRecordSet)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Error.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for errorFrag: "%v"`, tn.TypeName)
	}
}

func __marshalerrorFrag(v *errorFrag) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *errorFragErrCollectionNotFound:
		typename = "ErrCollectionNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrCollectionNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrTokenNotFound:
		typename = "ErrTokenNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrTokenNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrUnknownAction:
		typename = "ErrUnknownAction"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrUnknownAction
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrFeedEventNotFound:
		typename = "ErrFeedEventNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrFeedEventNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrPostNotFound:
		typename = "ErrPostNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrPostNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrGalleryNotFound:
		typename = "ErrGalleryNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrGalleryNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrEmailUnverified:
		typename = "ErrEmailUnverified"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrEmailUnverified
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrEmailAlreadyUsed:
		typename = "ErrEmailAlreadyUsed"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrEmailAlreadyUsed
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrUserAlreadyExists:
		typename = "ErrUserAlreadyExists"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrUserAlreadyExists
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrUsernameNotAvailable:
		typename = "ErrUsernameNotAvailable"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrUsernameNotAvailable
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrAddressOwnedByUser:
		typename = "ErrAddressOwnedByUser"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrAddressOwnedByUser
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrUserNotFound:
		typename = "ErrUserNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrUserNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrCommunityNotFound:
		typename = "ErrCommunityNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrCommunityNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrNoCookie:
		typename = "ErrNoCookie"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrNoCookie
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrInvalidToken:
		typename = "ErrInvalidToken"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrInvalidToken
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrSessionInvalidated:
		typename = "ErrSessionInvalidated"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrSessionInvalidated
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrNeedsToReconnectSocial:
		typename = "ErrNeedsToReconnectSocial"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrNeedsToReconnectSocial
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrDoesNotOwnRequiredToken:
		typename = "ErrDoesNotOwnRequiredToken"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrDoesNotOwnRequiredToken
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrSyncFailed:
		typename = "ErrSyncFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrSyncFailed
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrAdmireNotFound:
		typename = "ErrAdmireNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrAdmireNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrAdmireAlreadyExists:
		typename = "ErrAdmireAlreadyExists"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrAdmireAlreadyExists
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrCommentNotFound:
		typename = "ErrCommentNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrCommentNotFound
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrPushTokenBelongsToAnotherUser:
		typename = "ErrPushTokenBelongsToAnotherUser"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrPushTokenBelongsToAnotherUser
		}{typename, v}
		return json.Marshal(result)
	case *errorFragErrNoAvatarRecordSet:
		typename = "ErrNoAvatarRecordSet"

		result := struct {
			TypeName string `json:"__typename"`
			*errorFragErrNoAvatarRecordSet
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for errorFrag: "%T"`, v)
	}
}

// errorFrag includes the GraphQL fields of ErrAddressOwnedByUser requested by the fragment errorFrag.
type errorFragErrAddressOwnedByUser struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrAddressOwnedByUser.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrAddressOwnedByUser) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrAddressOwnedByUser.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrAddressOwnedByUser) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrAdmireAlreadyExists requested by the fragment errorFrag.
type errorFragErrAdmireAlreadyExists struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrAdmireAlreadyExists.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrAdmireAlreadyExists) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrAdmireAlreadyExists.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrAdmireAlreadyExists) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrAdmireNotFound requested by the fragment errorFrag.
type errorFragErrAdmireNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrAdmireNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrAdmireNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrAdmireNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrAdmireNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrAuthenticationFailed requested by the fragment errorFrag.
type errorFragErrAuthenticationFailed struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrAuthenticationFailed) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrAuthenticationFailed) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrCollectionNotFound requested by the fragment errorFrag.
type errorFragErrCollectionNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrCollectionNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrCollectionNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrCollectionNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrCollectionNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrCommentNotFound requested by the fragment errorFrag.
type errorFragErrCommentNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrCommentNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrCommentNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrCommentNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrCommentNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrCommunityNotFound requested by the fragment errorFrag.
type errorFragErrCommunityNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrCommunityNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrCommunityNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrCommunityNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrCommunityNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrDoesNotOwnRequiredToken requested by the fragment errorFrag.
type errorFragErrDoesNotOwnRequiredToken struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrDoesNotOwnRequiredToken.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrDoesNotOwnRequiredToken) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrDoesNotOwnRequiredToken.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrDoesNotOwnRequiredToken) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrEmailAlreadyUsed requested by the fragment errorFrag.
type errorFragErrEmailAlreadyUsed struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrEmailAlreadyUsed.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrEmailAlreadyUsed) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrEmailAlreadyUsed.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrEmailAlreadyUsed) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrEmailUnverified requested by the fragment errorFrag.
type errorFragErrEmailUnverified struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrEmailUnverified.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrEmailUnverified) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrEmailUnverified.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrEmailUnverified) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrFeedEventNotFound requested by the fragment errorFrag.
type errorFragErrFeedEventNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrFeedEventNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrFeedEventNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrFeedEventNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrFeedEventNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrGalleryNotFound requested by the fragment errorFrag.
type errorFragErrGalleryNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrGalleryNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrGalleryNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrGalleryNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrGalleryNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrInvalidInput requested by the fragment errorFrag.
type errorFragErrInvalidInput struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrInvalidInput) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrInvalidInput) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrInvalidToken requested by the fragment errorFrag.
type errorFragErrInvalidToken struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrInvalidToken.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrInvalidToken) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrInvalidToken.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrInvalidToken) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrNeedsToReconnectSocial requested by the fragment errorFrag.
type errorFragErrNeedsToReconnectSocial struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrNeedsToReconnectSocial.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrNeedsToReconnectSocial) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrNeedsToReconnectSocial.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrNeedsToReconnectSocial) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrNoAvatarRecordSet requested by the fragment errorFrag.
type errorFragErrNoAvatarRecordSet struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrNoAvatarRecordSet.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrNoAvatarRecordSet) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrNoAvatarRecordSet.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrNoAvatarRecordSet) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrNoCookie requested by the fragment errorFrag.
type errorFragErrNoCookie struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrNoCookie.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrNoCookie) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrNoCookie.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrNoCookie) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrNotAuthorized requested by the fragment errorFrag.
type errorFragErrNotAuthorized struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrNotAuthorized) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrNotAuthorized) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrPostNotFound requested by the fragment errorFrag.
type errorFragErrPostNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrPostNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrPostNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrPostNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrPostNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrPushTokenBelongsToAnotherUser requested by the fragment errorFrag.
type errorFragErrPushTokenBelongsToAnotherUser struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrPushTokenBelongsToAnotherUser.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrPushTokenBelongsToAnotherUser) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrPushTokenBelongsToAnotherUser.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrPushTokenBelongsToAnotherUser) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrSessionInvalidated requested by the fragment errorFrag.
type errorFragErrSessionInvalidated struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrSessionInvalidated.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrSessionInvalidated) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrSessionInvalidated.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrSessionInvalidated) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrSyncFailed requested by the fragment errorFrag.
type errorFragErrSyncFailed struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrSyncFailed.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrSyncFailed) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrSyncFailed.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrSyncFailed) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrTokenNotFound requested by the fragment errorFrag.
type errorFragErrTokenNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrTokenNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrTokenNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrTokenNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrTokenNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrUnknownAction requested by the fragment errorFrag.
type errorFragErrUnknownAction struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrUnknownAction.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrUnknownAction) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrUnknownAction.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrUnknownAction) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrUserAlreadyExists requested by the fragment errorFrag.
type errorFragErrUserAlreadyExists struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrUserAlreadyExists.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrUserAlreadyExists) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrUserAlreadyExists.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrUserAlreadyExists) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrUserNotFound requested by the fragment errorFrag.
type errorFragErrUserNotFound struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrUserNotFound.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrUserNotFound) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrUserNotFound.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrUserNotFound) GetTypename() *string { return v.Typename }

// errorFrag includes the GraphQL fields of ErrUsernameNotAvailable requested by the fragment errorFrag.
type errorFragErrUsernameNotAvailable struct {
	Message  string  `json:"message"`
	Typename *string `json:"__typename"`
}

// GetMessage returns errorFragErrUsernameNotAvailable.Message, and is useful for accessing the field via an interface.
func (v *errorFragErrUsernameNotAvailable) GetMessage() string { return v.Message }

// GetTypename returns errorFragErrUsernameNotAvailable.Typename, and is useful for accessing the field via an interface.
func (v *errorFragErrUsernameNotAvailable) GetTypename() *string { return v.Typename }

// galleryDigestEntityQueryGalleryByIdErrGalleryNotFound includes the requested fields of the GraphQL type ErrGalleryNotFound.
type galleryDigestEntityQueryGalleryByIdErrGalleryNotFound struct {
	Typename                    *string `json:"__typename"`
	errorFragErrGalleryNotFound `json:"-"`
}

// GetTypename returns galleryDigestEntityQueryGalleryByIdErrGalleryNotFound.Typename, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) GetTypename() *string {
	return v.Typename
}

// GetMessage returns galleryDigestEntityQueryGalleryByIdErrGalleryNotFound.Message, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) GetMessage() string {
	return v.errorFragErrGalleryNotFound.Message
}

func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*galleryDigestEntityQueryGalleryByIdErrGalleryNotFound
		graphql.NoUnmarshalJSON
	}
	firstPass.galleryDigestEntityQueryGalleryByIdErrGalleryNotFound = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.errorFragErrGalleryNotFound)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgalleryDigestEntityQueryGalleryByIdErrGalleryNotFound struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) __premarshalJSON() (*__premarshalgalleryDigestEntityQueryGalleryByIdErrGalleryNotFound, error) {
	var retval __premarshalgalleryDigestEntityQueryGalleryByIdErrGalleryNotFound

	retval.Typename = v.Typename
	retval.Message = v.errorFragErrGalleryNotFound.Message
	return &retval, nil
}

// galleryDigestEntityQueryGalleryByIdGallery includes the requested fields of the GraphQL type Gallery.
type galleryDigestEntityQueryGalleryByIdGallery struct {
	Typename      *string                                                                 `json:"__typename"`
	Dbid          persist.DBID                                                            `json:"dbid"`
	Owner         *galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser             `json:"owner"`
	Name          *string                                                                 `json:"name"`
	Description   *string                                                                 `json:"description"`
	TokenPreviews []*galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet `json:"tokenPreviews"`
}

// GetTypename returns galleryDigestEntityQueryGalleryByIdGallery.Typename, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetTypename() *string { return v.Typename }

// GetDbid returns galleryDigestEntityQueryGalleryByIdGallery.Dbid, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetDbid() persist.DBID { return v.Dbid }

// GetOwner returns galleryDigestEntityQueryGalleryByIdGallery.Owner, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetOwner() *galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser {
	return v.Owner
}

// GetName returns galleryDigestEntityQueryGalleryByIdGallery.Name, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetName() *string { return v.Name }

// GetDescription returns galleryDigestEntityQueryGalleryByIdGallery.Description, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetDescription() *string { return v.Description }

// GetTokenPreviews returns galleryDigestEntityQueryGalleryByIdGallery.TokenPreviews, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGallery) GetTokenPreviews() []*galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet {
	return v.TokenPreviews
}

// galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError includes the requested fields of the GraphQL interface GalleryByIdPayloadOrError.
//
// galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError is implemented by the following types:
// galleryDigestEntityQueryGalleryByIdErrGalleryNotFound
// galleryDigestEntityQueryGalleryByIdGallery
type galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError interface {
	implementsGraphQLInterfacegalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound) implementsGraphQLInterfacegalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError() {
}
func (v *galleryDigestEntityQueryGalleryByIdGallery) implementsGraphQLInterfacegalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError() {
}

func __unmarshalgalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError(b []byte, v *galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrGalleryNotFound":
		*v = new(galleryDigestEntityQueryGalleryByIdErrGalleryNotFound)
		return json.Unmarshal(b, *v)
	case "Gallery":
		*v = new(galleryDigestEntityQueryGalleryByIdGallery)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GalleryByIdPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalgalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError(v *galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *galleryDigestEntityQueryGalleryByIdErrGalleryNotFound:
		typename = "ErrGalleryNotFound"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalgalleryDigestEntityQueryGalleryByIdErrGalleryNotFound
		}{typename, premarshaled}
		return json.Marshal(result)
	case *galleryDigestEntityQueryGalleryByIdGallery:
		typename = "Gallery"

		result := struct {
			TypeName string `json:"__typename"`
			*galleryDigestEntityQueryGalleryByIdGallery
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError: "%T"`, v)
	}
}

// galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser struct {
	Username *string `json:"username"`
}

// GetUsername returns galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGalleryOwnerGalleryUser) GetUsername() *string {
	return v.Username
}

// galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet includes the requested fields of the GraphQL type PreviewURLSet.
type galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet struct {
	Small *string `json:"small"`
}

// GetSmall returns galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet.Small, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryGalleryByIdGalleryTokenPreviewsPreviewURLSet) GetSmall() *string {
	return v.Small
}

// galleryDigestEntityQueryResponse is returned by galleryDigestEntityQuery on success.
type galleryDigestEntityQueryResponse struct {
	GalleryById *galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError `json:"-"`
}

// GetGalleryById returns galleryDigestEntityQueryResponse.GalleryById, and is useful for accessing the field via an interface.
func (v *galleryDigestEntityQueryResponse) GetGalleryById() *galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError {
	return v.GalleryById
}

func (v *galleryDigestEntityQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*galleryDigestEntityQueryResponse
		GalleryById json.RawMessage `json:"galleryById"`
		graphql.NoUnmarshalJSON
	}
	firstPass.galleryDigestEntityQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GalleryById
		src := firstPass.GalleryById
		if len(src) != 0 && string(src) != "null" {
			*dst = new(galleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError)
			err = __unmarshalgalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal galleryDigestEntityQueryResponse.GalleryById: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgalleryDigestEntityQueryResponse struct {
	GalleryById json.RawMessage `json:"galleryById"`
}

func (v *galleryDigestEntityQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *galleryDigestEntityQueryResponse) __premarshalJSON() (*__premarshalgalleryDigestEntityQueryResponse, error) {
	var retval __premarshalgalleryDigestEntityQueryResponse

	{

		dst := &retval.GalleryById
		src := v.GalleryById
		if src != nil {
			var err error
			*dst, err = __marshalgalleryDigestEntityQueryGalleryByIdGalleryByIdPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal galleryDigestEntityQueryResponse.GalleryById: %w", err)
			}
		}
	}
	return &retval, nil
}

// mediaFragment includes the GraphQL fields of Media requested by the fragment mediaFragment.
//
// mediaFragment is implemented by the following types:
// mediaFragmentImageMedia
// mediaFragmentGIFMedia
// mediaFragmentVideoMedia
// mediaFragmentAudioMedia
// mediaFragmentTextMedia
// mediaFragmentPdfMedia
// mediaFragmentHtmlMedia
// mediaFragmentJsonMedia
// mediaFragmentGltfMedia
// mediaFragmentUnknownMedia
// mediaFragmentSyncingMedia
// mediaFragmentInvalidMedia
type mediaFragment interface {
	implementsGraphQLInterfacemediaFragment()
	// GetPreviewURLs returns the interface-field "previewURLs" from its implementation.
	GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet
	// GetFallbackMedia returns the interface-field "fallbackMedia" from its implementation.
	GetFallbackMedia() *mediaFragmentFallbackMedia
}

func (v *mediaFragmentImageMedia) implementsGraphQLInterfacemediaFragment()   {}
func (v *mediaFragmentGIFMedia) implementsGraphQLInterfacemediaFragment()     {}
func (v *mediaFragmentVideoMedia) implementsGraphQLInterfacemediaFragment()   {}
func (v *mediaFragmentAudioMedia) implementsGraphQLInterfacemediaFragment()   {}
func (v *mediaFragmentTextMedia) implementsGraphQLInterfacemediaFragment()    {}
func (v *mediaFragmentPdfMedia) implementsGraphQLInterfacemediaFragment()     {}
func (v *mediaFragmentHtmlMedia) implementsGraphQLInterfacemediaFragment()    {}
func (v *mediaFragmentJsonMedia) implementsGraphQLInterfacemediaFragment()    {}
func (v *mediaFragmentGltfMedia) implementsGraphQLInterfacemediaFragment()    {}
func (v *mediaFragmentUnknownMedia) implementsGraphQLInterfacemediaFragment() {}
func (v *mediaFragmentSyncingMedia) implementsGraphQLInterfacemediaFragment() {}
func (v *mediaFragmentInvalidMedia) implementsGraphQLInterfacemediaFragment() {}

func __unmarshalmediaFragment(b []byte, v *mediaFragment) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ImageMedia":
		*v = new(mediaFragmentImageMedia)
		return json.Unmarshal(b, *v)
	case "GIFMedia":
		*v = new(mediaFragmentGIFMedia)
		return json.Unmarshal(b, *v)
	case "VideoMedia":
		*v = new(mediaFragmentVideoMedia)
		return json.Unmarshal(b, *v)
	case "AudioMedia":
		*v = new(mediaFragmentAudioMedia)
		return json.Unmarshal(b, *v)
	case "TextMedia":
		*v = new(mediaFragmentTextMedia)
		return json.Unmarshal(b, *v)
	case "PdfMedia":
		*v = new(mediaFragmentPdfMedia)
		return json.Unmarshal(b, *v)
	case "HtmlMedia":
		*v = new(mediaFragmentHtmlMedia)
		return json.Unmarshal(b, *v)
	case "JsonMedia":
		*v = new(mediaFragmentJsonMedia)
		return json.Unmarshal(b, *v)
	case "GltfMedia":
		*v = new(mediaFragmentGltfMedia)
		return json.Unmarshal(b, *v)
	case "UnknownMedia":
		*v = new(mediaFragmentUnknownMedia)
		return json.Unmarshal(b, *v)
	case "SyncingMedia":
		*v = new(mediaFragmentSyncingMedia)
		return json.Unmarshal(b, *v)
	case "InvalidMedia":
		*v = new(mediaFragmentInvalidMedia)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Media.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for mediaFragment: "%v"`, tn.TypeName)
	}
}

func __marshalmediaFragment(v *mediaFragment) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *mediaFragmentImageMedia:
		typename = "ImageMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentImageMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentGIFMedia:
		typename = "GIFMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentGIFMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentVideoMedia:
		typename = "VideoMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentVideoMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentAudioMedia:
		typename = "AudioMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentAudioMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentTextMedia:
		typename = "TextMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentTextMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentPdfMedia:
		typename = "PdfMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentPdfMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentHtmlMedia:
		typename = "HtmlMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentHtmlMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentJsonMedia:
		typename = "JsonMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentJsonMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentGltfMedia:
		typename = "GltfMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentGltfMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentUnknownMedia:
		typename = "UnknownMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentUnknownMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentSyncingMedia:
		typename = "SyncingMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentSyncingMedia
		}{typename, v}
		return json.Marshal(result)
	case *mediaFragmentInvalidMedia:
		typename = "InvalidMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*mediaFragmentInvalidMedia
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for mediaFragment: "%T"`, v)
	}
}

// mediaFragment includes the GraphQL fields of AudioMedia requested by the fragment mediaFragment.
type mediaFragmentAudioMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentAudioMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentAudioMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentAudioMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentAudioMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragmentFallbackMedia includes the requested fields of the GraphQL type FallbackMedia.
type mediaFragmentFallbackMedia struct {
	MediaURL *string `json:"mediaURL"`
}

// GetMediaURL returns mediaFragmentFallbackMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *mediaFragmentFallbackMedia) GetMediaURL() *string { return v.MediaURL }

// mediaFragment includes the GraphQL fields of GIFMedia requested by the fragment mediaFragment.
type mediaFragmentGIFMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentGIFMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentGIFMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentGIFMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentGIFMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragment includes the GraphQL fields of GltfMedia requested by the fragment mediaFragment.
type mediaFragmentGltfMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentGltfMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentGltfMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentGltfMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentGltfMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragment includes the GraphQL fields of HtmlMedia requested by the fragment mediaFragment.
type mediaFragmentHtmlMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentHtmlMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentHtmlMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentHtmlMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentHtmlMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragment includes the GraphQL fields of ImageMedia requested by the fragment mediaFragment.
type mediaFragmentImageMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentImageMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentImageMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentImageMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentImageMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragment includes the GraphQL fields of InvalidMedia requested by the fragment mediaFragment.
type mediaFragmentInvalidMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentInvalidMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentInvalidMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentInvalidMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentInvalidMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragment includes the GraphQL fields of JsonMedia requested by the fragment mediaFragment.
type mediaFragmentJsonMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentJsonMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentJsonMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentJsonMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentJsonMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragment includes the GraphQL fields of PdfMedia requested by the fragment mediaFragment.
type mediaFragmentPdfMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentPdfMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentPdfMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentPdfMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentPdfMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragmentPreviewURLsPreviewURLSet includes the requested fields of the GraphQL type PreviewURLSet.
type mediaFragmentPreviewURLsPreviewURLSet struct {
	Small *string `json:"small"`
}

// GetSmall returns mediaFragmentPreviewURLsPreviewURLSet.Small, and is useful for accessing the field via an interface.
func (v *mediaFragmentPreviewURLsPreviewURLSet) GetSmall() *string { return v.Small }

// mediaFragment includes the GraphQL fields of SyncingMedia requested by the fragment mediaFragment.
type mediaFragmentSyncingMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentSyncingMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentSyncingMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentSyncingMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentSyncingMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragment includes the GraphQL fields of TextMedia requested by the fragment mediaFragment.
type mediaFragmentTextMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentTextMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentTextMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentTextMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentTextMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragment includes the GraphQL fields of UnknownMedia requested by the fragment mediaFragment.
type mediaFragmentUnknownMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentUnknownMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentUnknownMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentUnknownMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentUnknownMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// mediaFragment includes the GraphQL fields of VideoMedia requested by the fragment mediaFragment.
type mediaFragmentVideoMedia struct {
	PreviewURLs   *mediaFragmentPreviewURLsPreviewURLSet `json:"previewURLs"`
	FallbackMedia *mediaFragmentFallbackMedia            `json:"fallbackMedia"`
}

// GetPreviewURLs returns mediaFragmentVideoMedia.PreviewURLs, and is useful for accessing the field via an interface.
func (v *mediaFragmentVideoMedia) GetPreviewURLs() *mediaFragmentPreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// GetFallbackMedia returns mediaFragmentVideoMedia.FallbackMedia, and is useful for accessing the field via an interface.
func (v *mediaFragmentVideoMedia) GetFallbackMedia() *mediaFragmentFallbackMedia {
	return v.FallbackMedia
}

// postDigestEntityQueryPostByIdErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type postDigestEntityQueryPostByIdErrInvalidInput struct {
	Typename                 *string `json:"__typename"`
	errorFragErrInvalidInput `json:"-"`
}

// GetTypename returns postDigestEntityQueryPostByIdErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns postDigestEntityQueryPostByIdErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdErrInvalidInput) GetMessage() string {
	return v.errorFragErrInvalidInput.Message
}

func (v *postDigestEntityQueryPostByIdErrInvalidInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryPostByIdErrInvalidInput
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryPostByIdErrInvalidInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.errorFragErrInvalidInput)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpostDigestEntityQueryPostByIdErrInvalidInput struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *postDigestEntityQueryPostByIdErrInvalidInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryPostByIdErrInvalidInput) __premarshalJSON() (*__premarshalpostDigestEntityQueryPostByIdErrInvalidInput, error) {
	var retval __premarshalpostDigestEntityQueryPostByIdErrInvalidInput

	retval.Typename = v.Typename
	retval.Message = v.errorFragErrInvalidInput.Message
	return &retval, nil
}

// postDigestEntityQueryPostByIdErrPostNotFound includes the requested fields of the GraphQL type ErrPostNotFound.
type postDigestEntityQueryPostByIdErrPostNotFound struct {
	Typename                 *string `json:"__typename"`
	errorFragErrPostNotFound `json:"-"`
}

// GetTypename returns postDigestEntityQueryPostByIdErrPostNotFound.Typename, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdErrPostNotFound) GetTypename() *string { return v.Typename }

// GetMessage returns postDigestEntityQueryPostByIdErrPostNotFound.Message, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdErrPostNotFound) GetMessage() string {
	return v.errorFragErrPostNotFound.Message
}

func (v *postDigestEntityQueryPostByIdErrPostNotFound) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryPostByIdErrPostNotFound
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryPostByIdErrPostNotFound = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.errorFragErrPostNotFound)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpostDigestEntityQueryPostByIdErrPostNotFound struct {
	Typename *string `json:"__typename"`

	Message string `json:"message"`
}

func (v *postDigestEntityQueryPostByIdErrPostNotFound) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryPostByIdErrPostNotFound) __premarshalJSON() (*__premarshalpostDigestEntityQueryPostByIdErrPostNotFound, error) {
	var retval __premarshalpostDigestEntityQueryPostByIdErrPostNotFound

	retval.Typename = v.Typename
	retval.Message = v.errorFragErrPostNotFound.Message
	return &retval, nil
}

// postDigestEntityQueryPostByIdPost includes the requested fields of the GraphQL type Post.
type postDigestEntityQueryPostByIdPost struct {
	Typename *string                                             `json:"__typename"`
	Dbid     persist.DBID                                        `json:"dbid"`
	Caption  *string                                             `json:"caption"`
	Author   *postDigestEntityQueryPostByIdPostAuthorGalleryUser `json:"author"`
	Tokens   []*postDigestEntityQueryPostByIdPostTokensToken     `json:"tokens"`
}

// GetTypename returns postDigestEntityQueryPostByIdPost.Typename, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPost) GetTypename() *string { return v.Typename }

// GetDbid returns postDigestEntityQueryPostByIdPost.Dbid, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPost) GetDbid() persist.DBID { return v.Dbid }

// GetCaption returns postDigestEntityQueryPostByIdPost.Caption, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPost) GetCaption() *string { return v.Caption }

// GetAuthor returns postDigestEntityQueryPostByIdPost.Author, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPost) GetAuthor() *postDigestEntityQueryPostByIdPostAuthorGalleryUser {
	return v.Author
}

// GetTokens returns postDigestEntityQueryPostByIdPost.Tokens, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPost) GetTokens() []*postDigestEntityQueryPostByIdPostTokensToken {
	return v.Tokens
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUser includes the requested fields of the GraphQL type GalleryUser.
type postDigestEntityQueryPostByIdPostAuthorGalleryUser struct {
	Username     *string                                                         `json:"username"`
	ProfileImage *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage `json:"-"`
}

// GetUsername returns postDigestEntityQueryPostByIdPostAuthorGalleryUser.Username, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUser) GetUsername() *string { return v.Username }

// GetProfileImage returns postDigestEntityQueryPostByIdPostAuthorGalleryUser.ProfileImage, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUser) GetProfileImage() *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage {
	return v.ProfileImage
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryPostByIdPostAuthorGalleryUser
		ProfileImage json.RawMessage `json:"profileImage"`
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryPostByIdPostAuthorGalleryUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ProfileImage
		src := firstPass.ProfileImage
		if len(src) != 0 && string(src) != "null" {
			*dst = new(postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage)
			err = __unmarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal postDigestEntityQueryPostByIdPostAuthorGalleryUser.ProfileImage: %w", err)
			}
		}
	}
	return nil
}

type __premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUser struct {
	Username *string `json:"username"`

	ProfileImage json.RawMessage `json:"profileImage"`
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUser) __premarshalJSON() (*__premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUser, error) {
	var retval __premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUser

	retval.Username = v.Username
	{

		dst := &retval.ProfileImage
		src := v.ProfileImage
		if src != nil {
			var err error
			*dst, err = __marshalpostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal postDigestEntityQueryPostByIdPostAuthorGalleryUser.ProfileImage: %w", err)
			}
		}
	}
	return &retval, nil
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage includes the requested fields of the GraphQL interface ProfileImage.
//
// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage is implemented by the following types:
// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage
// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage
type postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage interface {
	implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage) implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage() {
}
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage) implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage() {
}

func __unmarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage(b []byte, v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EnsProfileImage":
		*v = new(postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage)
		return json.Unmarshal(b, *v)
	case "TokenProfileImage":
		*v = new(postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ProfileImage.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage: "%v"`, tn.TypeName)
	}
}

func __marshalpostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage(v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage:
		typename = "EnsProfileImage"

		result := struct {
			TypeName string `json:"__typename"`
			*postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage
		}{typename, v}
		return json.Marshal(result)
	case *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage:
		typename = "TokenProfileImage"

		result := struct {
			TypeName string `json:"__typename"`
			*postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImage: "%T"`, v)
	}
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage includes the requested fields of the GraphQL type EnsProfileImage.
type postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage struct {
	Typename *string                                                                                                 `json:"__typename"`
	EnsToken *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage `json:"ensToken"`
	PfpToken *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpToken                  `json:"pfpToken"`
}

// GetTypename returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage.Typename, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage) GetTypename() *string {
	return v.Typename
}

// GetEnsToken returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage.EnsToken, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage) GetEnsToken() *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage {
	return v.EnsToken
}

// GetPfpToken returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage.PfpToken, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImage) GetPfpToken() *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpToken {
	return v.PfpToken
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage includes the requested fields of the GraphQL type HTTPSProfileImage.
type postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage struct {
	PreviewURLs *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet `json:"previewURLs"`
}

// GetPreviewURLs returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage.PreviewURLs, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImage) GetPreviewURLs() *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet {
	return v.PreviewURLs
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet includes the requested fields of the GraphQL type PreviewURLSet.
type postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet struct {
	Small *string `json:"small"`
}

// GetSmall returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet.Small, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImageEnsTokenHTTPSProfileImagePreviewURLsPreviewURLSet) GetSmall() *string {
	return v.Small
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpToken includes the requested fields of the GraphQL type Token.
type postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpToken struct {
	Definition postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition `json:"definition"`
}

// GetDefinition returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpToken.Definition, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpToken) GetDefinition() postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition {
	return v.Definition
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition includes the requested fields of the GraphQL type TokenDefinition.
type postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition struct {
	definitionFrag `json:"-"`
}

// GetName returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition.Name, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) GetName() *string {
	return v.definitionFrag.Name
}

// GetDescription returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition.Description, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) GetDescription() *string {
	return v.definitionFrag.Description
}

// GetMedia returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition.Media, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) GetMedia() *definitionFragMediaMediaSubtype {
	return v.definitionFrag.Media
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.definitionFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition struct {
	Name *string `json:"name"`

	Description *string `json:"description"`

	Media json.RawMessage `json:"media"`
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition) __premarshalJSON() (*__premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition, error) {
	var retval __premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition

	retval.Name = v.definitionFrag.Name
	retval.Description = v.definitionFrag.Description
	{

		dst := &retval.Media
		src := v.definitionFrag.Media
		if src != nil {
			var err error
			*dst, err = __marshaldefinitionFragMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageEnsProfileImagePfpTokenDefinition.definitionFrag.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage includes the requested fields of the GraphQL type TokenProfileImage.
type postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage struct {
	Typename *string                                                                              `json:"__typename"`
	Token    postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageToken `json:"token"`
}

// GetTypename returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage.Typename, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage) GetTypename() *string {
	return v.Typename
}

// GetToken returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage.Token, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImage) GetToken() postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageToken {
	return v.Token
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageToken includes the requested fields of the GraphQL type Token.
type postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageToken struct {
	Definition postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition `json:"definition"`
}

// GetDefinition returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageToken.Definition, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageToken) GetDefinition() postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition {
	return v.Definition
}

// postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition includes the requested fields of the GraphQL type TokenDefinition.
type postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition struct {
	definitionFrag `json:"-"`
}

// GetName returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition.Name, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition) GetName() *string {
	return v.definitionFrag.Name
}

// GetDescription returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition.Description, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition) GetDescription() *string {
	return v.definitionFrag.Description
}

// GetMedia returns postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition.Media, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition) GetMedia() *definitionFragMediaMediaSubtype {
	return v.definitionFrag.Media
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.definitionFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition struct {
	Name *string `json:"name"`

	Description *string `json:"description"`

	Media json.RawMessage `json:"media"`
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition) __premarshalJSON() (*__premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition, error) {
	var retval __premarshalpostDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition

	retval.Name = v.definitionFrag.Name
	retval.Description = v.definitionFrag.Description
	{

		dst := &retval.Media
		src := v.definitionFrag.Media
		if src != nil {
			var err error
			*dst, err = __marshaldefinitionFragMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal postDigestEntityQueryPostByIdPostAuthorGalleryUserProfileImageTokenProfileImageTokenDefinition.definitionFrag.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// postDigestEntityQueryPostByIdPostOrError includes the requested fields of the GraphQL interface PostOrError.
//
// postDigestEntityQueryPostByIdPostOrError is implemented by the following types:
// postDigestEntityQueryPostByIdErrInvalidInput
// postDigestEntityQueryPostByIdErrPostNotFound
// postDigestEntityQueryPostByIdPost
type postDigestEntityQueryPostByIdPostOrError interface {
	implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *postDigestEntityQueryPostByIdErrInvalidInput) implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostOrError() {
}
func (v *postDigestEntityQueryPostByIdErrPostNotFound) implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostOrError() {
}
func (v *postDigestEntityQueryPostByIdPost) implementsGraphQLInterfacepostDigestEntityQueryPostByIdPostOrError() {
}

func __unmarshalpostDigestEntityQueryPostByIdPostOrError(b []byte, v *postDigestEntityQueryPostByIdPostOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(postDigestEntityQueryPostByIdErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrPostNotFound":
		*v = new(postDigestEntityQueryPostByIdErrPostNotFound)
		return json.Unmarshal(b, *v)
	case "Post":
		*v = new(postDigestEntityQueryPostByIdPost)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PostOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for postDigestEntityQueryPostByIdPostOrError: "%v"`, tn.TypeName)
	}
}

func __marshalpostDigestEntityQueryPostByIdPostOrError(v *postDigestEntityQueryPostByIdPostOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *postDigestEntityQueryPostByIdErrInvalidInput:
		typename = "ErrInvalidInput"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpostDigestEntityQueryPostByIdErrInvalidInput
		}{typename, premarshaled}
		return json.Marshal(result)
	case *postDigestEntityQueryPostByIdErrPostNotFound:
		typename = "ErrPostNotFound"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalpostDigestEntityQueryPostByIdErrPostNotFound
		}{typename, premarshaled}
		return json.Marshal(result)
	case *postDigestEntityQueryPostByIdPost:
		typename = "Post"

		result := struct {
			TypeName string `json:"__typename"`
			*postDigestEntityQueryPostByIdPost
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for postDigestEntityQueryPostByIdPostOrError: "%T"`, v)
	}
}

// postDigestEntityQueryPostByIdPostTokensToken includes the requested fields of the GraphQL type Token.
type postDigestEntityQueryPostByIdPostTokensToken struct {
	tokenFrag `json:"-"`
}

// GetDbid returns postDigestEntityQueryPostByIdPostTokensToken.Dbid, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostTokensToken) GetDbid() persist.DBID {
	return v.tokenFrag.Dbid
}

// GetDefinition returns postDigestEntityQueryPostByIdPostTokensToken.Definition, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryPostByIdPostTokensToken) GetDefinition() tokenFragDefinitionTokenDefinition {
	return v.tokenFrag.Definition
}

func (v *postDigestEntityQueryPostByIdPostTokensToken) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryPostByIdPostTokensToken
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryPostByIdPostTokensToken = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.tokenFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalpostDigestEntityQueryPostByIdPostTokensToken struct {
	Dbid persist.DBID `json:"dbid"`

	Definition tokenFragDefinitionTokenDefinition `json:"definition"`
}

func (v *postDigestEntityQueryPostByIdPostTokensToken) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryPostByIdPostTokensToken) __premarshalJSON() (*__premarshalpostDigestEntityQueryPostByIdPostTokensToken, error) {
	var retval __premarshalpostDigestEntityQueryPostByIdPostTokensToken

	retval.Dbid = v.tokenFrag.Dbid
	retval.Definition = v.tokenFrag.Definition
	return &retval, nil
}

// postDigestEntityQueryResponse is returned by postDigestEntityQuery on success.
type postDigestEntityQueryResponse struct {
	PostById *postDigestEntityQueryPostByIdPostOrError `json:"-"`
}

// GetPostById returns postDigestEntityQueryResponse.PostById, and is useful for accessing the field via an interface.
func (v *postDigestEntityQueryResponse) GetPostById() *postDigestEntityQueryPostByIdPostOrError {
	return v.PostById
}

func (v *postDigestEntityQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*postDigestEntityQueryResponse
		PostById json.RawMessage `json:"postById"`
		graphql.NoUnmarshalJSON
	}
	firstPass.postDigestEntityQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.PostById
		src := firstPass.PostById
		if len(src) != 0 && string(src) != "null" {
			*dst = new(postDigestEntityQueryPostByIdPostOrError)
			err = __unmarshalpostDigestEntityQueryPostByIdPostOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal postDigestEntityQueryResponse.PostById: %w", err)
			}
		}
	}
	return nil
}

type __premarshalpostDigestEntityQueryResponse struct {
	PostById json.RawMessage `json:"postById"`
}

func (v *postDigestEntityQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *postDigestEntityQueryResponse) __premarshalJSON() (*__premarshalpostDigestEntityQueryResponse, error) {
	var retval __premarshalpostDigestEntityQueryResponse

	{

		dst := &retval.PostById
		src := v.PostById
		if src != nil {
			var err error
			*dst, err = __marshalpostDigestEntityQueryPostByIdPostOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal postDigestEntityQueryResponse.PostById: %w", err)
			}
		}
	}
	return &retval, nil
}

// tokenFrag includes the GraphQL fields of Token requested by the fragment tokenFrag.
type tokenFrag struct {
	Dbid       persist.DBID                       `json:"dbid"`
	Definition tokenFragDefinitionTokenDefinition `json:"definition"`
}

// GetDbid returns tokenFrag.Dbid, and is useful for accessing the field via an interface.
func (v *tokenFrag) GetDbid() persist.DBID { return v.Dbid }

// GetDefinition returns tokenFrag.Definition, and is useful for accessing the field via an interface.
func (v *tokenFrag) GetDefinition() tokenFragDefinitionTokenDefinition { return v.Definition }

// tokenFragDefinitionTokenDefinition includes the requested fields of the GraphQL type TokenDefinition.
type tokenFragDefinitionTokenDefinition struct {
	definitionFrag `json:"-"`
}

// GetName returns tokenFragDefinitionTokenDefinition.Name, and is useful for accessing the field via an interface.
func (v *tokenFragDefinitionTokenDefinition) GetName() *string { return v.definitionFrag.Name }

// GetDescription returns tokenFragDefinitionTokenDefinition.Description, and is useful for accessing the field via an interface.
func (v *tokenFragDefinitionTokenDefinition) GetDescription() *string {
	return v.definitionFrag.Description
}

// GetMedia returns tokenFragDefinitionTokenDefinition.Media, and is useful for accessing the field via an interface.
func (v *tokenFragDefinitionTokenDefinition) GetMedia() *definitionFragMediaMediaSubtype {
	return v.definitionFrag.Media
}

func (v *tokenFragDefinitionTokenDefinition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*tokenFragDefinitionTokenDefinition
		graphql.NoUnmarshalJSON
	}
	firstPass.tokenFragDefinitionTokenDefinition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.definitionFrag)
	if err != nil {
		return err
	}
	return nil
}

type __premarshaltokenFragDefinitionTokenDefinition struct {
	Name *string `json:"name"`

	Description *string `json:"description"`

	Media json.RawMessage `json:"media"`
}

func (v *tokenFragDefinitionTokenDefinition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *tokenFragDefinitionTokenDefinition) __premarshalJSON() (*__premarshaltokenFragDefinitionTokenDefinition, error) {
	var retval __premarshaltokenFragDefinitionTokenDefinition

	retval.Name = v.definitionFrag.Name
	retval.Description = v.definitionFrag.Description
	{

		dst := &retval.Media
		src := v.definitionFrag.Media
		if src != nil {
			var err error
			*dst, err = __marshaldefinitionFragMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal tokenFragDefinitionTokenDefinition.definitionFrag.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// The query or mutation executed by communityDigestEntityQuery.
const communityDigestEntityQuery_Operation = `
query communityDigestEntityQuery ($id: DBID!) {
	communityById(id: $id) {
		__typename
		... on Error {
			... errorFrag
		}
		... on Community {
			dbid
			subtype {
				__typename
				... on ContractCommunity {
					contract {
						contractAddress {
							address
							chain
						}
						chain
						profileImageURL
					}
				}
				... on ArtBlocksCommunity {
					contract {
						contractAddress {
							address
							chain
						}
						chain
						profileImageURL
					}
				}
			}
			name
			description
			profileImageURL
			creators {
				__typename
				... on GalleryUser {
					username
					profileImage {
						__typename
						... on TokenProfileImage {
							token {
								definition {
									... definitionFrag
								}
							}
						}
						... on EnsProfileImage {
							ensToken: profileImage {
								previewURLs {
									small
								}
							}
							pfpToken: token {
								definition {
									... definitionFrag
								}
							}
						}
					}
				}
				... on ChainAddress {
					address
					chain
				}
			}
			tokens(first: 10) {
				edges {
					node {
						... tokenFrag
					}
				}
			}
		}
	}
}
fragment errorFrag on Error {
	message
	__typename
}
fragment definitionFrag on TokenDefinition {
	name
	description
	media {
		__typename
		... on Media {
			... mediaFragment
		}
	}
}
fragment tokenFrag on Token {
	dbid
	definition {
		... definitionFrag
	}
}
fragment mediaFragment on Media {
	previewURLs {
		small
	}
	fallbackMedia {
		mediaURL
	}
}
`

func communityDigestEntityQuery(
	ctx context.Context,
	client graphql.Client,
	id persist.DBID,
) (*communityDigestEntityQueryResponse, error) {
	req := &graphql.Request{
		OpName: "communityDigestEntityQuery",
		Query:  communityDigestEntityQuery_Operation,
		Variables: &__communityDigestEntityQueryInput{
			Id: id,
		},
	}
	var err error

	var data communityDigestEntityQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by galleryDigestEntityQuery.
const galleryDigestEntityQuery_Operation = `
query galleryDigestEntityQuery ($id: DBID!) {
	galleryById(id: $id) {
		__typename
		... on Error {
			... errorFrag
		}
		... on Gallery {
			dbid
			owner {
				username
			}
			name
			description
			tokenPreviews {
				small
			}
		}
	}
}
fragment errorFrag on Error {
	message
	__typename
}
`

func galleryDigestEntityQuery(
	ctx context.Context,
	client graphql.Client,
	id persist.DBID,
) (*galleryDigestEntityQueryResponse, error) {
	req := &graphql.Request{
		OpName: "galleryDigestEntityQuery",
		Query:  galleryDigestEntityQuery_Operation,
		Variables: &__galleryDigestEntityQueryInput{
			Id: id,
		},
	}
	var err error

	var data galleryDigestEntityQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by postDigestEntityQuery.
const postDigestEntityQuery_Operation = `
query postDigestEntityQuery ($id: DBID!) {
	postById(id: $id) {
		__typename
		... on Error {
			... errorFrag
		}
		... on Post {
			dbid
			caption
			author {
				username
				profileImage {
					__typename
					... on TokenProfileImage {
						token {
							definition {
								... definitionFrag
							}
						}
					}
					... on EnsProfileImage {
						ensToken: profileImage {
							previewURLs {
								small
							}
						}
						pfpToken: token {
							definition {
								... definitionFrag
							}
						}
					}
				}
			}
			tokens {
				... tokenFrag
			}
		}
	}
}
fragment errorFrag on Error {
	message
	__typename
}
fragment definitionFrag on TokenDefinition {
	name
	description
	media {
		__typename
		... on Media {
			... mediaFragment
		}
	}
}
fragment tokenFrag on Token {
	dbid
	definition {
		... definitionFrag
	}
}
fragment mediaFragment on Media {
	previewURLs {
		small
	}
	fallbackMedia {
		mediaURL
	}
}
`

func postDigestEntityQuery(
	ctx context.Context,
	client graphql.Client,
	id persist.DBID,
) (*postDigestEntityQueryResponse, error) {
	req := &graphql.Request{
		OpName: "postDigestEntityQuery",
		Query:  postDigestEntityQuery_Operation,
		Variables: &__postDigestEntityQueryInput{
			Id: id,
		},
	}
	var err error

	var data postDigestEntityQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
