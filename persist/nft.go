package persist

import (
	"context"
	"errors"
	"time"

	"github.com/mikeydub/go-gallery/runtime"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	// "github.com/davecgh/go-spew/spew"
)

//-------------------------------------------------------------

const nftColName = "nfts"

type Nft struct {
	VersionInt    int64   `bson:"version"              json:"version"` // schema version for this model
	IDstr         DbId    `bson:"_id"                  json:"id"`
	CreationTimeF float64 `bson:"creation_time"        json:"creation_time"`
	DeletedBool   bool    `bson:"deleted"`

	NameStr           string `bson:"name,omitempty"                 json:"name"`
	DescriptionStr    string `bson:"description,omitempty"          json:"description"`
	CollectorsNoteStr string `bson:"collectors_note,omitempty" json:"collectors_note"`

	ExternalURLstr      string   `bson:"external_url,omitempty"         json:"external_url"`
	TokenMetadataUrlStr string   `bson:"token_metadata_url,omitempty" json:"token_metadata_url"`
	CreatorAddressStr   string   `bson:"creator_address,omitempty"      json:"creator_address"`
	CreatorNameStr      string   `bson:"creator_name,omitempty" json:"creator_name"`
	OwnerAddressStr     string   `bson:"owner_address,omitempty" json:"owner_address"`
	Contract            Contract `bson:"contract,omitempty"     json:"asset_contract"`

	// OPEN_SEA_TOKEN_ID
	// https://api.opensea.io/api/v1/asset/0xa7d8d9ef8d8ce8992df33d8b8cf4aebabd5bd270/26000331
	// (/asset/:contract_address/:token_id)
	OpenSeaIDstr      string `bson:"opensea_id,omitempty"       json:"opensea_id"`
	OpenSeaTokenIDstr string `bson:"opensea_token_id,omitempty" json:"opensea_token_id"`

	// IMAGES - OPENSEA
	ImageURLstr             string `bson:"image_url,omitempty"           json:"image_url"`
	ImageThumbnailURLstr    string `bson:"image_thumbnail_url,omitempty" json:"image_thumbnail_url"`
	ImagePreviewURLstr      string `bson:"image_preview_url,omitempty"   json:"image_preview_url"`
	ImageOriginalUrlStr     string `bson:"image_original_url,omitempty" json:"image_original_url"`
	AnimationUrlStr         string `bson:"animation_url,omitempty" json:"animation_url"`
	AnimationOriginalUrlStr string `bson:"animation_original_url,omitempty" json:"animation_original_url"`

	AcquisitionDateStr string `bson:"acquisition_date,omitempty" json:"acquisition_date"`
}

type Contract struct {
	ContractAddressStr      string `bson:"contract_address,omitempty"     json:"address"`
	ContractNameStr         string `bson:"contract_name,omitempty" json:"name"`
	ContractDescription     string `bson:"contract_description,omitempty" json:"description"`
	ContractExternalLinkStr string `bson:"contract_external_link,omitempty" json:"external_link"`
	ContractSchemaNameStr   string `bson:"contract_schema_name,omitempty" json:"schema_name"`
	ContractSymbolStr       string `bson:"contract_symbol,omitempty" json:"symbol"`
	ContractTotalSupplyInt  int    `bson:"contract_total_supply,omitempty" json:"total_supply"`
}

/*// IS THIS REALLY NECESSARY? - why not just import directly from v0 DB into the v1 DB GLRYnft format?
// DEPRECATED!! - will be removed once we fully migrate to v1 server/db schema.
//                legacy NFT type, this is the schema in the initial v0 prototype of the system.
type GLRYnftLegacy struct {

	// ID - for now generated by the DB
	IDstr string `bson:"_id" json:"id"`

	// removed from newer NFT model, NFT's might be associated with multiple Users,
	// so we dont want to limit to a single user.
	UserIDstr string `bson:"user_id" json:"user_id"`

	ImageURLstr       string `bson:"image_url"           json:"image_url"`
	DescriptionStr    string `bson:"description"         json:"description"`
	NameStr           string `bson:"name"                json:"name"`
	CollectionNameStr string `bson:"collection_name"     json:"collection_name"`

	ExternalURLstr       string    `bson:"external_url"        json:"external_url"`
	CreatedDateF         float64   `bson:"created_date"        json:"created_date"`
	CreatorAddressStr    string    `bson:"creator_address"     json:"creator_address"`
	ContractAddressStr   string    `bson:"contract_address"    json:"contract_address"`
	TokenIDstr           int64     `bson:"token_id"            json:"token_id"`
	ImageThumbnailURLstr string    `bson:"image_thumbnail_url" json:"image_thumbnail_url"`
	ImagePreviewURLstr   string    `bson:"image_preview_url"   json:"image_preview_url"`

	PositionInt int64 `bson:"position" json:"position"`
	HiddenBool  bool  `bson:"hidden"   json:"hidden"`
}*/

//-------------------------------------------------------------
func NftCreateBulk(pNFTlst []*Nft,
	pCtx context.Context,
	pRuntime *runtime.Runtime) error {

	mp := NewMongoStorage(0, nftColName, pRuntime)

	return mp.InsertMany(pCtx, pNFTlst)
}

//-------------------------------------------------------------
func NftCreate(pNFT *Nft,
	pCtx context.Context,
	pRuntime *runtime.Runtime) (DbId, error) {

	mp := NewMongoStorage(0, nftColName, pRuntime)

	return mp.Insert(pCtx, pNFT)

}

//-------------------------------------------------------------
func NftGetByUserId(pUserIDstr DbId,
	pCtx context.Context,
	pRuntime *runtime.Runtime) ([]*Nft, error) {
	opts := &options.FindOptions{}
	if deadline, ok := pCtx.Deadline(); ok {
		dur := time.Until(deadline)
		opts.MaxTime = &dur
	}
	mp := NewMongoStorage(0, nftColName, pRuntime)
	result := []*Nft{}

	if err := mp.Find(pCtx, bson.M{"user_id": pUserIDstr}, result, opts); err != nil {
		return nil, err
	}

	return nil, nil
}

//-------------------------------------------------------------

func NeftGetById(pIDstr DbId, pCtx context.Context, pRuntime *runtime.Runtime) ([]*Nft, error) {

	opts := &options.FindOptions{}
	if deadline, ok := pCtx.Deadline(); ok {
		dur := time.Until(deadline)
		opts.MaxTime = &dur
	}

	mp := NewMongoStorage(0, nftColName, pRuntime)
	result := []*Nft{}

	if err := mp.Find(pCtx, bson.M{"_id": pIDstr}, result, opts); err != nil {
		return nil, err
	}

	return result, nil

}

//-------------------------------------------------------------

func NftUpdateById(pIDstr DbId, updatedNft *Nft, pCtx context.Context, pRuntime *runtime.Runtime) error {

	//------------------
	// VALIDATE
	if err := runtime.Validate(updatedNft, pRuntime); err != nil {
		return err
	}

	mp := NewMongoStorage(0, nftColName, pRuntime)

	return mp.Update(pCtx, bson.M{"_id": pIDstr}, updatedNft)

}

//-------------------------------------------------------------

func NftBulkUpsertOrRemove(walletAddress string, nfts []*Nft, pCtx context.Context, pRuntime *runtime.Runtime) error {

	mp := NewMongoStorage(0, nftColName, pRuntime)

	// UPSERT
	// --------------------------------------------------------
	weWantToUpsertHere := true

	upsertModels := make([]mongo.WriteModel, len(nfts))

	for i, v := range nfts {

		if v.OpenSeaIDstr == "" {
			return errors.New("open sea id required for each nft")
		}

		now := float64(time.Now().UnixNano()) / 1000000000.0

		// TODO last updated

		upsertModels[i] = mongo.UpdateOneModel{
			Upsert: &weWantToUpsertHere,
			Filter: bson.M{"owner_address": walletAddress, "opensea_id": v.OpenSeaIDstr},
			Update: bson.M{
				"$setOnInsert": bson.M{"_id": generateId(now), "created_at": now},
				"$set":         v,
			},
		}
	}

	if _, err := mp.collection.BulkWrite(pCtx, upsertModels); err != nil {
		return err
	}

	// FIND DIFFERENCE AND DELETE OUTLIERS
	// -------------------------------------------------------
	opts := &options.FindOptions{}
	if deadline, ok := pCtx.Deadline(); ok {
		dur := time.Until(deadline)
		opts.MaxTime = &dur
	}

	allNfts := []*Nft{}
	if err := mp.Find(pCtx, bson.M{"owner_address": walletAddress}, allNfts, opts); err != nil {
		return err
	}

	if len(allNfts) > len(nfts) {
		currOpenseaIds := map[string]bool{}
		diff := []DbId{}

		for _, v := range nfts {
			currOpenseaIds[v.OpenSeaIDstr] = true
		}

		for _, v := range allNfts {
			if v.OpenSeaIDstr == "" {
				return errors.New("could not find opensea id on db nft")
			}
			if !currOpenseaIds[v.OpenSeaIDstr] {
				diff = append(diff, v.IDstr)
			}
		}

		deleteModels := make([]mongo.WriteModel, len(diff))

		for i, v := range diff {
			deleteModels[i] = mongo.UpdateOneModel{Filter: bson.M{"_id": v}, Update: bson.M{"$set": bson.M{"deleted": true}}}
		}

		if _, err := mp.collection.BulkWrite(pCtx, deleteModels); err != nil {
			return err
		}
	}

	return nil
}
